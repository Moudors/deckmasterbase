// üß™ Teste das fun√ß√µes de adi√ß√£o de cartas do Deckbuilder
// Execute este script no navegador ap√≥s fazer login e entrar em um deck

console.log("üîç TESTE: Fun√ß√µes de Adicionar Cartas no Deckbuilder");

// Fun√ß√£o para testar adi√ß√£o via SearchBar
async function testSearchBarAddition() {
  console.log("\nüìù 1. Testando adi√ß√£o via SearchBar...");
  
  try {
    // Simular busca no Scryfall
    const response = await fetch(
      `https://api.scryfall.com/cards/named?exact=${encodeURIComponent("Lightning Bolt")}`
    );
    const cardData = await response.json();
    
    console.log("‚úÖ Carta encontrada no Scryfall:", cardData.name);
    
    // Verificar se os hooks est√£o dispon√≠veis
    if (window.React && window.ReactQuery) {
      console.log("‚úÖ React Query dispon√≠vel");
    } else {
      console.log("‚ùå React Query n√£o detectado na window");
    }
    
    return cardData;
  } catch (error) {
    console.error("‚ùå Erro na busca:", error);
    return null;
  }
}

// Fun√ß√£o para verificar estrutura do Supabase
async function testSupabaseOperations() {
  console.log("\nüîó 2. Testando opera√ß√µes do Supabase...");
  
  // Verificar se supabaseOperations est√° dispon√≠vel
  if (window.supabaseOperations) {
    console.log("‚úÖ supabaseOperations dispon√≠vel");
    
    if (window.supabaseOperations.deckCardOperations) {
      console.log("‚úÖ deckCardOperations dispon√≠vel");
      console.log("M√©todos:", Object.keys(window.supabaseOperations.deckCardOperations));
    }
  } else {
    console.log("‚ùå supabaseOperations n√£o dispon√≠vel na window");
  }
}

// Fun√ß√£o para verificar hooks do React Query
async function testReactQueryHooks() {
  console.log("\n‚öõÔ∏è 3. Testando hooks do React Query...");
  
  // Verificar se podemos acessar o queryClient
  try {
    if (window.ReactQuery && window.ReactQuery.useQueryClient) {
      console.log("‚úÖ useQueryClient dispon√≠vel");
    }
  } catch (error) {
    console.log("‚ùå Erro ao acessar React Query:", error);
  }
}

// Fun√ß√£o para testar adi√ß√£o manual de carta
async function testManualCardAddition(deckId) {
  console.log("\nüéØ 4. Testando adi√ß√£o manual de carta...");
  
  if (!deckId) {
    console.log("‚ùå deckId n√£o fornecido");
    return;
  }
  
  const testCard = {
    deck_id: deckId,
    card_name: "Lightning Bolt",
    scryfall_id: "test-scryfall-id",
    image_url: "https://example.com/test.jpg",
    mana_cost: "{R}",
    type_line: "Instant",
    acquired: false,
    quantity: 1,
    created_at: new Date(),
  };
  
  console.log("üß™ Carta de teste:", testCard);
  
  // Este seria o teste real se tiv√©ssemos acesso direto
  console.log("üìù Para testar manualmente:");
  console.log("1. Abra o Network tab");
  console.log("2. Digite 'Lightning Bolt' na SearchBar");
  console.log("3. Verifique se h√° requisi√ß√µes para o Scryfall");
  console.log("4. Verifique se h√° requisi√ß√µes para o Supabase ap√≥s selecionar a carta");
}

// Fun√ß√£o principal de teste
async function runAllTests() {
  console.log("üöÄ Iniciando testes do Deckbuilder...\n");
  
  // Pegar deckId da URL se poss√≠vel
  const urlParams = window.location.pathname.match(/\/deckbuilder\/(.+)/);
  const deckId = urlParams ? urlParams[1] : null;
  
  if (deckId) {
    console.log("üìÇ Deck ID detectado:", deckId);
  } else {
    console.log("‚ö†Ô∏è N√£o foi poss√≠vel detectar o deck ID da URL");
  }
  
  await testSearchBarAddition();
  await testSupabaseOperations();
  await testReactQueryHooks();
  await testManualCardAddition(deckId);
  
  console.log("\nüìã PR√ìXIMOS PASSOS PARA DEBUG:");
  console.log("1. Abra o console.log ap√≥s entrar em um deck");
  console.log("2. Execute: runAllTests()");
  console.log("3. Teste a SearchBar manualmente");
  console.log("4. Verifique se h√° erros no Network tab");
  console.log("5. Monitore o console para mensagens de erro");
  
  console.log("\nüîß Para debug mais profundo:");
  console.log("- window.location.pathname:", window.location.pathname);
  console.log("- window.React dispon√≠vel:", !!window.React);
  console.log("- window.ReactQuery dispon√≠vel:", !!window.ReactQuery);
}

// Executar automaticamente se n√£o estamos no contexto do React
if (typeof window !== 'undefined') {
  window.testDeckbuilderFunctions = {
    runAllTests,
    testSearchBarAddition,
    testSupabaseOperations,
    testReactQueryHooks,
    testManualCardAddition
  };
  
  console.log("üß™ Fun√ß√µes de teste carregadas!");
  console.log("Execute: testDeckbuilderFunctions.runAllTests()");
}

export { runAllTests, testSearchBarAddition, testSupabaseOperations, testReactQueryHooks, testManualCardAddition };