// Script para testar a nova funcionalidade de capa com art_crop
console.log("üé® === TESTE DE BUSCA DE CAPA COM ART_CROP ===");

// Fun√ß√£o para testar diretamente a API do Scryfall
async function testScryfallArtCrop() {
  console.log("\nüåê Testando API do Scryfall para art_crop...");
  
  const testCards = ['Lightning Bolt', 'Black Lotus', 'Sol Ring', 'Counterspell'];
  
  for (const cardName of testCards) {
    try {
      console.log(`\nüîç Testando: ${cardName}`);
      
      const response = await fetch(
        `https://api.scryfall.com/cards/named?exact=${encodeURIComponent(cardName)}`
      );
      
      if (response.ok) {
        const cardData = await response.json();
        
        console.log(`üìä Formatos dispon√≠veis para ${cardName}:`);
        console.log(`  üé® art_crop: ${cardData.image_uris?.art_crop ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üñºÔ∏è large: ${cardData.image_uris?.large ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üì∑ normal: ${cardData.image_uris?.normal ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üñºÔ∏è border_crop: ${cardData.image_uris?.border_crop ? '‚úÖ' : '‚ùå'}`);
        
        if (cardData.image_uris?.art_crop) {
          console.log(`  üéØ Art crop URL: ${cardData.image_uris.art_crop}`);
        }
        
        // Testar carregamento da imagem
        if (cardData.image_uris?.art_crop) {
          const img = new Image();
          img.onload = () => {
            console.log(`  ‚úÖ Art crop carrega corretamente: ${img.width}x${img.height}`);
          };
          img.onerror = () => {
            console.log(`  ‚ùå Erro ao carregar art crop`);
          };
          img.src = cardData.image_uris.art_crop;
        }
        
      } else {
        console.log(`  ‚ùå Carta n√£o encontrada: ${response.status}`);
      }
    } catch (error) {
      console.error(`  ‚ùå Erro ao buscar ${cardName}:`, error);
    }
  }
}

// Fun√ß√£o para testar a busca melhorada no app
function testEnhancedSearch() {
  console.log("\nüîç === TESTE DE BUSCA MELHORADA ===");
  
  const searchInput = document.querySelector('input[placeholder*="carta"]');
  
  if (!searchInput) {
    console.log("‚ùå Modal de busca n√£o est√° aberto");
    console.log("üí° Para abrir:");
    console.log("  1. Clique no bot√£o ‚öô de um deck");
    console.log("  2. Clique em 'Alterar Capa'");
    return;
  }
  
  console.log("‚úÖ Modal de busca encontrado!");
  
  // Testar busca
  const testQuery = "Lightning";
  console.log(`üìù Testando busca com: "${testQuery}"`);
  
  searchInput.value = testQuery;
  searchInput.dispatchEvent(new Event('input', { bubbles: true }));
  
  // Verificar ap√≥s 3 segundos
  setTimeout(() => {
    const suggestions = document.querySelectorAll('li[class*="cursor-pointer"]');
    console.log(`üìã Sugest√µes encontradas: ${suggestions.length}`);
    
    if (suggestions.length > 0) {
      console.log("‚úÖ Busca funcionando!");
      
      suggestions.forEach((sug, i) => {
        const img = sug.querySelector('img');
        const cardName = sug.querySelector('.text-white').textContent;
        const artCropBadge = sug.querySelector('.text-green-400');
        const frameBadge = sug.querySelector('.text-yellow-400');
        
        console.log(`  ${i + 1}: ${cardName}`);
        console.log(`     üì∏ Imagem: ${img ? '‚úÖ' : '‚ùå'}`);
        console.log(`     üé® Art crop: ${artCropBadge ? '‚úÖ' : '‚ùå'}`);
        console.log(`     üñºÔ∏è Com moldura: ${frameBadge ? '‚úÖ' : '‚ùå'}`);
        
        if (img) {
          console.log(`     üîó URL: ${img.src}`);
        }
      });
      
      // Testar clique na primeira sugest√£o
      if (suggestions.length > 0) {
        console.log("\nüñ±Ô∏è Testando clique na primeira sugest√£o...");
        
        // Interceptar logs da fun√ß√£o handleSelectCover
        const originalLog = console.log;
        console.log = function(...args) {
          if (args[0] && args[0].includes('COVER FUNCTION')) {
            console.warn("üñºÔ∏è COVER DEBUG:", ...args);
          }
          originalLog.apply(console, args);
        };
        
        suggestions[0].click();
        
        // Restaurar ap√≥s 5 segundos
        setTimeout(() => {
          console.log = originalLog;
          console.log("‚úÖ Teste de clique conclu√≠do");
        }, 5000);
      }
      
    } else {
      console.log("‚ùå Nenhuma sugest√£o encontrada");
      console.log("üîç Poss√≠veis problemas:");
      console.log("  - API do Scryfall n√£o respondeu");
      console.log("  - Fun√ß√£o handleSearchAutocomplete falhou");
      console.log("  - Rede lenta (aguarde mais tempo)");
    }
  }, 3000);
}

// Fun√ß√£o para verificar melhorias visuais
function checkVisualImprovements() {
  console.log("\nüé® === VERIFICANDO MELHORIAS VISUAIS ===");
  
  const searchInput = document.querySelector('input[placeholder*="carta"]');
  
  if (searchInput) {
    console.log("‚úÖ Modal de busca ativo");
    
    // Verificar se h√° sugest√µes com imagens
    const suggestions = document.querySelectorAll('li[class*="cursor-pointer"]');
    const suggestionsWithImages = Array.from(suggestions).filter(sug => sug.querySelector('img'));
    
    console.log(`üìä Estat√≠sticas:`);
    console.log(`  üìã Total de sugest√µes: ${suggestions.length}`);
    console.log(`  üñºÔ∏è Com imagens: ${suggestionsWithImages.length}`);
    console.log(`  üé® Art crop badges: ${document.querySelectorAll('.text-green-400').length}`);
    console.log(`  üñºÔ∏è Frame badges: ${document.querySelectorAll('.text-yellow-400').length}`);
    
    if (suggestionsWithImages.length > 0) {
      console.log("‚úÖ Melhorias visuais funcionando!");
    } else {
      console.log("‚ö†Ô∏è Fa√ßa uma busca para ver as melhorias visuais");
    }
    
  } else {
    console.log("‚ùå Modal n√£o est√° aberto");
  }
}

// Executar testes
setTimeout(() => {
  testScryfallArtCrop();
}, 1000);

setTimeout(() => {
  checkVisualImprovements();
}, 2000);

// Disponibilizar fun√ß√µes
window.testScryfallArtCrop = testScryfallArtCrop;
window.testEnhancedSearch = testEnhancedSearch;
window.checkVisualImprovements = checkVisualImprovements;

console.log("\nüí° === FUN√á√ïES DISPON√çVEIS ===");
console.log("‚Ä¢ testScryfallArtCrop() - Testa API do Scryfall");
console.log("‚Ä¢ testEnhancedSearch() - Testa busca no app (abra modal primeiro)");
console.log("‚Ä¢ checkVisualImprovements() - Verifica melhorias visuais");
console.log("\nüöÄ Executando testes autom√°ticos...");