// Teste espec√≠fico para cartas de duas faces (dual-face cards)

console.log("üîÑ === TESTE DE CARTAS DUAL-FACE ===");

// Lista de cartas de duas faces famosas para testar
const dualFaceCards = [
  'Delver of Secrets',
  'Huntmaster of the Fells',
  'Jace, Vryn\'s Prodigy',
  'Bloodline Keeper',
  'Village Messenger',
  'Daybreak Ranger',
  'Garruk Relentless',
  'Liliana, Heretical Healer'
];

// Fun√ß√£o para testar cartas dual-face na API
async function testDualFaceCards() {
  console.log("üåê Testando cartas dual-face na API do Scryfall...");
  
  for (const cardName of dualFaceCards) {
    try {
      console.log(`\nüîç Testando: ${cardName}`);
      
      const response = await fetch(
        `https://api.scryfall.com/cards/named?exact=${encodeURIComponent(cardName)}`
      );
      
      if (response.ok) {
        const cardData = await response.json();
        
        console.log(`üìä Estrutura da carta ${cardName}:`);
        console.log(`  üé¥ Tem image_uris no root: ${!!cardData.image_uris ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üîÑ Tem card_faces: ${!!cardData.card_faces ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üìÑ N√∫mero de faces: ${cardData.card_faces?.length || 0}`);
        
        if (cardData.card_faces) {
          cardData.card_faces.forEach((face, index) => {
            console.log(`    Face ${index + 1}: ${face.name}`);
            console.log(`      üé® art_crop: ${face.image_uris?.art_crop ? '‚úÖ' : '‚ùå'}`);
            console.log(`      üñºÔ∏è large: ${face.image_uris?.large ? '‚úÖ' : '‚ùå'}`);
            console.log(`      üì∑ normal: ${face.image_uris?.normal ? '‚úÖ' : '‚ùå'}`);
            
            if (face.image_uris?.art_crop) {
              console.log(`      üéØ Art crop URL: ${face.image_uris.art_crop.substring(0, 60)}...`);
            }
          });
        }
        
        if (cardData.image_uris) {
          console.log(`  ‚ö†Ô∏è ATEN√á√ÉO: Carta dual-face com image_uris no root (incomum)`);
        }
        
      } else {
        console.log(`  ‚ùå Carta n√£o encontrada: ${response.status}`);
      }
    } catch (error) {
      console.error(`  ‚ùå Erro ao buscar ${cardName}:`, error);
    }
    
    // Pequena pausa para n√£o sobrecarregar a API
    await new Promise(resolve => setTimeout(resolve, 200));
  }
}

// Fun√ß√£o para testar no app
function testDualFaceInApp() {
  console.log("\nüéÆ === TESTE NO APP ===");
  
  const searchInput = document.querySelector('input[placeholder*="carta"]');
  
  if (!searchInput) {
    console.log("‚ùå Modal de busca n√£o est√° aberto");
    console.log("üí° Para testar cartas dual-face:");
    console.log("  1. Clique no bot√£o ‚öô de um deck");
    console.log("  2. Clique em 'Alterar Capa'");
    console.log("  3. Digite 'Delver' ou 'Huntmaster'");
    return;
  }
  
  console.log("‚úÖ Modal encontrado! Testando busca dual-face...");
  
  // Testar com carta dual-face
  const testCard = "Delver of Secrets";
  console.log(`üìù Testando busca com: "${testCard}"`);
  
  searchInput.value = testCard;
  searchInput.dispatchEvent(new Event('input', { bubbles: true }));
  
  setTimeout(() => {
    const suggestions = document.querySelectorAll('li[class*="cursor-pointer"]');
    console.log(`üìã Sugest√µes encontradas: ${suggestions.length}`);
    
    if (suggestions.length > 0) {
      suggestions.forEach((sug, i) => {
        const img = sug.querySelector('img');
        const cardName = sug.querySelector('.text-white').textContent;
        const dualFaceBadge = sug.querySelector('.text-blue-400');
        const artCropBadge = sug.querySelector('.text-green-400');
        
        console.log(`  ${i + 1}: ${cardName}`);
        console.log(`     üîÑ Dual-face: ${dualFaceBadge ? '‚úÖ' : '‚ùå'}`);
        console.log(`     üé® Art crop: ${artCropBadge ? '‚úÖ' : '‚ùå'}`);
        console.log(`     üì∏ Imagem: ${img ? '‚úÖ' : '‚ùå'}`);
      });
      
      // Testar clique
      if (suggestions.length > 0) {
        console.log("\nüñ±Ô∏è Testando sele√ß√£o de carta dual-face...");
        
        // Interceptar logs
        const originalLog = console.log;
        console.log = function(...args) {
          if (args[0] && args[0].includes('COVER FUNCTION')) {
            console.warn("üîÑ DUAL-FACE DEBUG:", ...args);
          }
          originalLog.apply(console, args);
        };
        
        suggestions[0].click();
        
        setTimeout(() => {
          console.log = originalLog;
          console.log("‚úÖ Teste de dual-face conclu√≠do");
        }, 5000);
      }
    } else {
      console.log("‚ùå Nenhuma sugest√£o - aguarde ou teste conectividade");
    }
  }, 3000);
}

// Disponibilizar fun√ß√µes
window.testDualFaceCards = testDualFaceCards;
window.testDualFaceInApp = testDualFaceInApp;

console.log("\nüí° === FUN√á√ïES PARA TESTE DUAL-FACE ===");
console.log("‚Ä¢ testDualFaceCards() - Testa API com cartas dual-face");
console.log("‚Ä¢ testDualFaceInApp() - Testa no app (abra modal primeiro)");
console.log("\nüöÄ Executando teste autom√°tico...");

setTimeout(testDualFaceCards, 1000);