// üß™ Teste espec√≠fico das fun√ß√µes de arte do ArtSelector
// Execute este script no navegador ap√≥s abrir o ArtSelector em um deck

console.log("üîç TESTE: Fun√ß√µes de Arte - Mudar Arte e Adicionar C√≥pias");

// Fun√ß√£o para testar mudan√ßa de arte
async function testChangeArt() {
  console.log("\nüé® 1. Testando mudan√ßa de arte...");
  
  // Verificar se o ArtSelector est√° aberto
  const artSelectorDialog = document.querySelector('[role="dialog"]');
  
  if (!artSelectorDialog) {
    console.log("‚ùå ArtSelector n√£o est√° aberto. Abra primeiro com triple-tap em uma carta.");
    return false;
  }
  
  console.log("‚úÖ ArtSelector detectado");
  
  // Procurar por vers√µes de arte
  const artVersions = document.querySelectorAll('[data-version], .art-version, img[src*="scryfall"]');
  console.log("üñºÔ∏è Vers√µes de arte encontradas:", artVersions.length);
  
  if (artVersions.length === 0) {
    console.log("‚ùå Nenhuma vers√£o de arte encontrada");
    return false;
  }
  
  // Procurar pelo bot√£o de confirmar mudan√ßa
  const confirmButtons = document.querySelectorAll('button');
  const confirmButton = Array.from(confirmButtons).find(btn => 
    btn.textContent.includes('Alterar') || 
    btn.textContent.includes('Confirmar') ||
    btn.textContent.includes('Change')
  );
  
  if (confirmButton) {
    console.log("‚úÖ Bot√£o de confirmar encontrado:", confirmButton.textContent);
  } else {
    console.log("‚ö†Ô∏è Bot√£o de confirmar n√£o encontrado claramente");
  }
  
  console.log("üìù Para testar mudan√ßa de arte:");
  console.log("1. Selecione uma vers√£o diferente da arte");
  console.log("2. Clique no bot√£o de confirmar");
  console.log("3. Verifique se a carta no deck mudou de visual");
  
  return true;
}

// Fun√ß√£o para testar adi√ß√£o de c√≥pias
async function testAddCopies() {
  console.log("\nüìã 2. Testando adi√ß√£o de c√≥pias...");
  
  // Verificar se o ArtSelector est√° aberto
  const artSelectorDialog = document.querySelector('[role="dialog"]');
  
  if (!artSelectorDialog) {
    console.log("‚ùå ArtSelector n√£o est√° aberto");
    return false;
  }
  
  // Procurar por bot√µes de adicionar
  const addButtons = document.querySelectorAll('button');
  const addCopyButton = Array.from(addButtons).find(btn => 
    btn.textContent.includes('Adicionar') || 
    btn.textContent.includes('Copy') ||
    btn.textContent.includes('C√≥pia') ||
    btn.innerHTML.includes('Copy') ||
    btn.innerHTML.includes('Plus')
  );
  
  if (addCopyButton) {
    console.log("‚úÖ Bot√£o de adicionar c√≥pia encontrado:", addCopyButton.textContent || addCopyButton.innerHTML);
  } else {
    console.log("‚ö†Ô∏è Bot√£o de adicionar c√≥pia n√£o encontrado claramente");
  }
  
  // Procurar por bot√£o de arte diferente
  const addDifferentArtButton = Array.from(addButtons).find(btn => 
    btn.textContent.includes('Arte Diferente') || 
    btn.textContent.includes('Different') ||
    btn.innerHTML.includes('Plus')
  );
  
  if (addDifferentArtButton) {
    console.log("‚úÖ Bot√£o de adicionar arte diferente encontrado");
  } else {
    console.log("‚ö†Ô∏è Bot√£o de adicionar arte diferente n√£o encontrado");
  }
  
  console.log("üìù Para testar adi√ß√£o de c√≥pias:");
  console.log("1. Clique em 'Adicionar Mais C√≥pias' para aumentar quantidade da carta atual");
  console.log("2. Clique em 'Adicionar com Arte Diferente' para criar nova entrada com arte selecionada");
  console.log("3. Verifique se as mudan√ßas aparecem no deck");
  
  return true;
}

// Fun√ß√£o para verificar props passadas
async function checkArtSelectorProps() {
  console.log("\n‚öõÔ∏è 3. Verificando props do ArtSelector...");
  
  // Verificar se as fun√ß√µes foram passadas corretamente
  console.log("üìù Props esperadas:");
  console.log("- onSelectArt: Para alterar arte da carta existente");
  console.log("- onAddCard: Para adicionar nova carta com arte diferente");
  console.log("- onUpdateCard: Para aumentar quantidade da carta atual");
  
  // Tentar acessar props via React DevTools (se dispon√≠vel)
  if (window.React && window.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {
    console.log("‚úÖ React DevTools podem estar dispon√≠veis");
    console.log("üìù Use React DevTools para verificar props do ArtSelector");
  } else {
    console.log("‚ö†Ô∏è React DevTools n√£o detectado");
  }
  
  return true;
}

// Fun√ß√£o para simular cliques
async function simulateArtSelectorActions() {
  console.log("\nüñ±Ô∏è 4. Simulando a√ß√µes no ArtSelector...");
  
  try {
    // Procurar primeira vers√£o de arte dispon√≠vel
    const firstArtVersion = document.querySelector('[data-version], .art-version img, img[src*="scryfall"]');
    
    if (firstArtVersion) {
      console.log("üñºÔ∏è Simulando sele√ß√£o da primeira arte...");
      firstArtVersion.click();
      
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Procurar e clicar no bot√£o confirmar
      const confirmButton = Array.from(document.querySelectorAll('button')).find(btn => 
        btn.textContent.includes('Alterar') || btn.textContent.includes('Confirmar')
      );
      
      if (confirmButton) {
        console.log("‚úÖ Simulando clique no bot√£o confirmar...");
        confirmButton.click();
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Verificar se modal fechou
        const isModalOpen = document.querySelector('[role="dialog"]');
        if (!isModalOpen) {
          console.log("‚úÖ Modal fechou ap√≥s a√ß√£o - provavelmente funcionou!");
          return true;
        } else {
          console.log("‚ö†Ô∏è Modal ainda aberto - pode ter havido erro");
          return false;
        }
      } else {
        console.log("‚ùå N√£o foi poss√≠vel encontrar bot√£o para simular");
        return false;
      }
    } else {
      console.log("‚ùå N√£o foi poss√≠vel encontrar vers√£o de arte para simular");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro ao simular a√ß√µes:", error);
    return false;
  }
}

// Fun√ß√£o para verificar erros no console
async function checkForErrors() {
  console.log("\nüîç 5. Verificando erros no console...");
  
  // Capturar erros do console
  const originalError = console.error;
  const errors = [];
  
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  // Aguardar um pouco para capturar erros
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Restaurar console.error original
  console.error = originalError;
  
  if (errors.length > 0) {
    console.log("‚ùå Erros detectados:");
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  } else {
    console.log("‚úÖ Nenhum erro detectado nos √∫ltimos 2 segundos");
  }
  
  return errors;
}

// Fun√ß√£o principal
async function testArtSelectorFunctions() {
  console.log("üöÄ Iniciando testes das fun√ß√µes de arte do ArtSelector...\n");
  
  const changeArtResult = await testChangeArt();
  const addCopiesResult = await testAddCopies();
  const propsResult = await checkArtSelectorProps();
  
  let simulationResult = false;
  if (changeArtResult) {
    simulationResult = await simulateArtSelectorActions();
  }
  
  const errors = await checkForErrors();
  
  console.log("\nüìã RESUMO DOS TESTES:");
  console.log("- Mudan√ßa de arte:", changeArtResult ? "‚úÖ UI Detectada" : "‚ùå Problema");
  console.log("- Adi√ß√£o de c√≥pias:", addCopiesResult ? "‚úÖ UI Detectada" : "‚ùå Problema");
  console.log("- Simula√ß√£o funcionou:", simulationResult ? "‚úÖ" : "‚ùå");
  console.log("- Erros detectados:", errors.length);
  
  console.log("\nüîß PR√ìXIMOS PASSOS:");
  if (!changeArtResult || !addCopiesResult) {
    console.log("1. Verificar se ArtSelector est√° carregando vers√µes corretamente");
    console.log("2. Verificar se bot√µes est√£o sendo renderizados");
    console.log("3. Verificar props passadas do Deckbuilder");
  } else if (errors.length > 0) {
    console.log("1. Corrigir erros detectados no console");
    console.log("2. Verificar se fun√ß√µes onAddCard/onUpdateCard est√£o funcionando");
  } else {
    console.log("1. Tudo parece estar funcionando!");
    console.log("2. Teste manualmente para confirmar");
  }
}

// Disponibilizar fun√ß√µes globalmente
if (typeof window !== 'undefined') {
  window.testArtFunctions = {
    testArtSelectorFunctions,
    testChangeArt,
    testAddCopies,
    checkArtSelectorProps,
    simulateArtSelectorActions,
    checkForErrors
  };
  
  console.log("üß™ Fun√ß√µes de teste de arte carregadas!");
  console.log("Execute: testArtFunctions.testArtSelectorFunctions()");
}

export { 
  testArtSelectorFunctions,
  testChangeArt,
  testAddCopies,
  checkArtSelectorProps,
  simulateArtSelectorActions,
  checkForErrors
};