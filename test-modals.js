// üß™ Teste dos modais de sele√ß√£o de arte e dele√ß√£o de cartas
// Execute este script no navegador ap√≥s entrar em um deck com cartas

console.log("üîç TESTE: Modais do Deckbuilder - Art Selector e Delete Dialog");

// Fun√ß√£o para testar o modal de sele√ß√£o de arte
async function testArtSelector() {
  console.log("\nüé® 1. Testando Art Selector...");
  
  // Verificar se h√° cartas no deck
  const cardElements = document.querySelectorAll('[data-testid*="card"], .card, [class*="card"]');
  console.log("üÉè Cartas encontradas na tela:", cardElements.length);
  
  if (cardElements.length === 0) {
    console.log("‚ùå Nenhuma carta encontrada. Adicione cartas ao deck primeiro.");
    return false;
  }
  
  // Procurar por gestos/eventos que ativam o art selector
  console.log("üìù Para testar Art Selector:");
  console.log("1. Fa√ßa triple-tap em uma carta");
  console.log("2. Ou segure pressionado uma carta (long press)");
  console.log("3. Verifique se o modal de sele√ß√£o de arte abre");
  
  // Verificar se o componente ArtSelector est√° dispon√≠vel
  const artSelectorElements = document.querySelectorAll('[role="dialog"], .art-selector, [data-testid*="art"]');
  console.log("üé® Elementos de art selector encontrados:", artSelectorElements.length);
  
  return true;
}

// Fun√ß√£o para testar o modal de dele√ß√£o
async function testDeleteDialog() {
  console.log("\nüóëÔ∏è 2. Testando Delete Dialog...");
  
  // Procurar pelo bot√£o de modo sele√ß√£o (trash icon)
  const trashButtons = document.querySelectorAll('button[aria-label*="trash"], button[title*="delete"], svg[class*="trash"]');
  console.log("üóëÔ∏è Bot√µes de lixeira encontrados:", trashButtons.length);
  
  // Procurar por elementos de sele√ß√£o
  const selectionElements = document.querySelectorAll('[data-selected], .selected, [aria-selected]');
  console.log("‚úÖ Elementos selecion√°veis encontrados:", selectionElements.length);
  
  console.log("üìù Para testar Delete Dialog:");
  console.log("1. Clique no √≠cone de lixeira no header");
  console.log("2. Ative o modo de sele√ß√£o");
  console.log("3. Selecione uma ou mais cartas");
  console.log("4. Clique novamente no √≠cone de lixeira para deletar");
  console.log("5. Verifique se o modal de confirma√ß√£o abre");
  
  return trashButtons.length > 0;
}

// Fun√ß√£o para simular abertura do art selector
async function simulateArtSelector() {
  console.log("\nüñ±Ô∏è 3. Simulando abertura do Art Selector...");
  
  // Procurar pela primeira carta
  const firstCard = document.querySelector('[data-testid*="card"], .card, [class*="card"]');
  
  if (!firstCard) {
    console.log("‚ùå Nenhuma carta encontrada para simular");
    return false;
  }
  
  console.log("üÉè Simulando triple-tap na primeira carta...");
  
  // Simular triple-tap
  try {
    const event = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      detail: 3 // triple click
    });
    
    firstCard.dispatchEvent(event);
    
    // Aguardar um pouco e verificar se modal abriu
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const dialogs = document.querySelectorAll('[role="dialog"]');
    if (dialogs.length > 0) {
      console.log("‚úÖ Modal detectado ap√≥s simula√ß√£o!");
      return true;
    } else {
      console.log("‚ö†Ô∏è Nenhum modal detectado. Pode ser necess√°rio intera√ß√£o real do usu√°rio.");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro ao simular triple-tap:", error);
    return false;
  }
}

// Fun√ß√£o para simular modo de sele√ß√£o
async function simulateSelectionMode() {
  console.log("\nüñ±Ô∏è 4. Simulando modo de sele√ß√£o...");
  
  // Procurar pelo bot√£o de trash/lixeira
  const trashButton = document.querySelector('button svg[class*="trash"], button[aria-label*="trash"]');
  
  if (!trashButton) {
    console.log("‚ùå Bot√£o de lixeira n√£o encontrado");
    return false;
  }
  
  console.log("üóëÔ∏è Simulando clique no bot√£o de lixeira...");
  
  try {
    // Clicar no bot√£o pai (button element)
    const button = trashButton.closest('button');
    if (button) {
      button.click();
      
      // Aguardar um pouco e verificar mudan√ßas na UI
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Verificar se o modo de sele√ß√£o foi ativado
      const selectedElements = document.querySelectorAll('[data-selected="true"], .selected');
      const selectionUI = document.querySelectorAll('.selection-mode, [class*="selection"]');
      
      if (selectedElements.length > 0 || selectionUI.length > 0) {
        console.log("‚úÖ Modo de sele√ß√£o ativado!");
        return true;
      } else {
        console.log("‚ö†Ô∏è Modo de sele√ß√£o pode ter sido ativado, mas n√£o foi detectado visualmente.");
        return false;
      }
    } else {
      console.log("‚ùå Elemento button n√£o encontrado");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro ao simular clique:", error);
    return false;
  }
}

// Fun√ß√£o para verificar estado dos modais
async function checkModalState() {
  console.log("\nüîç 5. Verificando estado dos modais...");
  
  // Verificar se h√° di√°logos abertos
  const openDialogs = document.querySelectorAll('[role="dialog"][aria-hidden="false"], [role="dialog"]:not([aria-hidden="true"])');
  
  console.log("üì± Di√°logos abertos:", openDialogs.length);
  
  openDialogs.forEach((dialog, index) => {
    console.log(`Modal ${index + 1}:`, {
      classes: dialog.className,
      ariaLabel: dialog.getAttribute('aria-label'),
      id: dialog.id,
      visible: !dialog.hasAttribute('aria-hidden') || dialog.getAttribute('aria-hidden') === 'false'
    });
  });
  
  // Verificar overlay/backdrop
  const overlays = document.querySelectorAll('.overlay, .backdrop, [class*="overlay"], [class*="backdrop"]');
  console.log("üé≠ Overlays encontrados:", overlays.length);
  
  return {
    openDialogs: openDialogs.length,
    overlays: overlays.length
  };
}

// Fun√ß√£o principal
async function testAllModals() {
  console.log("üöÄ Iniciando testes dos modais do Deckbuilder...\n");
  
  const artResult = await testArtSelector();
  const deleteResult = await testDeleteDialog();
  
  if (artResult) {
    await simulateArtSelector();
  }
  
  if (deleteResult) {
    await simulateSelectionMode();
  }
  
  const modalState = await checkModalState();
  
  console.log("\nüìã RESUMO DOS TESTES:");
  console.log("- Art Selector:", artResult ? "‚úÖ Preparado" : "‚ùå Problema");
  console.log("- Delete Dialog:", deleteResult ? "‚úÖ Preparado" : "‚ùå Problema");
  console.log("- Modais abertos:", modalState.openDialogs);
  
  console.log("\nüîß COMO TESTAR MANUALMENTE:");
  console.log("1. **Art Selector**: Triple-tap ou long press em uma carta");
  console.log("2. **Delete Dialog**: Ativar modo sele√ß√£o ‚Üí selecionar cartas ‚Üí confirmar dele√ß√£o");
  console.log("3. **Verificar**: Modais devem abrir com anima√ß√µes suaves");
  
  console.log("\n‚ö†Ô∏è POSS√çVEIS PROBLEMAS:");
  console.log("- Gestos podem precisar de toque real (n√£o simula√ß√£o)");
  console.log("- Modais podem estar presentes mas invis√≠veis");
  console.log("- Componentes podem ter depend√™ncias n√£o carregadas");
}

// Disponibilizar fun√ß√µes globalmente
if (typeof window !== 'undefined') {
  window.testModalFunctions = {
    testAllModals,
    testArtSelector,
    testDeleteDialog,
    simulateArtSelector,
    simulateSelectionMode,
    checkModalState
  };
  
  console.log("üß™ Fun√ß√µes de teste de modais carregadas!");
  console.log("Execute: testModalFunctions.testAllModals()");
}

export { 
  testAllModals,
  testArtSelector,
  testDeleteDialog,
  simulateArtSelector,
  simulateSelectionMode,
  checkModalState
};