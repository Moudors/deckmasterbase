// src/supabase.ts
import { createClient } from '@supabase/supabase-js';
import { v4 as uuidv4 } from 'uuid';

console.log('🔄 Carregando configuração do Supabase...');
console.log('Variables encontradas:', {
  REACT_APP_SUPABASE_URL: process.env.REACT_APP_SUPABASE_URL ? 'DEFINIDA' : 'UNDEFINED',
  REACT_APP_SUPABASE_ANON_KEY: process.env.REACT_APP_SUPABASE_ANON_KEY ? 'DEFINIDA' : 'UNDEFINED'
});

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

// Verificar se as variáveis de ambiente estão definidas
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('❌ ERRO: Variáveis de ambiente do Supabase não configuradas');
  console.error('REACT_APP_SUPABASE_URL:', supabaseUrl);
  console.error('REACT_APP_SUPABASE_ANON_KEY:', supabaseAnonKey ? 'Definida' : 'Não definida');
  console.error('📋 Verificar arquivo .env na raiz do projeto');
  
  // Em vez de throw, criar um cliente mock para debug
  const mockClient = {
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: new Error('Supabase não configurado') }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
      signInWithPassword: () => Promise.resolve({ data: null, error: new Error('Supabase não configurado') }),
      signUp: () => Promise.resolve({ data: null, error: new Error('Supabase não configurado') }),
      signOut: () => Promise.resolve({ error: null })
    },
    from: () => ({
      select: () => ({ data: [], error: new Error('Supabase não configurado') }),
      insert: () => ({ data: null, error: new Error('Supabase não configurado') }),
      update: () => ({ data: null, error: new Error('Supabase não configurado') }),
      delete: () => ({ data: null, error: new Error('Supabase não configurado') })
    })
  };
  
  console.warn('⚠️ Usando cliente Supabase MOCK para evitar erros');
  export const supabase = mockClient as any;
} else {
  console.log('✅ Supabase configurado:', supabaseUrl);

  export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});

// Função para criar documento do usuário automaticamente
async function createUserDocumentFromAuth(user: any) {
  if (!user?.id) {
    console.error('❌ createUserDocumentFromAuth: user.id não fornecido:', user);
    return;
  }
  
  console.log('🔄 createUserDocumentFromAuth - Criando/verificando documento do usuário:', {
    id: user.id,
    email: user.email,
    displayName: user.user_metadata?.full_name
  });
  
  try {
    // Verifica se o usuário já existe
    console.log('🔍 Verificando se usuário já existe...');
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();

    console.log('🔍 Resultado da verificação:', { existingUser, checkError });

    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = not found
      console.error('❌ Erro ao verificar usuário:', checkError);
      return;
    }

    if (!existingUser) {
      console.log('👤 Usuário não existe, criando novo documento...');
      
      // Criar novo usuário na tabela users
      const userData = {
        id: user.id,
        uuid: uuidv4(), // UUID único e imutável
        display_name: user.user_metadata?.full_name || "",
        email: user.email,
        username: "",
        bio: "",
        friends: [],
        created_at: new Date().toISOString()
      };

      console.log('📝 Dados do usuário a serem inseridos:', userData);

      const { data: insertedData, error: insertError } = await supabase
        .from('users')
        .insert(userData)
        .select()
        .single();

      if (insertError) {
        console.error('❌ Erro ao criar usuário:', insertError);
        console.error('❌ Código do erro:', insertError.code);
        console.error('❌ Mensagem:', insertError.message);
        console.error('❌ Detalhes:', insertError.details);
      } else {
        console.log('✅ Usuário criado com sucesso:', insertedData);
      }
    } else {
      console.log('✅ Usuário já existe:', existingUser);
    }
  } catch (error) {
    console.error('❌ Erro geral no createUserDocumentFromAuth:', error);
  }
}

// Compatibilidade com auth do Firebase
export const auth = {
  currentUser: null as any,
  _callbacks: [] as ((user: any) => void)[],
  onAuthStateChanged: (callback: (user: any) => void) => {
    console.log('🔧 Configurando onAuthStateChanged...');
    
    // Adicionar callback à lista
    auth._callbacks.push(callback);
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('🔔 Auth state change evento:', event, session ? 'com sessão' : 'sem sessão');
      
      const user = session?.user || null;
      if (user) {
        // Adapta o formato do usuário para ser compatível com Firebase
        auth.currentUser = {
          uid: user.id,
          email: user.email,
          displayName: user.user_metadata?.display_name || user.user_metadata?.full_name || '',
          photoURL: user.user_metadata?.avatar_url || null
        };

        // Automatically create user document when user logs in
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          try {
            console.log('🔄 Usuário logado, garantindo documento no Supabase...');
            await createUserDocumentFromAuth(auth.currentUser);
          } catch (error) {
            console.error('❌ Erro ao criar documento do usuário:', error);
          }
        }
      } else {
        console.log('🚪 Usuário saiu ou sem sessão');
        auth.currentUser = null;
      }
      
      console.log('📢 Calling callback com user:', auth.currentUser ? auth.currentUser.email : 'null');
      // Chamar todos os callbacks
      auth._callbacks.forEach(cb => cb(auth.currentUser));
    });
    
    // ✅ Chamar callback imediatamente com estado atual se disponível
    if (auth.currentUser !== null) {
      console.log('📢 Chamada imediata do callback com estado atual');
      setTimeout(() => callback(auth.currentUser), 10);
    }
    
    // Retorna função de limpeza compatível com Firebase
    return () => {
      // Remover callback da lista
      const index = auth._callbacks.indexOf(callback);
      if (index > -1) {
        auth._callbacks.splice(index, 1);
      }
      subscription?.unsubscribe();
    };
  },
  signOut: async () => {
    console.log('🚪 Fazendo logout...');
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('❌ Erro ao fazer logout:', error);
        throw error;
      }
      
      // Limpar o currentUser imediatamente
      auth.currentUser = null;
      console.log('✅ Logout realizado com sucesso');
      
      return { error: null };
    } catch (err) {
      console.error('❌ Erro no logout:', err);
      throw err;
    }
  }
};

// Inicializa currentUser se já estiver logado
console.log('🔄 Verificando sessão inicial...');
supabase.auth.getSession().then(({ data: { session }, error }) => {
  if (error) {
    console.error('❌ Erro ao verificar sessão inicial:', error);
    auth.currentUser = null;
    // Notificar todos os callbacks sobre o erro/sem usuário
    auth._callbacks.forEach(cb => cb(null));
    return;
  }
  
  if (session?.user) {
    const user = session.user;
    auth.currentUser = {
      uid: user.id,
      email: user.email,
      displayName: user.user_metadata?.display_name || user.user_metadata?.full_name || '',
      photoURL: user.user_metadata?.avatar_url || null
    };
    console.log('✅ Sessão inicial encontrada - usuário já logado:', auth.currentUser.email);
    
    // Criar documento do usuário se necessário
    createUserDocumentFromAuth(auth.currentUser).catch(error => {
      console.error('❌ Erro ao criar documento na sessão inicial:', error);
    });
    
    // Notificar todos os callbacks sobre o usuário logado
    console.log('📢 Notificando callbacks sobre sessão inicial');
    auth._callbacks.forEach(cb => cb(auth.currentUser));
  } else {
    console.log('ℹ️ Nenhuma sessão ativa encontrada - usuário deve fazer login');
    auth.currentUser = null;
    // Notificar todos os callbacks sobre ausência de usuário
    auth._callbacks.forEach(cb => cb(null));
  }
}).catch((error) => {
  console.error('❌ Erro ao verificar sessão inicial:', error);
  auth.currentUser = null;
  // Notificar todos os callbacks sobre o erro
  auth._callbacks.forEach(cb => cb(null));
});

// Provider do Google (compatibilidade)
export const googleProvider = {
  providerId: 'google.com'
};

// Interface compatível com Firestore usando Supabase
export const db = {
  // Será implementado no adaptador
};

export const supabaseApi = {
  getUser: () => auth.currentUser,
  getSupabaseUser: () => supabase.auth.getUser(),
  supabase: supabase
};