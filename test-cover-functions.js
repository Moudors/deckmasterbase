// üß™ Teste das fun√ß√µes de cover do deck
// Execute este script no navegador ap√≥s entrar em um deck

console.log("üîç TESTE: Fun√ß√µes de Cover do Deck");

// Fun√ß√£o para testar atualiza√ß√£o de cover
async function testUpdateDeckCover() {
  console.log("\nüñºÔ∏è 1. Testando atualiza√ß√£o de cover...");
  
  // Pegar deckId da URL
  const urlParams = window.location.pathname.match(/\/deckbuilder\/(.+)/);
  const deckId = urlParams ? urlParams[1] : null;
  
  if (!deckId) {
    console.log("‚ùå Deck ID n√£o encontrado na URL");
    return;
  }
  
  console.log("üìÇ Deck ID:", deckId);
  
  // URL de teste para cover
  const testCoverUrl = "https://cards.scryfall.io/large/front/1/2/126b552b-a2dd-4dc4-96a1-d772bb4aa7b1.jpg";
  
  console.log("üß™ Cover de teste:", testCoverUrl);
  
  // Criar objeto de teste para update
  const updateData = {
    cover_image_url: testCoverUrl
  };
  
  console.log("üìù Dados para update:", updateData);
  
  return { deckId, updateData, testCoverUrl };
}

// Fun√ß√£o para testar via Supabase direto
async function testSupabaseDeckUpdate(deckId, updateData) {
  console.log("\nüîó 2. Testando update via Supabase...");
  
  try {
    // Verificar se supabase est√° dispon√≠vel
    if (window.supabase) {
      console.log("‚úÖ Supabase client dispon√≠vel");
      
      const { data, error } = await window.supabase
        .from('decks')
        .update(updateData)
        .eq('id', deckId);
        
      if (error) {
        console.error("‚ùå Erro no Supabase:", error);
        return false;
      } else {
        console.log("‚úÖ Update realizado via Supabase:", data);
        return true;
      }
    } else {
      console.log("‚ùå Supabase client n√£o dispon√≠vel na window");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro ao testar Supabase:", error);
    return false;
  }
}

// Fun√ß√£o para testar via supabaseOperations
async function testSupabaseOperations(deckId, updateData) {
  console.log("\n‚öôÔ∏è 3. Testando via supabaseOperations...");
  
  try {
    if (window.supabaseOperations && window.supabaseOperations.deckOperations) {
      console.log("‚úÖ deckOperations dispon√≠vel");
      
      const result = await window.supabaseOperations.deckOperations.updateDeck(deckId, updateData);
      console.log("‚úÖ Update realizado via deckOperations:", result);
      return true;
    } else {
      console.log("‚ùå deckOperations n√£o dispon√≠vel na window");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro ao testar deckOperations:", error);
    return false;
  }
}

// Fun√ß√£o para verificar cover via hooks React
async function testReactHookUpdate() {
  console.log("\n‚öõÔ∏è 4. Verificando hooks React...");
  
  // Verificar se existe algum hook de update dispon√≠vel
  if (window.React && window.ReactQuery) {
    console.log("‚úÖ React e ReactQuery dispon√≠veis");
    
    // Instru√ß√µes para debug manual
    console.log("üìù Para debug manual via React:");
    console.log("1. Abra React DevTools");
    console.log("2. Encontre o componente Deckbuilder");
    console.log("3. Verifique se updateDeck est√° dispon√≠vel nas props");
    console.log("4. Execute updateDeck({ id: deckId, data: { cover_image_url: 'URL' } })");
  } else {
    console.log("‚ùå React/ReactQuery n√£o dispon√≠veis para debug");
  }
}

// Fun√ß√£o para simular mudan√ßa de cover via interface
async function simulateUIUpdate() {
  console.log("\nüñ±Ô∏è 5. Simulando intera√ß√£o na UI...");
  
  // Procurar por elementos relacionados a cover
  const coverElements = document.querySelectorAll('[data-testid*="cover"], [class*="cover"], img[src*="cover"]');
  
  console.log("üîç Elementos de cover encontrados:", coverElements.length);
  
  coverElements.forEach((element, index) => {
    console.log(`Cover ${index + 1}:`, element.tagName, element.className, element.src || element.dataset.testid);
  });
  
  // Procurar por bot√µes de edi√ß√£o
  const editButtons = document.querySelectorAll('button[aria-label*="edit"], button[title*="edit"], [class*="edit"]');
  
  console.log("üîç Bot√µes de edi√ß√£o encontrados:", editButtons.length);
  
  return { coverElements, editButtons };
}

// Fun√ß√£o principal
async function testAllCoverFunctions() {
  console.log("üöÄ Iniciando testes de cover do deck...\n");
  
  const { deckId, updateData, testCoverUrl } = await testUpdateDeckCover();
  
  if (!deckId) return;
  
  // Testar diferentes abordagens
  const supabaseResult = await testSupabaseDeckUpdate(deckId, updateData);
  const operationsResult = await testSupabaseOperations(deckId, updateData);
  
  await testReactHookUpdate();
  const uiElements = await simulateUIUpdate();
  
  console.log("\nüìã RESUMO DOS TESTES:");
  console.log("- Supabase direto:", supabaseResult ? "‚úÖ" : "‚ùå");
  console.log("- deckOperations:", operationsResult ? "‚úÖ" : "‚ùå");
  console.log("- Elementos UI:", uiElements.coverElements.length > 0 ? "‚úÖ" : "‚ùå");
  
  console.log("\nüîß PR√ìXIMOS PASSOS:");
  if (!supabaseResult && !operationsResult) {
    console.log("1. Verificar se o usu√°rio tem permiss√£o para atualizar o deck");
    console.log("2. Verificar se as RLS policies est√£o configuradas corretamente");
    console.log("3. Verificar logs do Supabase no dashboard");
  } else {
    console.log("1. Verificar se a UI est√° reagindo √†s mudan√ßas no banco");
    console.log("2. Testar invalida√ß√£o do cache do React Query");
    console.log("3. Verificar se h√° algum componente de UI para alterar cover");
  }
}

// Disponibilizar fun√ß√µes globalmente
if (typeof window !== 'undefined') {
  window.testCoverFunctions = {
    testAllCoverFunctions,
    testUpdateDeckCover,
    testSupabaseDeckUpdate,
    testSupabaseOperations,
    testReactHookUpdate,
    simulateUIUpdate
  };
  
  console.log("üß™ Fun√ß√µes de teste de cover carregadas!");
  console.log("Execute: testCoverFunctions.testAllCoverFunctions()");
}

export { 
  testAllCoverFunctions, 
  testUpdateDeckCover, 
  testSupabaseDeckUpdate, 
  testSupabaseOperations,
  testReactHookUpdate,
  simulateUIUpdate 
};