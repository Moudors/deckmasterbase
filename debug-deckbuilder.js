// Debug espec√≠fico para o Deckbuilder
// Execute DEPOIS de navegar para /deckbuilder/ID-DO-DECK

console.log('=== DEBUG DECKBUILDER ===');

window.debugDeckbuilder = async () => {
    try {
        // 1. Verificar URL
        const url = window.location.pathname;
        const match = url.match(/\/deckbuilder\/(.+)/);
        
        if (!match) {
            console.log('‚ùå N√£o est√° na p√°gina do deckbuilder');
            return;
        }
        
        const deckId = match[1];
        console.log('üéØ Deck ID da URL:', deckId);
        
        // 2. Verificar autentica√ß√£o
        const { data: { session } } = await window.supabase.auth.getSession();
        
        if (!session?.user) {
            console.log('‚ùå Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', session.user.email);
        
        // 3. Testar busca direta do deck
        console.log('üîç Buscando deck espec√≠fico...');
        const { data: deck, error: deckError } = await window.supabase
            .from('decks')
            .select('*')
            .eq('id', deckId)
            .single();
            
        if (deckError) {
            console.error('‚ùå Erro ao buscar deck espec√≠fico:', deckError);
            return;
        }
        
        console.log('‚úÖ Deck encontrado:', deck);
        console.log('   Nome:', deck.name);
        console.log('   Owner ID:', deck.owner_id);
        console.log('   User ID:', session.user.id);
        console.log('   Match:', deck.owner_id === session.user.id ? '‚úÖ' : '‚ùå');
        
        // 4. Testar busca de todos os decks (como faz o hook)
        console.log('\nüîç Testando busca como o hook useDecks...');
        const { data: allDecks, error: allDecksError } = await window.supabase
            .from('decks')
            .select('*')
            .eq('owner_id', session.user.id)
            .order('created_at', { ascending: false });
            
        if (allDecksError) {
            console.error('‚ùå Erro ao buscar todos os decks:', allDecksError);
            return;
        }
        
        console.log('üì¶ Todos os decks:', allDecks.length);
        const currentDeck = allDecks.find(d => d.id === deckId);
        
        if (currentDeck) {
            console.log('‚úÖ Deck atual encontrado na lista!');
        } else {
            console.log('‚ùå Deck atual N√ÉO encontrado na lista!');
        }
        
        // 5. Verificar React Query Cache
        if (window.queryClient) {
            console.log('\nüîç Verificando cache do React Query...');
            const cachedDecks = window.queryClient.getQueryData(['decks']);
            console.log('Cache de decks:', cachedDecks);
            
            if (cachedDecks && Array.isArray(cachedDecks)) {
                const cachedDeck = cachedDecks.find(d => d.id === deckId);
                console.log('Deck no cache:', cachedDeck ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
            }
        }
        
        // 6. Simular o que o Deckbuilder faz
        console.log('\nüé≠ Simulando l√≥gica do Deckbuilder...');
        
        // Simular currentDeck = useMemo(() => decks?.find(deck => deck.id === deckId) || null)
        const simulatedCurrentDeck = allDecks?.find(deck => deck.id === deckId) || null;
        
        if (simulatedCurrentDeck) {
            console.log('‚úÖ Simula√ß√£o bem-sucedida! Deck seria encontrado:', simulatedCurrentDeck.name);
        } else {
            console.log('‚ùå Simula√ß√£o falhou! Deck n√£o seria encontrado');
            console.log('Motivos poss√≠veis:');
            console.log('- allDecks est√° vazio');
            console.log('- deckId n√£o confere');
            console.log('- Problema no find()');
        }
        
    } catch (error) {
        console.error('‚ùå Erro inesperado:', error);
    }
};

// Executar automaticamente se estivermos no deckbuilder
if (window.location.pathname.includes('/deckbuilder/')) {
    setTimeout(debugDeckbuilder, 1000);
}

console.log('=== COMANDOS ===');
console.log('debugDeckbuilder() - Debug espec√≠fico do deckbuilder');