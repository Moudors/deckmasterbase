{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/lib/firestoreAdapter.ts\nimport{supabase}from'../supabase';// Mock database object para compatibilidade\nexport const db={};// Tipos para compatibilidade com Firestore\n// Adaptador que simula funções do Firestore\nexport function collection(db,collectionName){return{path:collectionName};}export function doc(db,collectionName,docId){return{id:docId,path:\"\".concat(collectionName,\"/\").concat(docId)};}export async function getDocs(collectionRef){try{let tableName=collectionRef.path||collectionRef.tableName;// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};tableName=tableMap[tableName]||tableName;let queryBuilder=supabase.from(tableName).select('*');// Aplicar filtros where se existirem\nif(collectionRef.whereFilters){collectionRef.whereFilters.forEach(filter=>{const[field,operator,value]=filter;switch(operator){case'==':queryBuilder=queryBuilder.eq(field,value);break;case'!=':queryBuilder=queryBuilder.neq(field,value);break;case'>':queryBuilder=queryBuilder.gt(field,value);break;case'>=':queryBuilder=queryBuilder.gte(field,value);break;case'<':queryBuilder=queryBuilder.lt(field,value);break;case'<=':queryBuilder=queryBuilder.lte(field,value);break;case'in':queryBuilder=queryBuilder.in(field,value);break;case'array-contains':queryBuilder=queryBuilder.contains(field,[value]);break;}});}// Aplicar ordenação se existir\nif(collectionRef.orderByField){queryBuilder=queryBuilder.order(collectionRef.orderByField,{ascending:collectionRef.orderByDirection!=='desc'});}// Aplicar limite se existir\nif(collectionRef.limitValue){queryBuilder=queryBuilder.limit(collectionRef.limitValue);}const{data,error}=await queryBuilder;if(error)throw error;const docs=(data||[]).map(item=>({id:item.id,exists:()=>true,data:()=>{// Converter created_at e updated_at para Timestamp compatível com Firebase\nconst result=_objectSpread({},item);if(result.created_at){result.createdAt={toDate:()=>new Date(result.created_at)};}if(result.updated_at){result.updatedAt={toDate:()=>new Date(result.updated_at)};}return result;}}));return{docs,empty:docs.length===0,size:docs.length};}catch(error){console.error('Erro em getDocs:',error);throw error;}}export async function getDoc(docRef){try{const[collectionName,docId]=docRef.path.split('/');// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};const tableName=tableMap[collectionName]||collectionName;const{data,error}=await supabase.from(tableName).select('*').eq('id',docId).single();if(error&&error.code!=='PGRST116'){// PGRST116 = not found\nthrow error;}return{id:docId,exists:()=>!!data,data:()=>{if(!data)return undefined;// Converter timestamps\nconst result=_objectSpread({},data);if(result.created_at){result.createdAt={toDate:()=>new Date(result.created_at)};}if(result.updated_at){result.updatedAt={toDate:()=>new Date(result.updated_at)};}return result;}};}catch(error){console.error('Erro em getDoc:',error);throw error;}}export async function addDoc(collectionRef,data){try{const collectionName=collectionRef.path;// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};const tableName=tableMap[collectionName]||collectionName;// Converter dados para formato do Supabase\nconst supabaseData=_objectSpread({},data);// Converter timestamps\nif(supabaseData.createdAt){supabaseData.created_at=new Date().toISOString();delete supabaseData.createdAt;}if(supabaseData.updatedAt){supabaseData.updated_at=new Date().toISOString();delete supabaseData.updatedAt;}// Para decks, ajustar campo ownerId para owner_id\nif(tableName==='decks'&&supabaseData.ownerId){supabaseData.owner_id=supabaseData.ownerId;delete supabaseData.ownerId;}const{data:result,error}=await supabase.from(tableName).insert(supabaseData).select().single();if(error)throw error;return{id:result.id,path:\"\".concat(collectionName,\"/\").concat(result.id)};}catch(error){console.error('Erro em addDoc:',error);throw error;}}export async function updateDoc(docRef,data){try{const[collectionName,docId]=docRef.path.split('/');// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};const tableName=tableMap[collectionName]||collectionName;// Converter dados para formato do Supabase\nconst supabaseData=_objectSpread({},data);// Tratar arrayUnion e arrayRemove\nfor(const[key,value]of Object.entries(supabaseData)){if(value&&typeof value==='object'&&value.type==='arrayUnion'){// Para arrayUnion, precisamos buscar o valor atual e concatenar\nconst{data:currentDoc}=await supabase.from(tableName).select(key).eq('id',docId).single();const currentArray=(currentDoc===null||currentDoc===void 0?void 0:currentDoc[key])||[];const newElements=value.elements;const uniqueElements=Array.from(new Set([...currentArray,...newElements]));supabaseData[key]=uniqueElements;}else if(value&&typeof value==='object'&&value.type==='arrayRemove'){// Para arrayRemove, precisamos buscar o valor atual e remover elementos\nconst{data:currentDoc}=await supabase.from(tableName).select(key).eq('id',docId).single();const currentArray=(currentDoc===null||currentDoc===void 0?void 0:currentDoc[key])||[];const elementsToRemove=value.elements;const filteredArray=currentArray.filter(item=>!elementsToRemove.includes(item));supabaseData[key]=filteredArray;}}// Converter timestamps\nif(supabaseData.updatedAt){supabaseData.updated_at=new Date().toISOString();delete supabaseData.updatedAt;}// Para decks, ajustar campo ownerId para owner_id\nif(tableName==='decks'&&supabaseData.ownerId){supabaseData.owner_id=supabaseData.ownerId;delete supabaseData.ownerId;}const{error}=await supabase.from(tableName).update(supabaseData).eq('id',docId);if(error)throw error;}catch(error){console.error('Erro em updateDoc:',error);throw error;}}export async function deleteDoc(docRef){try{const[collectionName,docId]=docRef.path.split('/');// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};const tableName=tableMap[collectionName]||collectionName;const{error}=await supabase.from(tableName).delete().eq('id',docId);if(error)throw error;}catch(error){console.error('Erro em deleteDoc:',error);throw error;}}export async function setDoc(docRef,data){try{const[collectionName,docId]=docRef.path.split('/');// Mapear nomes das coleções para tabelas do Supabase\nconst tableMap={'users':'users','decks':'decks','cards':'deck_cards','messages':'messages','friendships':'friendships','usernames':'usernames'};const tableName=tableMap[collectionName]||collectionName;// Converter dados para formato do Supabase\nconst supabaseData=_objectSpread(_objectSpread({},data),{},{id:docId});// Converter timestamps\nif(supabaseData.createdAt){supabaseData.created_at=new Date().toISOString();delete supabaseData.createdAt;}if(supabaseData.updatedAt){supabaseData.updated_at=new Date().toISOString();delete supabaseData.updatedAt;}// Para decks, ajustar campo ownerId para owner_id\nif(tableName==='decks'&&supabaseData.ownerId){supabaseData.owner_id=supabaseData.ownerId;delete supabaseData.ownerId;}const{error}=await supabase.from(tableName).upsert(supabaseData);if(error)throw error;}catch(error){console.error('Erro em setDoc:',error);throw error;}}// Funções de query\nexport function query(collectionRef){const queryObj=_objectSpread(_objectSpread({},collectionRef),{},{whereFilters:[],orderByField:null,orderByDirection:'asc',limitValue:null,tableName:collectionRef.path});// Aplicar filtros\nfor(var _len=arguments.length,filters=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){filters[_key-1]=arguments[_key];}filters.forEach(filter=>{if(filter.type==='where'){queryObj.whereFilters.push([filter.field,filter.operator,filter.value]);}else if(filter.type==='orderBy'){queryObj.orderByField=filter.field;queryObj.orderByDirection=filter.direction;}else if(filter.type==='limit'){queryObj.limitValue=filter.value;}});return queryObj;}export function where(field,operator,value){return{type:'where',field,operator,value};}export function orderBy(field){let direction=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'asc';return{type:'orderBy',field,direction};}export function limit(value){return{type:'limit',value};}// Timestamp compatível com Firebase\nexport function serverTimestamp(){return new Date().toISOString();}// Array operations para compatibilidade com Firebase\nexport function arrayUnion(){for(var _len2=arguments.length,elements=new Array(_len2),_key2=0;_key2<_len2;_key2++){elements[_key2]=arguments[_key2];}return{type:'arrayUnion',elements};}export function arrayRemove(){for(var _len3=arguments.length,elements=new Array(_len3),_key3=0;_key3<_len3;_key3++){elements[_key3]=arguments[_key3];}return{type:'arrayRemove',elements};}// Batch operations (simplificado)\nexport function writeBatch(db){const operations=[];return{set:(docRef,data)=>{operations.push({type:'set',docRef,data});},update:(docRef,data)=>{operations.push({type:'update',docRef,data});},delete:docRef=>{operations.push({type:'delete',docRef});},commit:async()=>{// Executar operações em sequência (Supabase não tem transações como Firestore)\nfor(const op of operations){switch(op.type){case'set':await setDoc(op.docRef,op.data);break;case'update':await updateDoc(op.docRef,op.data);break;case'delete':await deleteDoc(op.docRef);break;}}}};}","map":{"version":3,"names":["supabase","db","collection","collectionName","path","doc","docId","id","concat","getDocs","collectionRef","tableName","tableMap","queryBuilder","from","select","whereFilters","forEach","filter","field","operator","value","eq","neq","gt","gte","lt","lte","in","contains","orderByField","order","ascending","orderByDirection","limitValue","limit","data","error","docs","map","item","exists","result","_objectSpread","created_at","createdAt","toDate","Date","updated_at","updatedAt","empty","length","size","console","getDoc","docRef","split","single","code","undefined","addDoc","supabaseData","toISOString","ownerId","owner_id","insert","updateDoc","key","Object","entries","type","currentDoc","currentArray","newElements","elements","uniqueElements","Array","Set","elementsToRemove","filteredArray","includes","update","deleteDoc","delete","setDoc","upsert","query","queryObj","_len","arguments","filters","_key","push","direction","where","orderBy","serverTimestamp","arrayUnion","_len2","_key2","arrayRemove","_len3","_key3","writeBatch","operations","set","commit","op"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/firestoreAdapter.ts"],"sourcesContent":["// src/lib/firestoreAdapter.ts\r\nimport { supabase } from '../supabase';\r\n\r\n// Mock database object para compatibilidade\r\nexport const db = {};\r\n\r\n// Tipos para compatibilidade com Firestore\r\nexport interface DocumentReference {\r\n  id: string;\r\n  path: string;\r\n}\r\n\r\nexport interface QuerySnapshot {\r\n  docs: DocumentSnapshot[];\r\n  empty: boolean;\r\n  size: number;\r\n}\r\n\r\nexport interface DocumentSnapshot {\r\n  id: string;\r\n  exists(): boolean;\r\n  data(): any;\r\n}\r\n\r\nexport interface CollectionReference {\r\n  path: string;\r\n}\r\n\r\n// Adaptador que simula funções do Firestore\r\nexport function collection(db: any, collectionName: string): CollectionReference {\r\n  return { path: collectionName };\r\n}\r\n\r\nexport function doc(db: any, collectionName: string, docId: string): DocumentReference {\r\n  return { id: docId, path: `${collectionName}/${docId}` };\r\n}\r\n\r\nexport async function getDocs(collectionRef: CollectionReference | any): Promise<QuerySnapshot> {\r\n  try {\r\n    let tableName = collectionRef.path || collectionRef.tableName;\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks', \r\n      'cards': 'deck_cards',\r\n      'messages': 'messages',\r\n      'friendships': 'friendships',\r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    tableName = tableMap[tableName] || tableName;\r\n    \r\n    let queryBuilder: any = supabase.from(tableName).select('*');\r\n    \r\n    // Aplicar filtros where se existirem\r\n    if (collectionRef.whereFilters) {\r\n      collectionRef.whereFilters.forEach((filter: any) => {\r\n        const [field, operator, value] = filter;\r\n        switch (operator) {\r\n          case '==':\r\n            queryBuilder = queryBuilder.eq(field, value);\r\n            break;\r\n          case '!=':\r\n            queryBuilder = queryBuilder.neq(field, value);\r\n            break;\r\n          case '>':\r\n            queryBuilder = queryBuilder.gt(field, value);\r\n            break;\r\n          case '>=':\r\n            queryBuilder = queryBuilder.gte(field, value);\r\n            break;\r\n          case '<':\r\n            queryBuilder = queryBuilder.lt(field, value);\r\n            break;\r\n          case '<=':\r\n            queryBuilder = queryBuilder.lte(field, value);\r\n            break;\r\n          case 'in':\r\n            queryBuilder = queryBuilder.in(field, value);\r\n            break;\r\n          case 'array-contains':\r\n            queryBuilder = queryBuilder.contains(field, [value]);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Aplicar ordenação se existir\r\n    if (collectionRef.orderByField) {\r\n      queryBuilder = queryBuilder.order(collectionRef.orderByField, { \r\n        ascending: collectionRef.orderByDirection !== 'desc' \r\n      });\r\n    }\r\n    \r\n    // Aplicar limite se existir\r\n    if (collectionRef.limitValue) {\r\n      queryBuilder = queryBuilder.limit(collectionRef.limitValue);\r\n    }\r\n    \r\n    const { data, error } = await queryBuilder;\r\n    \r\n    if (error) throw error;\r\n    \r\n    const docs = (data || []).map((item: any) => ({\r\n      id: item.id,\r\n      exists: () => true,\r\n      data: () => {\r\n        // Converter created_at e updated_at para Timestamp compatível com Firebase\r\n        const result = { ...item };\r\n        if (result.created_at) {\r\n          result.createdAt = { toDate: () => new Date(result.created_at) };\r\n        }\r\n        if (result.updated_at) {\r\n          result.updatedAt = { toDate: () => new Date(result.updated_at) };\r\n        }\r\n        return result;\r\n      }\r\n    }));\r\n    \r\n    return {\r\n      docs,\r\n      empty: docs.length === 0,\r\n      size: docs.length\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro em getDocs:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getDoc(docRef: DocumentReference): Promise<DocumentSnapshot> {\r\n  try {\r\n    const [collectionName, docId] = docRef.path.split('/');\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks',\r\n      'cards': 'deck_cards', \r\n      'messages': 'messages',\r\n      'friendships': 'friendships',\r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    const tableName = tableMap[collectionName] || collectionName;\r\n    \r\n    const { data, error } = await supabase\r\n      .from(tableName)\r\n      .select('*')\r\n      .eq('id', docId)\r\n      .single();\r\n    \r\n    if (error && error.code !== 'PGRST116') { // PGRST116 = not found\r\n      throw error;\r\n    }\r\n    \r\n    return {\r\n      id: docId,\r\n      exists: () => !!data,\r\n      data: () => {\r\n        if (!data) return undefined;\r\n        \r\n        // Converter timestamps\r\n        const result = { ...data };\r\n        if (result.created_at) {\r\n          result.createdAt = { toDate: () => new Date(result.created_at) };\r\n        }\r\n        if (result.updated_at) {\r\n          result.updatedAt = { toDate: () => new Date(result.updated_at) };\r\n        }\r\n        return result;\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro em getDoc:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function addDoc(collectionRef: CollectionReference, data: any): Promise<DocumentReference> {\r\n  try {\r\n    const collectionName = collectionRef.path;\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks',\r\n      'cards': 'deck_cards',\r\n      'messages': 'messages', \r\n      'friendships': 'friendships',\r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    const tableName = tableMap[collectionName] || collectionName;\r\n    \r\n    // Converter dados para formato do Supabase\r\n    const supabaseData = { ...data };\r\n    \r\n    // Converter timestamps\r\n    if (supabaseData.createdAt) {\r\n      supabaseData.created_at = new Date().toISOString();\r\n      delete supabaseData.createdAt;\r\n    }\r\n    if (supabaseData.updatedAt) {\r\n      supabaseData.updated_at = new Date().toISOString(); \r\n      delete supabaseData.updatedAt;\r\n    }\r\n    \r\n    // Para decks, ajustar campo ownerId para owner_id\r\n    if (tableName === 'decks' && supabaseData.ownerId) {\r\n      supabaseData.owner_id = supabaseData.ownerId;\r\n      delete supabaseData.ownerId;\r\n    }\r\n    \r\n    const { data: result, error } = await supabase\r\n      .from(tableName)\r\n      .insert(supabaseData)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    return {\r\n      id: result.id,\r\n      path: `${collectionName}/${result.id}`\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro em addDoc:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateDoc(docRef: DocumentReference, data: any): Promise<void> {\r\n  try {\r\n    const [collectionName, docId] = docRef.path.split('/');\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks',\r\n      'cards': 'deck_cards',\r\n      'messages': 'messages',\r\n      'friendships': 'friendships', \r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    const tableName = tableMap[collectionName] || collectionName;\r\n    \r\n    // Converter dados para formato do Supabase\r\n    const supabaseData = { ...data };\r\n    \r\n    // Tratar arrayUnion e arrayRemove\r\n    for (const [key, value] of Object.entries(supabaseData)) {\r\n      if (value && typeof value === 'object' && (value as any).type === 'arrayUnion') {\r\n        // Para arrayUnion, precisamos buscar o valor atual e concatenar\r\n        const { data: currentDoc } = await supabase\r\n          .from(tableName)\r\n          .select(key)\r\n          .eq('id', docId)\r\n          .single();\r\n        \r\n        const currentArray = (currentDoc as any)?.[key] || [];\r\n        const newElements = (value as any).elements;\r\n        const uniqueElements = Array.from(new Set([...currentArray, ...newElements]));\r\n        supabaseData[key] = uniqueElements;\r\n      } else if (value && typeof value === 'object' && (value as any).type === 'arrayRemove') {\r\n        // Para arrayRemove, precisamos buscar o valor atual e remover elementos\r\n        const { data: currentDoc } = await supabase\r\n          .from(tableName)\r\n          .select(key)\r\n          .eq('id', docId)\r\n          .single();\r\n        \r\n        const currentArray = (currentDoc as any)?.[key] || [];\r\n        const elementsToRemove = (value as any).elements;\r\n        const filteredArray = currentArray.filter((item: any) => !elementsToRemove.includes(item));\r\n        supabaseData[key] = filteredArray;\r\n      }\r\n    }\r\n    \r\n    // Converter timestamps\r\n    if (supabaseData.updatedAt) {\r\n      supabaseData.updated_at = new Date().toISOString();\r\n      delete supabaseData.updatedAt;\r\n    }\r\n    \r\n    // Para decks, ajustar campo ownerId para owner_id\r\n    if (tableName === 'decks' && supabaseData.ownerId) {\r\n      supabaseData.owner_id = supabaseData.ownerId;\r\n      delete supabaseData.ownerId;\r\n    }\r\n    \r\n    const { error } = await supabase\r\n      .from(tableName)\r\n      .update(supabaseData)\r\n      .eq('id', docId);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Erro em updateDoc:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteDoc(docRef: DocumentReference): Promise<void> {\r\n  try {\r\n    const [collectionName, docId] = docRef.path.split('/');\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks',\r\n      'cards': 'deck_cards', \r\n      'messages': 'messages',\r\n      'friendships': 'friendships',\r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    const tableName = tableMap[collectionName] || collectionName;\r\n    \r\n    const { error } = await supabase\r\n      .from(tableName)\r\n      .delete()\r\n      .eq('id', docId);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Erro em deleteDoc:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function setDoc(docRef: DocumentReference, data: any): Promise<void> {\r\n  try {\r\n    const [collectionName, docId] = docRef.path.split('/');\r\n    \r\n    // Mapear nomes das coleções para tabelas do Supabase\r\n    const tableMap: { [key: string]: string } = {\r\n      'users': 'users',\r\n      'decks': 'decks',\r\n      'cards': 'deck_cards',\r\n      'messages': 'messages',\r\n      'friendships': 'friendships',\r\n      'usernames': 'usernames'\r\n    };\r\n    \r\n    const tableName = tableMap[collectionName] || collectionName;\r\n    \r\n    // Converter dados para formato do Supabase\r\n    const supabaseData = { ...data, id: docId };\r\n    \r\n    // Converter timestamps\r\n    if (supabaseData.createdAt) {\r\n      supabaseData.created_at = new Date().toISOString();\r\n      delete supabaseData.createdAt;\r\n    }\r\n    if (supabaseData.updatedAt) {\r\n      supabaseData.updated_at = new Date().toISOString();\r\n      delete supabaseData.updatedAt;\r\n    }\r\n    \r\n    // Para decks, ajustar campo ownerId para owner_id\r\n    if (tableName === 'decks' && supabaseData.ownerId) {\r\n      supabaseData.owner_id = supabaseData.ownerId;\r\n      delete supabaseData.ownerId;\r\n    }\r\n    \r\n    const { error } = await supabase\r\n      .from(tableName)\r\n      .upsert(supabaseData);\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Erro em setDoc:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Funções de query\r\nexport function query(collectionRef: CollectionReference, ...filters: any[]) {\r\n  const queryObj: any = {\r\n    ...collectionRef,\r\n    whereFilters: [] as any[],\r\n    orderByField: null,\r\n    orderByDirection: 'asc',\r\n    limitValue: null,\r\n    tableName: collectionRef.path\r\n  };\r\n  \r\n  // Aplicar filtros\r\n  filters.forEach(filter => {\r\n    if (filter.type === 'where') {\r\n      queryObj.whereFilters.push([filter.field, filter.operator, filter.value]);\r\n    } else if (filter.type === 'orderBy') {\r\n      queryObj.orderByField = filter.field;\r\n      queryObj.orderByDirection = filter.direction;\r\n    } else if (filter.type === 'limit') {\r\n      queryObj.limitValue = filter.value;\r\n    }\r\n  });\r\n  \r\n  return queryObj;\r\n}\r\n\r\nexport function where(field: string, operator: string, value: any) {\r\n  return { type: 'where', field, operator, value };\r\n}\r\n\r\nexport function orderBy(field: string, direction: 'asc' | 'desc' = 'asc') {\r\n  return { type: 'orderBy', field, direction };\r\n}\r\n\r\nexport function limit(value: number) {\r\n  return { type: 'limit', value };\r\n}\r\n\r\n// Timestamp compatível com Firebase\r\nexport function serverTimestamp() {\r\n  return new Date().toISOString();\r\n}\r\n\r\n// Array operations para compatibilidade com Firebase\r\nexport function arrayUnion(...elements: any[]) {\r\n  return {\r\n    type: 'arrayUnion',\r\n    elements\r\n  };\r\n}\r\n\r\nexport function arrayRemove(...elements: any[]) {\r\n  return {\r\n    type: 'arrayRemove', \r\n    elements\r\n  };\r\n}\r\n\r\n// Batch operations (simplificado)\r\nexport function writeBatch(db: any) {\r\n  const operations: any[] = [];\r\n  \r\n  return {\r\n    set: (docRef: DocumentReference, data: any) => {\r\n      operations.push({ type: 'set', docRef, data });\r\n    },\r\n    update: (docRef: DocumentReference, data: any) => {\r\n      operations.push({ type: 'update', docRef, data });\r\n    },\r\n    delete: (docRef: DocumentReference) => {\r\n      operations.push({ type: 'delete', docRef });\r\n    },\r\n    commit: async () => {\r\n      // Executar operações em sequência (Supabase não tem transações como Firestore)\r\n      for (const op of operations) {\r\n        switch (op.type) {\r\n          case 'set':\r\n            await setDoc(op.docRef, op.data);\r\n            break;\r\n          case 'update':\r\n            await updateDoc(op.docRef, op.data);\r\n            break;\r\n          case 'delete':\r\n            await deleteDoc(op.docRef);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}"],"mappings":"sIAAA;AACA,OAASA,QAAQ,KAAQ,aAAa,CAEtC;AACA,MAAO,MAAM,CAAAC,EAAE,CAAG,CAAC,CAAC,CAEpB;AAsBA;AACA,MAAO,SAAS,CAAAC,UAAUA,CAACD,EAAO,CAAEE,cAAsB,CAAuB,CAC/E,MAAO,CAAEC,IAAI,CAAED,cAAe,CAAC,CACjC,CAEA,MAAO,SAAS,CAAAE,GAAGA,CAACJ,EAAO,CAAEE,cAAsB,CAAEG,KAAa,CAAqB,CACrF,MAAO,CAAEC,EAAE,CAAED,KAAK,CAAEF,IAAI,IAAAI,MAAA,CAAKL,cAAc,MAAAK,MAAA,CAAIF,KAAK,CAAG,CAAC,CAC1D,CAEA,MAAO,eAAe,CAAAG,OAAOA,CAACC,aAAwC,CAA0B,CAC9F,GAAI,CACF,GAAI,CAAAC,SAAS,CAAGD,aAAa,CAACN,IAAI,EAAIM,aAAa,CAACC,SAAS,CAE7D;AACA,KAAM,CAAAC,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAEDD,SAAS,CAAGC,QAAQ,CAACD,SAAS,CAAC,EAAIA,SAAS,CAE5C,GAAI,CAAAE,YAAiB,CAAGb,QAAQ,CAACc,IAAI,CAACH,SAAS,CAAC,CAACI,MAAM,CAAC,GAAG,CAAC,CAE5D;AACA,GAAIL,aAAa,CAACM,YAAY,CAAE,CAC9BN,aAAa,CAACM,YAAY,CAACC,OAAO,CAAEC,MAAW,EAAK,CAClD,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAEC,KAAK,CAAC,CAAGH,MAAM,CACvC,OAAQE,QAAQ,EACd,IAAK,IAAI,CACPP,YAAY,CAAGA,YAAY,CAACS,EAAE,CAACH,KAAK,CAAEE,KAAK,CAAC,CAC5C,MACF,IAAK,IAAI,CACPR,YAAY,CAAGA,YAAY,CAACU,GAAG,CAACJ,KAAK,CAAEE,KAAK,CAAC,CAC7C,MACF,IAAK,GAAG,CACNR,YAAY,CAAGA,YAAY,CAACW,EAAE,CAACL,KAAK,CAAEE,KAAK,CAAC,CAC5C,MACF,IAAK,IAAI,CACPR,YAAY,CAAGA,YAAY,CAACY,GAAG,CAACN,KAAK,CAAEE,KAAK,CAAC,CAC7C,MACF,IAAK,GAAG,CACNR,YAAY,CAAGA,YAAY,CAACa,EAAE,CAACP,KAAK,CAAEE,KAAK,CAAC,CAC5C,MACF,IAAK,IAAI,CACPR,YAAY,CAAGA,YAAY,CAACc,GAAG,CAACR,KAAK,CAAEE,KAAK,CAAC,CAC7C,MACF,IAAK,IAAI,CACPR,YAAY,CAAGA,YAAY,CAACe,EAAE,CAACT,KAAK,CAAEE,KAAK,CAAC,CAC5C,MACF,IAAK,gBAAgB,CACnBR,YAAY,CAAGA,YAAY,CAACgB,QAAQ,CAACV,KAAK,CAAE,CAACE,KAAK,CAAC,CAAC,CACpD,MACJ,CACF,CAAC,CAAC,CACJ,CAEA;AACA,GAAIX,aAAa,CAACoB,YAAY,CAAE,CAC9BjB,YAAY,CAAGA,YAAY,CAACkB,KAAK,CAACrB,aAAa,CAACoB,YAAY,CAAE,CAC5DE,SAAS,CAAEtB,aAAa,CAACuB,gBAAgB,GAAK,MAChD,CAAC,CAAC,CACJ,CAEA;AACA,GAAIvB,aAAa,CAACwB,UAAU,CAAE,CAC5BrB,YAAY,CAAGA,YAAY,CAACsB,KAAK,CAACzB,aAAa,CAACwB,UAAU,CAAC,CAC7D,CAEA,KAAM,CAAEE,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAxB,YAAY,CAE1C,GAAIwB,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB,KAAM,CAAAC,IAAI,CAAG,CAACF,IAAI,EAAI,EAAE,EAAEG,GAAG,CAAEC,IAAS,GAAM,CAC5CjC,EAAE,CAAEiC,IAAI,CAACjC,EAAE,CACXkC,MAAM,CAAEA,CAAA,GAAM,IAAI,CAClBL,IAAI,CAAEA,CAAA,GAAM,CACV;AACA,KAAM,CAAAM,MAAM,CAAAC,aAAA,IAAQH,IAAI,CAAE,CAC1B,GAAIE,MAAM,CAACE,UAAU,CAAE,CACrBF,MAAM,CAACG,SAAS,CAAG,CAAEC,MAAM,CAAEA,CAAA,GAAM,GAAI,CAAAC,IAAI,CAACL,MAAM,CAACE,UAAU,CAAE,CAAC,CAClE,CACA,GAAIF,MAAM,CAACM,UAAU,CAAE,CACrBN,MAAM,CAACO,SAAS,CAAG,CAAEH,MAAM,CAAEA,CAAA,GAAM,GAAI,CAAAC,IAAI,CAACL,MAAM,CAACM,UAAU,CAAE,CAAC,CAClE,CACA,MAAO,CAAAN,MAAM,CACf,CACF,CAAC,CAAC,CAAC,CAEH,MAAO,CACLJ,IAAI,CACJY,KAAK,CAAEZ,IAAI,CAACa,MAAM,GAAK,CAAC,CACxBC,IAAI,CAAEd,IAAI,CAACa,MACb,CAAC,CACH,CAAE,MAAOd,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,MAAO,eAAe,CAAAiB,MAAMA,CAACC,MAAyB,CAA6B,CACjF,GAAI,CACF,KAAM,CAACpD,cAAc,CAAEG,KAAK,CAAC,CAAGiD,MAAM,CAACnD,IAAI,CAACoD,KAAK,CAAC,GAAG,CAAC,CAEtD;AACA,KAAM,CAAA5C,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAED,KAAM,CAAAD,SAAS,CAAGC,QAAQ,CAACT,cAAc,CAAC,EAAIA,cAAc,CAE5D,KAAM,CAAEiC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAArC,QAAQ,CACnCc,IAAI,CAACH,SAAS,CAAC,CACfI,MAAM,CAAC,GAAG,CAAC,CACXO,EAAE,CAAC,IAAI,CAAEhB,KAAK,CAAC,CACfmD,MAAM,CAAC,CAAC,CAEX,GAAIpB,KAAK,EAAIA,KAAK,CAACqB,IAAI,GAAK,UAAU,CAAE,CAAE;AACxC,KAAM,CAAArB,KAAK,CACb,CAEA,MAAO,CACL9B,EAAE,CAAED,KAAK,CACTmC,MAAM,CAAEA,CAAA,GAAM,CAAC,CAACL,IAAI,CACpBA,IAAI,CAAEA,CAAA,GAAM,CACV,GAAI,CAACA,IAAI,CAAE,MAAO,CAAAuB,SAAS,CAE3B;AACA,KAAM,CAAAjB,MAAM,CAAAC,aAAA,IAAQP,IAAI,CAAE,CAC1B,GAAIM,MAAM,CAACE,UAAU,CAAE,CACrBF,MAAM,CAACG,SAAS,CAAG,CAAEC,MAAM,CAAEA,CAAA,GAAM,GAAI,CAAAC,IAAI,CAACL,MAAM,CAACE,UAAU,CAAE,CAAC,CAClE,CACA,GAAIF,MAAM,CAACM,UAAU,CAAE,CACrBN,MAAM,CAACO,SAAS,CAAG,CAAEH,MAAM,CAAEA,CAAA,GAAM,GAAI,CAAAC,IAAI,CAACL,MAAM,CAACM,UAAU,CAAE,CAAC,CAClE,CACA,MAAO,CAAAN,MAAM,CACf,CACF,CAAC,CACH,CAAE,MAAOL,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,MAAO,eAAe,CAAAuB,MAAMA,CAAClD,aAAkC,CAAE0B,IAAS,CAA8B,CACtG,GAAI,CACF,KAAM,CAAAjC,cAAc,CAAGO,aAAa,CAACN,IAAI,CAEzC;AACA,KAAM,CAAAQ,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAED,KAAM,CAAAD,SAAS,CAAGC,QAAQ,CAACT,cAAc,CAAC,EAAIA,cAAc,CAE5D;AACA,KAAM,CAAA0D,YAAY,CAAAlB,aAAA,IAAQP,IAAI,CAAE,CAEhC;AACA,GAAIyB,YAAY,CAAChB,SAAS,CAAE,CAC1BgB,YAAY,CAACjB,UAAU,CAAG,GAAI,CAAAG,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAClD,MAAO,CAAAD,YAAY,CAAChB,SAAS,CAC/B,CACA,GAAIgB,YAAY,CAACZ,SAAS,CAAE,CAC1BY,YAAY,CAACb,UAAU,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAClD,MAAO,CAAAD,YAAY,CAACZ,SAAS,CAC/B,CAEA;AACA,GAAItC,SAAS,GAAK,OAAO,EAAIkD,YAAY,CAACE,OAAO,CAAE,CACjDF,YAAY,CAACG,QAAQ,CAAGH,YAAY,CAACE,OAAO,CAC5C,MAAO,CAAAF,YAAY,CAACE,OAAO,CAC7B,CAEA,KAAM,CAAE3B,IAAI,CAAEM,MAAM,CAAEL,KAAM,CAAC,CAAG,KAAM,CAAArC,QAAQ,CAC3Cc,IAAI,CAACH,SAAS,CAAC,CACfsD,MAAM,CAACJ,YAAY,CAAC,CACpB9C,MAAM,CAAC,CAAC,CACR0C,MAAM,CAAC,CAAC,CAEX,GAAIpB,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB,MAAO,CACL9B,EAAE,CAAEmC,MAAM,CAACnC,EAAE,CACbH,IAAI,IAAAI,MAAA,CAAKL,cAAc,MAAAK,MAAA,CAAIkC,MAAM,CAACnC,EAAE,CACtC,CAAC,CACH,CAAE,MAAO8B,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,MAAO,eAAe,CAAA6B,SAASA,CAACX,MAAyB,CAAEnB,IAAS,CAAiB,CACnF,GAAI,CACF,KAAM,CAACjC,cAAc,CAAEG,KAAK,CAAC,CAAGiD,MAAM,CAACnD,IAAI,CAACoD,KAAK,CAAC,GAAG,CAAC,CAEtD;AACA,KAAM,CAAA5C,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAED,KAAM,CAAAD,SAAS,CAAGC,QAAQ,CAACT,cAAc,CAAC,EAAIA,cAAc,CAE5D;AACA,KAAM,CAAA0D,YAAY,CAAAlB,aAAA,IAAQP,IAAI,CAAE,CAEhC;AACA,IAAK,KAAM,CAAC+B,GAAG,CAAE9C,KAAK,CAAC,EAAI,CAAA+C,MAAM,CAACC,OAAO,CAACR,YAAY,CAAC,CAAE,CACvD,GAAIxC,KAAK,EAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAKA,KAAK,CAASiD,IAAI,GAAK,YAAY,CAAE,CAC9E;AACA,KAAM,CAAElC,IAAI,CAAEmC,UAAW,CAAC,CAAG,KAAM,CAAAvE,QAAQ,CACxCc,IAAI,CAACH,SAAS,CAAC,CACfI,MAAM,CAACoD,GAAG,CAAC,CACX7C,EAAE,CAAC,IAAI,CAAEhB,KAAK,CAAC,CACfmD,MAAM,CAAC,CAAC,CAEX,KAAM,CAAAe,YAAY,CAAG,CAACD,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAWJ,GAAG,CAAC,GAAI,EAAE,CACrD,KAAM,CAAAM,WAAW,CAAIpD,KAAK,CAASqD,QAAQ,CAC3C,KAAM,CAAAC,cAAc,CAAGC,KAAK,CAAC9D,IAAI,CAAC,GAAI,CAAA+D,GAAG,CAAC,CAAC,GAAGL,YAAY,CAAE,GAAGC,WAAW,CAAC,CAAC,CAAC,CAC7EZ,YAAY,CAACM,GAAG,CAAC,CAAGQ,cAAc,CACpC,CAAC,IAAM,IAAItD,KAAK,EAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAKA,KAAK,CAASiD,IAAI,GAAK,aAAa,CAAE,CACtF;AACA,KAAM,CAAElC,IAAI,CAAEmC,UAAW,CAAC,CAAG,KAAM,CAAAvE,QAAQ,CACxCc,IAAI,CAACH,SAAS,CAAC,CACfI,MAAM,CAACoD,GAAG,CAAC,CACX7C,EAAE,CAAC,IAAI,CAAEhB,KAAK,CAAC,CACfmD,MAAM,CAAC,CAAC,CAEX,KAAM,CAAAe,YAAY,CAAG,CAACD,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAWJ,GAAG,CAAC,GAAI,EAAE,CACrD,KAAM,CAAAW,gBAAgB,CAAIzD,KAAK,CAASqD,QAAQ,CAChD,KAAM,CAAAK,aAAa,CAAGP,YAAY,CAACtD,MAAM,CAAEsB,IAAS,EAAK,CAACsC,gBAAgB,CAACE,QAAQ,CAACxC,IAAI,CAAC,CAAC,CAC1FqB,YAAY,CAACM,GAAG,CAAC,CAAGY,aAAa,CACnC,CACF,CAEA;AACA,GAAIlB,YAAY,CAACZ,SAAS,CAAE,CAC1BY,YAAY,CAACb,UAAU,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAClD,MAAO,CAAAD,YAAY,CAACZ,SAAS,CAC/B,CAEA;AACA,GAAItC,SAAS,GAAK,OAAO,EAAIkD,YAAY,CAACE,OAAO,CAAE,CACjDF,YAAY,CAACG,QAAQ,CAAGH,YAAY,CAACE,OAAO,CAC5C,MAAO,CAAAF,YAAY,CAACE,OAAO,CAC7B,CAEA,KAAM,CAAE1B,KAAM,CAAC,CAAG,KAAM,CAAArC,QAAQ,CAC7Bc,IAAI,CAACH,SAAS,CAAC,CACfsE,MAAM,CAACpB,YAAY,CAAC,CACpBvC,EAAE,CAAC,IAAI,CAAEhB,KAAK,CAAC,CAElB,GAAI+B,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAAE,MAAOA,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,MAAO,eAAe,CAAA6C,SAASA,CAAC3B,MAAyB,CAAiB,CACxE,GAAI,CACF,KAAM,CAACpD,cAAc,CAAEG,KAAK,CAAC,CAAGiD,MAAM,CAACnD,IAAI,CAACoD,KAAK,CAAC,GAAG,CAAC,CAEtD;AACA,KAAM,CAAA5C,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAED,KAAM,CAAAD,SAAS,CAAGC,QAAQ,CAACT,cAAc,CAAC,EAAIA,cAAc,CAE5D,KAAM,CAAEkC,KAAM,CAAC,CAAG,KAAM,CAAArC,QAAQ,CAC7Bc,IAAI,CAACH,SAAS,CAAC,CACfwE,MAAM,CAAC,CAAC,CACR7D,EAAE,CAAC,IAAI,CAAEhB,KAAK,CAAC,CAElB,GAAI+B,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAAE,MAAOA,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,MAAO,eAAe,CAAA+C,MAAMA,CAAC7B,MAAyB,CAAEnB,IAAS,CAAiB,CAChF,GAAI,CACF,KAAM,CAACjC,cAAc,CAAEG,KAAK,CAAC,CAAGiD,MAAM,CAACnD,IAAI,CAACoD,KAAK,CAAC,GAAG,CAAC,CAEtD;AACA,KAAM,CAAA5C,QAAmC,CAAG,CAC1C,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WACf,CAAC,CAED,KAAM,CAAAD,SAAS,CAAGC,QAAQ,CAACT,cAAc,CAAC,EAAIA,cAAc,CAE5D;AACA,KAAM,CAAA0D,YAAY,CAAAlB,aAAA,CAAAA,aAAA,IAAQP,IAAI,MAAE7B,EAAE,CAAED,KAAK,EAAE,CAE3C;AACA,GAAIuD,YAAY,CAAChB,SAAS,CAAE,CAC1BgB,YAAY,CAACjB,UAAU,CAAG,GAAI,CAAAG,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAClD,MAAO,CAAAD,YAAY,CAAChB,SAAS,CAC/B,CACA,GAAIgB,YAAY,CAACZ,SAAS,CAAE,CAC1BY,YAAY,CAACb,UAAU,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAClD,MAAO,CAAAD,YAAY,CAACZ,SAAS,CAC/B,CAEA;AACA,GAAItC,SAAS,GAAK,OAAO,EAAIkD,YAAY,CAACE,OAAO,CAAE,CACjDF,YAAY,CAACG,QAAQ,CAAGH,YAAY,CAACE,OAAO,CAC5C,MAAO,CAAAF,YAAY,CAACE,OAAO,CAC7B,CAEA,KAAM,CAAE1B,KAAM,CAAC,CAAG,KAAM,CAAArC,QAAQ,CAC7Bc,IAAI,CAACH,SAAS,CAAC,CACf0E,MAAM,CAACxB,YAAY,CAAC,CAEvB,GAAIxB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAAE,MAAOA,KAAK,CAAE,CACdgB,OAAO,CAAChB,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,MAAO,SAAS,CAAAiD,KAAKA,CAAC5E,aAAkC,CAAqB,CAC3E,KAAM,CAAA6E,QAAa,CAAA5C,aAAA,CAAAA,aAAA,IACdjC,aAAa,MAChBM,YAAY,CAAE,EAAW,CACzBc,YAAY,CAAE,IAAI,CAClBG,gBAAgB,CAAE,KAAK,CACvBC,UAAU,CAAE,IAAI,CAChBvB,SAAS,CAAED,aAAa,CAACN,IAAI,EAC9B,CAED;AAAA,QAAAoF,IAAA,CAAAC,SAAA,CAAAtC,MAAA,CAV2DuC,OAAO,KAAAd,KAAA,CAAAY,IAAA,GAAAA,IAAA,MAAAG,IAAA,GAAAA,IAAA,CAAAH,IAAA,CAAAG,IAAA,IAAPD,OAAO,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA,GAWlED,OAAO,CAACzE,OAAO,CAACC,MAAM,EAAI,CACxB,GAAIA,MAAM,CAACoD,IAAI,GAAK,OAAO,CAAE,CAC3BiB,QAAQ,CAACvE,YAAY,CAAC4E,IAAI,CAAC,CAAC1E,MAAM,CAACC,KAAK,CAAED,MAAM,CAACE,QAAQ,CAAEF,MAAM,CAACG,KAAK,CAAC,CAAC,CAC3E,CAAC,IAAM,IAAIH,MAAM,CAACoD,IAAI,GAAK,SAAS,CAAE,CACpCiB,QAAQ,CAACzD,YAAY,CAAGZ,MAAM,CAACC,KAAK,CACpCoE,QAAQ,CAACtD,gBAAgB,CAAGf,MAAM,CAAC2E,SAAS,CAC9C,CAAC,IAAM,IAAI3E,MAAM,CAACoD,IAAI,GAAK,OAAO,CAAE,CAClCiB,QAAQ,CAACrD,UAAU,CAAGhB,MAAM,CAACG,KAAK,CACpC,CACF,CAAC,CAAC,CAEF,MAAO,CAAAkE,QAAQ,CACjB,CAEA,MAAO,SAAS,CAAAO,KAAKA,CAAC3E,KAAa,CAAEC,QAAgB,CAAEC,KAAU,CAAE,CACjE,MAAO,CAAEiD,IAAI,CAAE,OAAO,CAAEnD,KAAK,CAAEC,QAAQ,CAAEC,KAAM,CAAC,CAClD,CAEA,MAAO,SAAS,CAAA0E,OAAOA,CAAC5E,KAAa,CAAqC,IAAnC,CAAA0E,SAAyB,CAAAJ,SAAA,CAAAtC,MAAA,IAAAsC,SAAA,MAAA9B,SAAA,CAAA8B,SAAA,IAAG,KAAK,CACtE,MAAO,CAAEnB,IAAI,CAAE,SAAS,CAAEnD,KAAK,CAAE0E,SAAU,CAAC,CAC9C,CAEA,MAAO,SAAS,CAAA1D,KAAKA,CAACd,KAAa,CAAE,CACnC,MAAO,CAAEiD,IAAI,CAAE,OAAO,CAAEjD,KAAM,CAAC,CACjC,CAEA;AACA,MAAO,SAAS,CAAA2E,eAAeA,CAAA,CAAG,CAChC,MAAO,IAAI,CAAAjD,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CACjC,CAEA;AACA,MAAO,SAAS,CAAAmC,UAAUA,CAAA,CAAqB,SAAAC,KAAA,CAAAT,SAAA,CAAAtC,MAAA,CAAjBuB,QAAQ,KAAAE,KAAA,CAAAsB,KAAA,EAAAC,KAAA,GAAAA,KAAA,CAAAD,KAAA,CAAAC,KAAA,IAARzB,QAAQ,CAAAyB,KAAA,EAAAV,SAAA,CAAAU,KAAA,GACpC,MAAO,CACL7B,IAAI,CAAE,YAAY,CAClBI,QACF,CAAC,CACH,CAEA,MAAO,SAAS,CAAA0B,WAAWA,CAAA,CAAqB,SAAAC,KAAA,CAAAZ,SAAA,CAAAtC,MAAA,CAAjBuB,QAAQ,KAAAE,KAAA,CAAAyB,KAAA,EAAAC,KAAA,GAAAA,KAAA,CAAAD,KAAA,CAAAC,KAAA,IAAR5B,QAAQ,CAAA4B,KAAA,EAAAb,SAAA,CAAAa,KAAA,GACrC,MAAO,CACLhC,IAAI,CAAE,aAAa,CACnBI,QACF,CAAC,CACH,CAEA;AACA,MAAO,SAAS,CAAA6B,UAAUA,CAACtG,EAAO,CAAE,CAClC,KAAM,CAAAuG,UAAiB,CAAG,EAAE,CAE5B,MAAO,CACLC,GAAG,CAAEA,CAAClD,MAAyB,CAAEnB,IAAS,GAAK,CAC7CoE,UAAU,CAACZ,IAAI,CAAC,CAAEtB,IAAI,CAAE,KAAK,CAAEf,MAAM,CAAEnB,IAAK,CAAC,CAAC,CAChD,CAAC,CACD6C,MAAM,CAAEA,CAAC1B,MAAyB,CAAEnB,IAAS,GAAK,CAChDoE,UAAU,CAACZ,IAAI,CAAC,CAAEtB,IAAI,CAAE,QAAQ,CAAEf,MAAM,CAAEnB,IAAK,CAAC,CAAC,CACnD,CAAC,CACD+C,MAAM,CAAG5B,MAAyB,EAAK,CACrCiD,UAAU,CAACZ,IAAI,CAAC,CAAEtB,IAAI,CAAE,QAAQ,CAAEf,MAAO,CAAC,CAAC,CAC7C,CAAC,CACDmD,MAAM,CAAE,KAAAA,CAAA,GAAY,CAClB;AACA,IAAK,KAAM,CAAAC,EAAE,GAAI,CAAAH,UAAU,CAAE,CAC3B,OAAQG,EAAE,CAACrC,IAAI,EACb,IAAK,KAAK,CACR,KAAM,CAAAc,MAAM,CAACuB,EAAE,CAACpD,MAAM,CAAEoD,EAAE,CAACvE,IAAI,CAAC,CAChC,MACF,IAAK,QAAQ,CACX,KAAM,CAAA8B,SAAS,CAACyC,EAAE,CAACpD,MAAM,CAAEoD,EAAE,CAACvE,IAAI,CAAC,CACnC,MACF,IAAK,QAAQ,CACX,KAAM,CAAA8C,SAAS,CAACyB,EAAE,CAACpD,MAAM,CAAC,CAC1B,MACJ,CACF,CACF,CACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}