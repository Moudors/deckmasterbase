{"ast":null,"code":"// Sistema de gerenciamento de cache para prevenir problemas de quota\n// Limpa automaticamente cache antigo e gerencia limites de storage\nclass CacheManager{constructor(){this.MAX_CACHE_AGE=7*24*60*60*1000;// 7 dias\nthis.MAX_CACHE_ITEMS=100;// M√°ximo de itens no cache\nthis.CACHE_PREFIX=\"deckmaster_cache_\";this.LAST_CLEANUP_KEY=\"deckmaster_last_cleanup\";// Executa limpeza autom√°tica ao iniciar\nthis.autoCleanup();}// Limpeza autom√°tica executada uma vez por dia\nasync autoCleanup(){try{const lastCleanup=localStorage.getItem(this.LAST_CLEANUP_KEY);const now=Date.now();// Se j√° limpou hoje, n√£o faz nada\nif(lastCleanup&&now-parseInt(lastCleanup)<24*60*60*1000){console.log(\"‚úÖ Cache limpo recentemente, nenhuma a√ß√£o necess√°ria\");return;}console.log(\"üßπ Iniciando limpeza autom√°tica de cache...\");// Limpa localStorage antigo\nawait this.cleanLocalStorage();// Limpa cache do React Query\nawait this.cleanReactQueryCache();// Limpa fila offline excessiva\nawait this.cleanOfflineQueue();// Marca √∫ltima limpeza\nlocalStorage.setItem(this.LAST_CLEANUP_KEY,now.toString());console.log(\"‚úÖ Limpeza de cache conclu√≠da!\");}catch(error){console.error(\"‚ùå Erro na limpeza autom√°tica:\",error);}}// Limpa itens antigos do localStorage\nasync cleanLocalStorage(){const keysToRemove=[];const now=Date.now();// Itera sobre todas as chaves\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(!key)continue;// Remove itens de cache antigos do DeckMaster\nif(key.startsWith(this.CACHE_PREFIX)){try{const item=JSON.parse(localStorage.getItem(key));if(item.timestamp&&now-item.timestamp>this.MAX_CACHE_AGE){keysToRemove.push(key);}}catch(e){// Se n√£o consegue parsear, remove\nkeysToRemove.push(key);}}}// Remove chaves identificadas\nkeysToRemove.forEach(key=>{localStorage.removeItem(key);});if(keysToRemove.length>0){console.log(\"\\uD83D\\uDDD1\\uFE0F Removidos \".concat(keysToRemove.length,\" itens antigos do localStorage\"));}}// Limpa cache do React Query (acess√≠vel via window.queryClient)\nasync cleanReactQueryCache(){if(typeof window==='undefined'||!window.queryClient){return;}const queryClient=window.queryClient;const queryCache=queryClient.getQueryCache();const allQueries=queryCache.getAll();const now=Date.now();let removedCount=0;allQueries.forEach(query=>{const state=query.state;// Remove queries antigas ou com erro\nif(state.dataUpdatedAt&&now-state.dataUpdatedAt>this.MAX_CACHE_AGE||state.status==='error'){queryClient.removeQueries({queryKey:query.queryKey});removedCount++;}});if(removedCount>0){console.log(\"\\uD83D\\uDDD1\\uFE0F Removidas \".concat(removedCount,\" queries antigas do cache\"));}}// Limpa fila offline excessiva\nasync cleanOfflineQueue(){const storage=(await import('./indexedDBStorage')).default;const PENDING_QUEUE_KEY=\"deckmaster_pending_sync\";try{const queue=await storage.getItem(PENDING_QUEUE_KEY);if(!queue||!Array.isArray(queue)){return;}const now=Date.now();const MAX_QUEUE_AGE=7*24*60*60*1000;// 7 dias\nconst MAX_QUEUE_SIZE=100;// M√°ximo de 100 itens na fila\n// Remove itens muito antigos\nlet cleanedQueue=queue.filter(item=>{return item.timestamp&&now-item.timestamp<MAX_QUEUE_AGE;});// Limita tamanho da fila (mant√©m os mais recentes)\nif(cleanedQueue.length>MAX_QUEUE_SIZE){cleanedQueue=cleanedQueue.slice(-MAX_QUEUE_SIZE);}if(cleanedQueue.length<queue.length){await storage.setItem(PENDING_QUEUE_KEY,cleanedQueue);console.log(\"\\uD83D\\uDDD1\\uFE0F Fila offline reduzida de \".concat(queue.length,\" para \").concat(cleanedQueue.length,\" itens\"));}}catch(error){console.error(\"Erro ao limpar fila offline:\",error);}}// For√ßa limpeza completa (para ser usada manualmente se necess√°rio)\nasync forceCleanup(){console.log(\"üßπ For√ßando limpeza completa do cache...\");// Limpa todo localStorage do DeckMaster (exceto autentica√ß√£o)\nconst keysToKeep=['firebase:authUser','firebase:host','firebaseui::'];for(let i=localStorage.length-1;i>=0;i--){const key=localStorage.key(i);if(key&&!keysToKeep.some(k=>key.includes(k))){localStorage.removeItem(key);}}// Limpa todo cache do React Query\nif(window.queryClient){window.queryClient.clear();}// Limpa fila offline\nconst storage=(await import('./indexedDBStorage')).default;const PENDING_QUEUE_KEY=\"deckmaster_pending_sync\";await storage.setItem(PENDING_QUEUE_KEY,[]);console.log(\"‚úÖ Limpeza completa conclu√≠da!\");console.log(\"üí° Dica: Recarregue a p√°gina para aplicar as mudan√ßas\");}// Verifica uso de storage\nasync checkStorageUsage(){if('storage'in navigator&&'estimate'in navigator.storage){const estimate=await navigator.storage.estimate();const usage=estimate.usage||0;const quota=estimate.quota||0;const percentUsed=(usage/quota*100).toFixed(2);console.log(\"\\uD83D\\uDCCA Storage Usage: \".concat((usage/1024/1024).toFixed(2),\"MB / \").concat((quota/1024/1024).toFixed(2),\"MB (\").concat(percentUsed,\"%)\"));// Alerta se uso > 80%\nif(parseFloat(percentUsed)>80){console.warn(\"\\u26A0\\uFE0F Storage est\\xE1 \".concat(percentUsed,\"% cheio! Considere limpar dados antigos.\"));return{usage,quota,percentUsed,warning:true};}return{usage,quota,percentUsed,warning:false};}return null;}// Obt√©m informa√ß√µes sobre o cache\ngetCacheInfo(){const info={localStorage:{items:localStorage.length,keys:[]},reactQuery:{queries:0}};// Lista chaves do localStorage\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key)info.localStorage.keys.push(key);}// Conta queries do React Query\nif(window.queryClient){const queryCache=window.queryClient.getQueryCache();info.reactQuery.queries=queryCache.getAll().length;}return info;}}// Singleton\nconst cacheManager=new CacheManager();// Exporta fun√ß√µes √∫teis para o console\nif(typeof window!=='undefined'){window.cacheManager={checkUsage:()=>cacheManager.checkStorageUsage(),forceClean:()=>cacheManager.forceCleanup(),getInfo:()=>cacheManager.getCacheInfo()};}export default cacheManager;","map":{"version":3,"names":["CacheManager","constructor","MAX_CACHE_AGE","MAX_CACHE_ITEMS","CACHE_PREFIX","LAST_CLEANUP_KEY","autoCleanup","lastCleanup","localStorage","getItem","now","Date","parseInt","console","log","cleanLocalStorage","cleanReactQueryCache","cleanOfflineQueue","setItem","toString","error","keysToRemove","i","length","key","startsWith","item","JSON","parse","timestamp","push","e","forEach","removeItem","concat","window","queryClient","queryCache","getQueryCache","allQueries","getAll","removedCount","query","state","dataUpdatedAt","status","removeQueries","queryKey","storage","default","PENDING_QUEUE_KEY","queue","Array","isArray","MAX_QUEUE_AGE","MAX_QUEUE_SIZE","cleanedQueue","filter","slice","forceCleanup","keysToKeep","some","k","includes","clear","checkStorageUsage","navigator","estimate","usage","quota","percentUsed","toFixed","parseFloat","warn","warning","getCacheInfo","info","items","keys","reactQuery","queries","cacheManager","checkUsage","forceClean","getInfo"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/cacheManager.js"],"sourcesContent":["// Sistema de gerenciamento de cache para prevenir problemas de quota\r\n// Limpa automaticamente cache antigo e gerencia limites de storage\r\n\r\nclass CacheManager {\r\n  constructor() {\r\n    this.MAX_CACHE_AGE = 7 * 24 * 60 * 60 * 1000; // 7 dias\r\n    this.MAX_CACHE_ITEMS = 100; // M√°ximo de itens no cache\r\n    this.CACHE_PREFIX = \"deckmaster_cache_\";\r\n    this.LAST_CLEANUP_KEY = \"deckmaster_last_cleanup\";\r\n    \r\n    // Executa limpeza autom√°tica ao iniciar\r\n    this.autoCleanup();\r\n  }\r\n\r\n  // Limpeza autom√°tica executada uma vez por dia\r\n  async autoCleanup() {\r\n    try {\r\n      const lastCleanup = localStorage.getItem(this.LAST_CLEANUP_KEY);\r\n      const now = Date.now();\r\n      \r\n      // Se j√° limpou hoje, n√£o faz nada\r\n      if (lastCleanup && now - parseInt(lastCleanup) < 24 * 60 * 60 * 1000) {\r\n        console.log(\"‚úÖ Cache limpo recentemente, nenhuma a√ß√£o necess√°ria\");\r\n        return;\r\n      }\r\n\r\n      console.log(\"üßπ Iniciando limpeza autom√°tica de cache...\");\r\n      \r\n      // Limpa localStorage antigo\r\n      await this.cleanLocalStorage();\r\n      \r\n      // Limpa cache do React Query\r\n      await this.cleanReactQueryCache();\r\n      \r\n      // Limpa fila offline excessiva\r\n      await this.cleanOfflineQueue();\r\n      \r\n      // Marca √∫ltima limpeza\r\n      localStorage.setItem(this.LAST_CLEANUP_KEY, now.toString());\r\n      \r\n      console.log(\"‚úÖ Limpeza de cache conclu√≠da!\");\r\n    } catch (error) {\r\n      console.error(\"‚ùå Erro na limpeza autom√°tica:\", error);\r\n    }\r\n  }\r\n\r\n  // Limpa itens antigos do localStorage\r\n  async cleanLocalStorage() {\r\n    const keysToRemove = [];\r\n    const now = Date.now();\r\n\r\n    // Itera sobre todas as chaves\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (!key) continue;\r\n\r\n      // Remove itens de cache antigos do DeckMaster\r\n      if (key.startsWith(this.CACHE_PREFIX)) {\r\n        try {\r\n          const item = JSON.parse(localStorage.getItem(key));\r\n          if (item.timestamp && now - item.timestamp > this.MAX_CACHE_AGE) {\r\n            keysToRemove.push(key);\r\n          }\r\n        } catch (e) {\r\n          // Se n√£o consegue parsear, remove\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove chaves identificadas\r\n    keysToRemove.forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n\r\n    if (keysToRemove.length > 0) {\r\n      console.log(`üóëÔ∏è Removidos ${keysToRemove.length} itens antigos do localStorage`);\r\n    }\r\n  }\r\n\r\n  // Limpa cache do React Query (acess√≠vel via window.queryClient)\r\n  async cleanReactQueryCache() {\r\n    if (typeof window === 'undefined' || !window.queryClient) {\r\n      return;\r\n    }\r\n\r\n    const queryClient = window.queryClient;\r\n    const queryCache = queryClient.getQueryCache();\r\n    const allQueries = queryCache.getAll();\r\n    \r\n    const now = Date.now();\r\n    let removedCount = 0;\r\n\r\n    allQueries.forEach(query => {\r\n      const state = query.state;\r\n      \r\n      // Remove queries antigas ou com erro\r\n      if (\r\n        (state.dataUpdatedAt && now - state.dataUpdatedAt > this.MAX_CACHE_AGE) ||\r\n        state.status === 'error'\r\n      ) {\r\n        queryClient.removeQueries({ queryKey: query.queryKey });\r\n        removedCount++;\r\n      }\r\n    });\r\n\r\n    if (removedCount > 0) {\r\n      console.log(`üóëÔ∏è Removidas ${removedCount} queries antigas do cache`);\r\n    }\r\n  }\r\n\r\n  // Limpa fila offline excessiva\r\n  async cleanOfflineQueue() {\r\n    const storage = (await import('./indexedDBStorage')).default;\r\n    const PENDING_QUEUE_KEY = \"deckmaster_pending_sync\";\r\n    \r\n    try {\r\n      const queue = await storage.getItem(PENDING_QUEUE_KEY);\r\n      \r\n      if (!queue || !Array.isArray(queue)) {\r\n        return;\r\n      }\r\n\r\n      const now = Date.now();\r\n      const MAX_QUEUE_AGE = 7 * 24 * 60 * 60 * 1000; // 7 dias\r\n      const MAX_QUEUE_SIZE = 100; // M√°ximo de 100 itens na fila\r\n\r\n      // Remove itens muito antigos\r\n      let cleanedQueue = queue.filter(item => {\r\n        return item.timestamp && now - item.timestamp < MAX_QUEUE_AGE;\r\n      });\r\n\r\n      // Limita tamanho da fila (mant√©m os mais recentes)\r\n      if (cleanedQueue.length > MAX_QUEUE_SIZE) {\r\n        cleanedQueue = cleanedQueue.slice(-MAX_QUEUE_SIZE);\r\n      }\r\n\r\n      if (cleanedQueue.length < queue.length) {\r\n        await storage.setItem(PENDING_QUEUE_KEY, cleanedQueue);\r\n        console.log(`üóëÔ∏è Fila offline reduzida de ${queue.length} para ${cleanedQueue.length} itens`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao limpar fila offline:\", error);\r\n    }\r\n  }\r\n\r\n  // For√ßa limpeza completa (para ser usada manualmente se necess√°rio)\r\n  async forceCleanup() {\r\n    console.log(\"üßπ For√ßando limpeza completa do cache...\");\r\n    \r\n    // Limpa todo localStorage do DeckMaster (exceto autentica√ß√£o)\r\n    const keysToKeep = ['firebase:authUser', 'firebase:host', 'firebaseui::'];\r\n    for (let i = localStorage.length - 1; i >= 0; i--) {\r\n      const key = localStorage.key(i);\r\n      if (key && !keysToKeep.some(k => key.includes(k))) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    }\r\n\r\n    // Limpa todo cache do React Query\r\n    if (window.queryClient) {\r\n      window.queryClient.clear();\r\n    }\r\n\r\n    // Limpa fila offline\r\n    const storage = (await import('./indexedDBStorage')).default;\r\n    const PENDING_QUEUE_KEY = \"deckmaster_pending_sync\";\r\n    await storage.setItem(PENDING_QUEUE_KEY, []);\r\n\r\n    console.log(\"‚úÖ Limpeza completa conclu√≠da!\");\r\n    console.log(\"üí° Dica: Recarregue a p√°gina para aplicar as mudan√ßas\");\r\n  }\r\n\r\n  // Verifica uso de storage\r\n  async checkStorageUsage() {\r\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n      const estimate = await navigator.storage.estimate();\r\n      const usage = estimate.usage || 0;\r\n      const quota = estimate.quota || 0;\r\n      const percentUsed = ((usage / quota) * 100).toFixed(2);\r\n\r\n      console.log(`üìä Storage Usage: ${(usage / 1024 / 1024).toFixed(2)}MB / ${(quota / 1024 / 1024).toFixed(2)}MB (${percentUsed}%)`);\r\n\r\n      // Alerta se uso > 80%\r\n      if (parseFloat(percentUsed) > 80) {\r\n        console.warn(`‚ö†Ô∏è Storage est√° ${percentUsed}% cheio! Considere limpar dados antigos.`);\r\n        return { usage, quota, percentUsed, warning: true };\r\n      }\r\n\r\n      return { usage, quota, percentUsed, warning: false };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // Obt√©m informa√ß√µes sobre o cache\r\n  getCacheInfo() {\r\n    const info = {\r\n      localStorage: {\r\n        items: localStorage.length,\r\n        keys: []\r\n      },\r\n      reactQuery: {\r\n        queries: 0\r\n      }\r\n    };\r\n\r\n    // Lista chaves do localStorage\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key) info.localStorage.keys.push(key);\r\n    }\r\n\r\n    // Conta queries do React Query\r\n    if (window.queryClient) {\r\n      const queryCache = window.queryClient.getQueryCache();\r\n      info.reactQuery.queries = queryCache.getAll().length;\r\n    }\r\n\r\n    return info;\r\n  }\r\n}\r\n\r\n// Singleton\r\nconst cacheManager = new CacheManager();\r\n\r\n// Exporta fun√ß√µes √∫teis para o console\r\nif (typeof window !== 'undefined') {\r\n  window.cacheManager = {\r\n    checkUsage: () => cacheManager.checkStorageUsage(),\r\n    forceClean: () => cacheManager.forceCleanup(),\r\n    getInfo: () => cacheManager.getCacheInfo(),\r\n  };\r\n}\r\n\r\nexport default cacheManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}