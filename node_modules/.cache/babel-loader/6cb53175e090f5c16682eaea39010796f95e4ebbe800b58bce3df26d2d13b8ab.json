{"ast":null,"code":"// Sistema de conectividade online/offline para DeckMaster\nimport React from'react';import{supabase}from'../supabase';class ConnectivityManager{constructor(){this.isOnline=navigator.onLine;this.isSupabaseConnected=false;this.listeners=new Set();this.lastConnectivityCheck=0;this.connectivityCheckInterval=30000;// 30 segundos\nthis.initConnectivityMonitoring();this.checkSupabaseConnection();}// Monitora conectividade da rede\ninitConnectivityMonitoring(){window.addEventListener('online',()=>{console.log('游릭 Rede online detectada');this.isOnline=true;this.checkSupabaseConnection();this.notifyListeners();});window.addEventListener('offline',()=>{console.log('游댮 Rede offline detectada');this.isOnline=false;this.isSupabaseConnected=false;this.notifyListeners();});// Verifica칞칚o peri칩dica da conex칚o com Supabase\nsetInterval(()=>{if(this.isOnline){this.checkSupabaseConnection();}},this.connectivityCheckInterval);}// Testa conex칚o com Supabase\nasync checkSupabaseConnection(){if(!this.isOnline){this.isSupabaseConnected=false;return false;}try{const now=Date.now();// Rate limiting - n칚o verificar muito frequentemente\nif(now-this.lastConnectivityCheck<5000){return this.isSupabaseConnected;}this.lastConnectivityCheck=now;// Teste simples de conectividade com Supabase\nconst{error}=await supabase.from('users').select('id').limit(1);const wasConnected=this.isSupabaseConnected;this.isSupabaseConnected=!error;if(wasConnected!==this.isSupabaseConnected){console.log(\"\\uD83D\\uDD04 Conex\\xE3o Supabase: \".concat(this.isSupabaseConnected?'CONECTADO':'DESCONECTADO'));this.notifyListeners();}return this.isSupabaseConnected;}catch(err){console.warn('丘멆잺 Erro ao verificar conex칚o Supabase:',err);this.isSupabaseConnected=false;this.notifyListeners();return false;}}// Verifica se est치 totalmente online (rede + Supabase)\nasync isFullyOnline(){if(!this.isOnline)return false;return await this.checkSupabaseConnection();}// Verifica se pode buscar no Scryfall (rede dispon칤vel)\ncanSearchScryfall(){return this.isOnline;}// Verifica se pode salvar dados (Supabase conectado)\ncanSaveData(){return this.isOnline&&this.isSupabaseConnected;}// Verifica se est치 no modo offline (apenas visualiza칞칚o)\nisOfflineMode(){return!this.isOnline||!this.isSupabaseConnected;}// Adiciona listener para mudan칞as de conectividade\naddConnectivityListener(callback){this.listeners.add(callback);// Retorna fun칞칚o para remover listener\nreturn()=>{this.listeners.delete(callback);};}// Notifica todos os listeners\nnotifyListeners(){const status={isOnline:this.isOnline,isSupabaseConnected:this.isSupabaseConnected,canSearchScryfall:this.canSearchScryfall(),canSaveData:this.canSaveData(),isOfflineMode:this.isOfflineMode()};this.listeners.forEach(callback=>{try{callback(status);}catch(err){console.error('Erro em listener de conectividade:',err);}});}// Estado atual da conectividade\ngetConnectivityStatus(){return{isOnline:this.isOnline,isSupabaseConnected:this.isSupabaseConnected,canSearchScryfall:this.canSearchScryfall(),canSaveData:this.canSaveData(),isOfflineMode:this.isOfflineMode(),lastCheck:this.lastConnectivityCheck};}}// Inst칙ncia singleton\nexport const connectivityManager=new ConnectivityManager();// Hook React para usar a conectividade\nexport function useConnectivity(){const[status,setStatus]=React.useState(connectivityManager.getConnectivityStatus());React.useEffect(()=>{const unsubscribe=connectivityManager.addConnectivityListener(setStatus);// Verificar status inicial\nconnectivityManager.checkSupabaseConnection().then(()=>{setStatus(connectivityManager.getConnectivityStatus());});return unsubscribe;},[]);return status;}","map":{"version":3,"names":["React","supabase","ConnectivityManager","constructor","isOnline","navigator","onLine","isSupabaseConnected","listeners","Set","lastConnectivityCheck","connectivityCheckInterval","initConnectivityMonitoring","checkSupabaseConnection","window","addEventListener","console","log","notifyListeners","setInterval","now","Date","error","from","select","limit","wasConnected","concat","err","warn","isFullyOnline","canSearchScryfall","canSaveData","isOfflineMode","addConnectivityListener","callback","add","delete","status","forEach","getConnectivityStatus","lastCheck","connectivityManager","useConnectivity","setStatus","useState","useEffect","unsubscribe","then"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/connectivityManager.js"],"sourcesContent":["// Sistema de conectividade online/offline para DeckMaster\r\nimport React from 'react';\r\nimport { supabase } from '../supabase';\r\n\r\nclass ConnectivityManager {\r\n  constructor() {\r\n    this.isOnline = navigator.onLine;\r\n    this.isSupabaseConnected = false;\r\n    this.listeners = new Set();\r\n    this.lastConnectivityCheck = 0;\r\n    this.connectivityCheckInterval = 30000; // 30 segundos\r\n    \r\n    this.initConnectivityMonitoring();\r\n    this.checkSupabaseConnection();\r\n  }\r\n\r\n  // Monitora conectividade da rede\r\n  initConnectivityMonitoring() {\r\n    window.addEventListener('online', () => {\r\n      console.log('游릭 Rede online detectada');\r\n      this.isOnline = true;\r\n      this.checkSupabaseConnection();\r\n      this.notifyListeners();\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      console.log('游댮 Rede offline detectada');\r\n      this.isOnline = false;\r\n      this.isSupabaseConnected = false;\r\n      this.notifyListeners();\r\n    });\r\n\r\n    // Verifica칞칚o peri칩dica da conex칚o com Supabase\r\n    setInterval(() => {\r\n      if (this.isOnline) {\r\n        this.checkSupabaseConnection();\r\n      }\r\n    }, this.connectivityCheckInterval);\r\n  }\r\n\r\n  // Testa conex칚o com Supabase\r\n  async checkSupabaseConnection() {\r\n    if (!this.isOnline) {\r\n      this.isSupabaseConnected = false;\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const now = Date.now();\r\n      \r\n      // Rate limiting - n칚o verificar muito frequentemente\r\n      if (now - this.lastConnectivityCheck < 5000) {\r\n        return this.isSupabaseConnected;\r\n      }\r\n      \r\n      this.lastConnectivityCheck = now;\r\n\r\n      // Teste simples de conectividade com Supabase\r\n      const { error } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      const wasConnected = this.isSupabaseConnected;\r\n      this.isSupabaseConnected = !error;\r\n\r\n      if (wasConnected !== this.isSupabaseConnected) {\r\n        console.log(`游댃 Conex칚o Supabase: ${this.isSupabaseConnected ? 'CONECTADO' : 'DESCONECTADO'}`);\r\n        this.notifyListeners();\r\n      }\r\n\r\n      return this.isSupabaseConnected;\r\n    } catch (err) {\r\n      console.warn('丘멆잺 Erro ao verificar conex칚o Supabase:', err);\r\n      this.isSupabaseConnected = false;\r\n      this.notifyListeners();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Verifica se est치 totalmente online (rede + Supabase)\r\n  async isFullyOnline() {\r\n    if (!this.isOnline) return false;\r\n    return await this.checkSupabaseConnection();\r\n  }\r\n\r\n  // Verifica se pode buscar no Scryfall (rede dispon칤vel)\r\n  canSearchScryfall() {\r\n    return this.isOnline;\r\n  }\r\n\r\n  // Verifica se pode salvar dados (Supabase conectado)\r\n  canSaveData() {\r\n    return this.isOnline && this.isSupabaseConnected;\r\n  }\r\n\r\n  // Verifica se est치 no modo offline (apenas visualiza칞칚o)\r\n  isOfflineMode() {\r\n    return !this.isOnline || !this.isSupabaseConnected;\r\n  }\r\n\r\n  // Adiciona listener para mudan칞as de conectividade\r\n  addConnectivityListener(callback) {\r\n    this.listeners.add(callback);\r\n    \r\n    // Retorna fun칞칚o para remover listener\r\n    return () => {\r\n      this.listeners.delete(callback);\r\n    };\r\n  }\r\n\r\n  // Notifica todos os listeners\r\n  notifyListeners() {\r\n    const status = {\r\n      isOnline: this.isOnline,\r\n      isSupabaseConnected: this.isSupabaseConnected,\r\n      canSearchScryfall: this.canSearchScryfall(),\r\n      canSaveData: this.canSaveData(),\r\n      isOfflineMode: this.isOfflineMode()\r\n    };\r\n\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(status);\r\n      } catch (err) {\r\n        console.error('Erro em listener de conectividade:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Estado atual da conectividade\r\n  getConnectivityStatus() {\r\n    return {\r\n      isOnline: this.isOnline,\r\n      isSupabaseConnected: this.isSupabaseConnected,\r\n      canSearchScryfall: this.canSearchScryfall(),\r\n      canSaveData: this.canSaveData(),\r\n      isOfflineMode: this.isOfflineMode(),\r\n      lastCheck: this.lastConnectivityCheck\r\n    };\r\n  }\r\n}\r\n\r\n// Inst칙ncia singleton\r\nexport const connectivityManager = new ConnectivityManager();\r\n\r\n// Hook React para usar a conectividade\r\nexport function useConnectivity() {\r\n  const [status, setStatus] = React.useState(connectivityManager.getConnectivityStatus());\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribe = connectivityManager.addConnectivityListener(setStatus);\r\n    \r\n    // Verificar status inicial\r\n    connectivityManager.checkSupabaseConnection().then(() => {\r\n      setStatus(connectivityManager.getConnectivityStatus());\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return status;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}