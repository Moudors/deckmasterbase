{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"_synced\",\"_pending\",\"_localChanges\",\"_version\",\"_updatedAt\"],_excluded2=[\"_synced\",\"_pending\",\"_localChanges\",\"_version\",\"_updatedAt\"],_excluded3=[\"_synced\",\"_pending\",\"_version\",\"_updatedAt\"],_excluded4=[\"_synced\",\"_pending\",\"_version\",\"_updatedAt\"];/**\r\n * 🔄 SYNC MANAGER - Gerenciador de Sincronização\r\n * ===============================================\r\n * Sincroniza dados locais (IndexedDB) com Firebase\r\n * \r\n * ESTRATÉGIA:\r\n * - IndexedDB é a fonte primária (single source of truth)\r\n * - Firebase é backup/sincronização\r\n * - Conflitos resolvidos por timestamp (mais recente ganha)\r\n * - Sincronização automática a cada 30 segundos\r\n * - Retry com backoff exponencial\r\n */import{db}from'../firebase';import{collection,doc,getDoc,getDocs,addDoc,updateDoc,deleteDoc,query,where,serverTimestamp}from'../firebase';import unifiedStorage from'./unifiedStorage';const SYNC_INTERVAL=30000;// 30 segundos\nconst MAX_RETRIES=5;const INITIAL_BACKOFF=1000;// 1 segundo\nclass SyncManager{constructor(){this.isSyncing=false;this.syncIntervalId=null;this.listeners=new Set();// Monitor de conectividade\nthis.setupConnectivityMonitor();// Inicia sincronização automática\nthis.startAutoSync();console.log('🔄 SyncManager inicializado');}/**\r\n   * 🌐 Monitor de conectividade\r\n   */setupConnectivityMonitor(){window.addEventListener('online',()=>{console.log('🌐 Online! Iniciando sincronização...');this.emit('online');this.syncNow();});window.addEventListener('offline',()=>{console.log('📴 Offline - Modo local ativado');this.emit('offline');});}/**\r\n   * ⏰ Inicia sincronização automática\r\n   */startAutoSync(){if(this.syncIntervalId)return;this.syncIntervalId=setInterval(()=>{if(navigator.onLine&&!this.isSyncing){this.syncPending();}},SYNC_INTERVAL);console.log('✅ Auto-sync ativado (30s)');}/**\r\n   * ⏸️ Para sincronização automática\r\n   */stopAutoSync(){if(this.syncIntervalId){clearInterval(this.syncIntervalId);this.syncIntervalId=null;console.log('⏸️ Auto-sync desativado');}}/**\r\n   * 🔔 Sistema de eventos\r\n   */on(event,callback){this.listeners.add({event,callback});}emit(event,data){this.listeners.forEach(listener=>{if(listener.event===event){listener.callback(data);}});}/**\r\n   * 🚀 Sincroniza AGORA (manual)\r\n   */async syncNow(){if(this.isSyncing){console.log('⏳ Sincronização já em andamento...');return;}if(!navigator.onLine){console.log('📴 Offline - sincronização adiada');return;}console.log('🔄 Iniciando sincronização manual...');await this.syncPending();}/**\r\n   * 🔄 Sincroniza operações pendentes\r\n   */async syncPending(){if(this.isSyncing)return;this.isSyncing=true;this.emit('syncStart');try{const operations=await unifiedStorage.getPendingSyncOperations();if(operations.length===0){console.log('✅ Nenhuma operação pendente');this.isSyncing=false;return;}console.log(\"\\uD83D\\uDD04 Sincronizando \".concat(operations.length,\" opera\\xE7\\xF5es...\"));let successCount=0;let failCount=0;for(const operation of operations){try{// Marca como processando\nawait unifiedStorage.updateSyncOperation(operation.id,{status:'processing'});// Executa operação\nawait this.executeOperation(operation);// Remove da fila\nawait unifiedStorage.removeSyncOperation(operation.id);successCount++;console.log(\"\\u2705 Sincronizado: \".concat(operation.type));}catch(error){console.error(\"\\u274C Falha ao sincronizar \".concat(operation.type,\":\"),error);// Incrementa tentativas\nconst retries=operation.retries+1;if(retries>=MAX_RETRIES){// Após 5 tentativas, marca como falha permanente\nawait unifiedStorage.updateSyncOperation(operation.id,{status:'failed',retries,lastError:error.message});failCount++;}else{// Volta para pending com backoff\nawait unifiedStorage.updateSyncOperation(operation.id,{status:'pending',retries,lastError:error.message,nextRetry:Date.now()+INITIAL_BACKOFF*Math.pow(2,retries)});}}}// Log de sincronização\nawait unifiedStorage.addSyncLog({operation:'SYNC_BATCH',itemsSynced:successCount,itemsFailed:failCount,totalOperations:operations.length});console.log(\"\\u2705 Sincroniza\\xE7\\xE3o conclu\\xEDda: \".concat(successCount,\" sucesso, \").concat(failCount,\" falhas\"));this.emit('syncComplete',{successCount,failCount});}catch(error){console.error('❌ Erro na sincronização:',error);this.emit('syncError',error);}finally{this.isSyncing=false;}}/**\r\n   * ⚡ Executa operação no Firebase\r\n   */async executeOperation(operation){const{type,entityType,entityId,data}=operation;switch(type){case'CREATE_DECK':return await this.createDeckOnFirebase(data);case'UPDATE_DECK':return await this.updateDeckOnFirebase(entityId,data);case'DELETE_DECK':return await this.deleteDeckOnFirebase(entityId);case'CREATE_CARD':return await this.createCardOnFirebase(data);case'UPDATE_CARD':return await this.updateCardOnFirebase(entityId,data);case'DELETE_CARD':return await this.deleteCardOnFirebase(entityId);default:throw new Error(\"Tipo de opera\\xE7\\xE3o desconhecido: \".concat(type));}}/**\r\n   * 🎴 Cria deck no Firebase\r\n   */async createDeckOnFirebase(deckData){try{// Remove campos internos antes de enviar\nconst{_synced,_pending,_localChanges,_version,_updatedAt}=deckData,cleanData=_objectWithoutProperties(deckData,_excluded);const docRef=await addDoc(collection(db,'decks'),_objectSpread(_objectSpread({},cleanData),{},{created_at:serverTimestamp(),updated_at:serverTimestamp()}));// Atualiza ID local para ID do Firebase\nconst localDeck=await unifiedStorage.getDeck(deckData.id);if(localDeck){await unifiedStorage.deleteDeck(deckData.id);await unifiedStorage.saveDeck(_objectSpread(_objectSpread({},localDeck),{},{id:docRef.id}),{synced:true});}console.log('✅ Deck criado no Firebase:',docRef.id);return docRef.id;}catch(error){// Se for quota excedida, não retry\nif(error.code==='resource-exhausted'){console.log('⚠️ Quota do Firebase excedida - operação adiada');throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * ✏️ Atualiza deck no Firebase\r\n   */async updateDeckOnFirebase(deckId,updates){try{// Remove campos internos\nconst{_synced,_pending,_localChanges,_version,_updatedAt}=updates,cleanData=_objectWithoutProperties(updates,_excluded2);const docRef=doc(db,'decks',deckId);await updateDoc(docRef,_objectSpread(_objectSpread({},cleanData),{},{updated_at:serverTimestamp()}));// Marca como sincronizado localmente\nconst localDeck=await unifiedStorage.getDeck(deckId);if(localDeck){await unifiedStorage.saveDeck(localDeck,{synced:true});}console.log('✅ Deck atualizado no Firebase:',deckId);}catch(error){if(error.code==='resource-exhausted'){throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * 🗑️ Deleta deck no Firebase\r\n   */async deleteDeckOnFirebase(deckId){try{const docRef=doc(db,'decks',deckId);await deleteDoc(docRef);console.log('✅ Deck deletado no Firebase:',deckId);}catch(error){if(error.code==='resource-exhausted'){throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * 🎴 Cria carta no Firebase\r\n   */async createCardOnFirebase(cardData){try{const{_synced,_pending,_version,_updatedAt}=cardData,cleanData=_objectWithoutProperties(cardData,_excluded3);const docRef=await addDoc(collection(db,'cards'),_objectSpread(_objectSpread({},cleanData),{},{created_at:serverTimestamp()}));// Atualiza ID local\nconst localCard=await unifiedStorage.getCard(cardData.id);if(localCard){await unifiedStorage.deleteCard(cardData.id);await unifiedStorage.saveCard(_objectSpread(_objectSpread({},localCard),{},{id:docRef.id}),{synced:true});}console.log('✅ Carta criada no Firebase:',docRef.id);return docRef.id;}catch(error){if(error.code==='resource-exhausted'){throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * ✏️ Atualiza carta no Firebase\r\n   */async updateCardOnFirebase(cardId,updates){try{const{_synced,_pending,_version,_updatedAt}=updates,cleanData=_objectWithoutProperties(updates,_excluded4);const docRef=doc(db,'cards',cardId);await updateDoc(docRef,cleanData);// Marca como sincronizado\nconst localCard=await unifiedStorage.getCard(cardId);if(localCard){await unifiedStorage.saveCard(localCard,{synced:true});}console.log('✅ Carta atualizada no Firebase:',cardId);}catch(error){if(error.code==='resource-exhausted'){throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * 🗑️ Deleta carta no Firebase\r\n   */async deleteCardOnFirebase(cardId){try{const docRef=doc(db,'cards',cardId);await deleteDoc(docRef);console.log('✅ Carta deletada no Firebase:',cardId);}catch(error){if(error.code==='resource-exhausted'){throw new Error('QUOTA_EXCEEDED');}throw error;}}/**\r\n   * 🔄 Merge com dados do Firebase (pull)\r\n   */async pullFromFirebase(userId){if(!navigator.onLine){console.log('📴 Offline - pull adiado');return;}console.log('⬇️ Baixando dados do Firebase...');try{// Busca decks do Firebase\nconst decksQuery=query(collection(db,'decks'),where('userId','==',userId));const decksSnapshot=await getDocs(decksQuery);for(const docSnapshot of decksSnapshot.docs){const firebaseDeck=_objectSpread({id:docSnapshot.id},docSnapshot.data());const localDeck=await unifiedStorage.getDeck(docSnapshot.id);if(!localDeck){// Não existe localmente - salva\nawait unifiedStorage.saveDeck(firebaseDeck,{synced:true});console.log('⬇️ Deck baixado:',docSnapshot.id);}else{// Existe localmente - resolve conflito\nawait this.resolveConflict('deck',localDeck,firebaseDeck);}}// Busca cartas (apenas dos decks sincronizados)\nconst deckIds=decksSnapshot.docs.map(d=>d.id);for(const deckId of deckIds){const cardsQuery=query(collection(db,'cards'),where('deck_id','==',deckId));const cardsSnapshot=await getDocs(cardsQuery);for(const cardDoc of cardsSnapshot.docs){const firebaseCard=_objectSpread({id:cardDoc.id},cardDoc.data());const localCard=await unifiedStorage.getCard(cardDoc.id);if(!localCard){await unifiedStorage.saveCard(firebaseCard,{synced:true});console.log('⬇️ Carta baixada:',cardDoc.id);}else{await this.resolveConflict('card',localCard,firebaseCard);}}}console.log('✅ Pull do Firebase concluído');this.emit('pullComplete');}catch(error){console.error('❌ Erro no pull do Firebase:',error);throw error;}}/**\r\n   * ⚖️ Resolve conflito entre dados locais e Firebase\r\n   * Estratégia: Timestamp - mais recente ganha\r\n   */async resolveConflict(entityType,localData,firebaseData){var _localData$updated_at,_localData$updated_at2,_firebaseData$updated,_firebaseData$updated2;const localTimestamp=localData._updatedAt||((_localData$updated_at=localData.updated_at)===null||_localData$updated_at===void 0?void 0:(_localData$updated_at2=_localData$updated_at.toMillis)===null||_localData$updated_at2===void 0?void 0:_localData$updated_at2.call(_localData$updated_at))||0;const firebaseTimestamp=((_firebaseData$updated=firebaseData.updated_at)===null||_firebaseData$updated===void 0?void 0:(_firebaseData$updated2=_firebaseData$updated.toMillis)===null||_firebaseData$updated2===void 0?void 0:_firebaseData$updated2.call(_firebaseData$updated))||firebaseData._updatedAt||0;console.log(\"\\u2696\\uFE0F Resolvendo conflito (\".concat(entityType,\"):\"),{local:new Date(localTimestamp),firebase:new Date(firebaseTimestamp)});// Se local tem mudanças não sincronizadas, mantém local\nif(localData._pending&&localData._pending.length>0){console.log('✅ Local tem mudanças pendentes - mantém local');return;}// Se Firebase é mais recente, usa Firebase\nif(firebaseTimestamp>localTimestamp){console.log('✅ Firebase mais recente - atualiza local');if(entityType==='deck'){await unifiedStorage.saveDeck(firebaseData,{synced:true});}else if(entityType==='card'){await unifiedStorage.saveCard(firebaseData,{synced:true});}}else{console.log('✅ Local mais recente - mantém local');// Local já está atualizado, apenas marca como sincronizado\nif(entityType==='deck'){await unifiedStorage.saveDeck(localData,{synced:true});}else if(entityType==='card'){await unifiedStorage.saveCard(localData,{synced:true});}}}/**\r\n   * 📊 Status da sincronização\r\n   */async getStatus(){const pending=await unifiedStorage.getPendingSyncOperations();const stats=await unifiedStorage.getStats();const logs=await unifiedStorage.getSyncLogs(10);return{isOnline:navigator.onLine,isSyncing:this.isSyncing,pendingOperations:pending.length,stats,recentLogs:logs};}}// Singleton\nconst syncManager=new SyncManager();// Expõe no window para debug\nif(typeof window!=='undefined'){window.syncManager=syncManager;console.log('🔄 SyncManager disponível em window.syncManager');}export default syncManager;","map":{"version":3,"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","query","where","serverTimestamp","unifiedStorage","SYNC_INTERVAL","MAX_RETRIES","INITIAL_BACKOFF","SyncManager","constructor","isSyncing","syncIntervalId","listeners","Set","setupConnectivityMonitor","startAutoSync","console","log","window","addEventListener","emit","syncNow","setInterval","navigator","onLine","syncPending","stopAutoSync","clearInterval","on","event","callback","add","data","forEach","listener","operations","getPendingSyncOperations","length","concat","successCount","failCount","operation","updateSyncOperation","id","status","executeOperation","removeSyncOperation","type","error","retries","lastError","message","nextRetry","Date","now","Math","pow","addSyncLog","itemsSynced","itemsFailed","totalOperations","entityType","entityId","createDeckOnFirebase","updateDeckOnFirebase","deleteDeckOnFirebase","createCardOnFirebase","updateCardOnFirebase","deleteCardOnFirebase","Error","deckData","_synced","_pending","_localChanges","_version","_updatedAt","cleanData","_objectWithoutProperties","_excluded","docRef","_objectSpread","created_at","updated_at","localDeck","getDeck","deleteDeck","saveDeck","synced","code","deckId","updates","_excluded2","cardData","_excluded3","localCard","getCard","deleteCard","saveCard","cardId","_excluded4","pullFromFirebase","userId","decksQuery","decksSnapshot","docSnapshot","docs","firebaseDeck","resolveConflict","deckIds","map","d","cardsQuery","cardsSnapshot","cardDoc","firebaseCard","localData","firebaseData","_localData$updated_at","_localData$updated_at2","_firebaseData$updated","_firebaseData$updated2","localTimestamp","toMillis","call","firebaseTimestamp","local","firebase","getStatus","pending","stats","getStats","logs","getSyncLogs","isOnline","pendingOperations","recentLogs","syncManager"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/syncManager.js"],"sourcesContent":["/**\r\n * 🔄 SYNC MANAGER - Gerenciador de Sincronização\r\n * ===============================================\r\n * Sincroniza dados locais (IndexedDB) com Firebase\r\n * \r\n * ESTRATÉGIA:\r\n * - IndexedDB é a fonte primária (single source of truth)\r\n * - Firebase é backup/sincronização\r\n * - Conflitos resolvidos por timestamp (mais recente ganha)\r\n * - Sincronização automática a cada 30 segundos\r\n * - Retry com backoff exponencial\r\n */\r\n\r\nimport { db } from '../firebase';\r\nimport { \r\n  collection, \r\n  doc, \r\n  getDoc,\r\n  getDocs,\r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  serverTimestamp \r\n} from '../firebase';\r\nimport unifiedStorage from './unifiedStorage';\r\n\r\nconst SYNC_INTERVAL = 30000; // 30 segundos\r\nconst MAX_RETRIES = 5;\r\nconst INITIAL_BACKOFF = 1000; // 1 segundo\r\n\r\nclass SyncManager {\r\n  constructor() {\r\n    this.isSyncing = false;\r\n    this.syncIntervalId = null;\r\n    this.listeners = new Set();\r\n    \r\n    // Monitor de conectividade\r\n    this.setupConnectivityMonitor();\r\n    \r\n    // Inicia sincronização automática\r\n    this.startAutoSync();\r\n    \r\n    console.log('🔄 SyncManager inicializado');\r\n  }\r\n\r\n  /**\r\n   * 🌐 Monitor de conectividade\r\n   */\r\n  setupConnectivityMonitor() {\r\n    window.addEventListener('online', () => {\r\n      console.log('🌐 Online! Iniciando sincronização...');\r\n      this.emit('online');\r\n      this.syncNow();\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      console.log('📴 Offline - Modo local ativado');\r\n      this.emit('offline');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ⏰ Inicia sincronização automática\r\n   */\r\n  startAutoSync() {\r\n    if (this.syncIntervalId) return;\r\n\r\n    this.syncIntervalId = setInterval(() => {\r\n      if (navigator.onLine && !this.isSyncing) {\r\n        this.syncPending();\r\n      }\r\n    }, SYNC_INTERVAL);\r\n\r\n    console.log('✅ Auto-sync ativado (30s)');\r\n  }\r\n\r\n  /**\r\n   * ⏸️ Para sincronização automática\r\n   */\r\n  stopAutoSync() {\r\n    if (this.syncIntervalId) {\r\n      clearInterval(this.syncIntervalId);\r\n      this.syncIntervalId = null;\r\n      console.log('⏸️ Auto-sync desativado');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🔔 Sistema de eventos\r\n   */\r\n  on(event, callback) {\r\n    this.listeners.add({ event, callback });\r\n  }\r\n\r\n  emit(event, data) {\r\n    this.listeners.forEach(listener => {\r\n      if (listener.event === event) {\r\n        listener.callback(data);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🚀 Sincroniza AGORA (manual)\r\n   */\r\n  async syncNow() {\r\n    if (this.isSyncing) {\r\n      console.log('⏳ Sincronização já em andamento...');\r\n      return;\r\n    }\r\n\r\n    if (!navigator.onLine) {\r\n      console.log('📴 Offline - sincronização adiada');\r\n      return;\r\n    }\r\n\r\n    console.log('🔄 Iniciando sincronização manual...');\r\n    await this.syncPending();\r\n  }\r\n\r\n  /**\r\n   * 🔄 Sincroniza operações pendentes\r\n   */\r\n  async syncPending() {\r\n    if (this.isSyncing) return;\r\n    \r\n    this.isSyncing = true;\r\n    this.emit('syncStart');\r\n\r\n    try {\r\n      const operations = await unifiedStorage.getPendingSyncOperations();\r\n      \r\n      if (operations.length === 0) {\r\n        console.log('✅ Nenhuma operação pendente');\r\n        this.isSyncing = false;\r\n        return;\r\n      }\r\n\r\n      console.log(`🔄 Sincronizando ${operations.length} operações...`);\r\n      \r\n      let successCount = 0;\r\n      let failCount = 0;\r\n\r\n      for (const operation of operations) {\r\n        try {\r\n          // Marca como processando\r\n          await unifiedStorage.updateSyncOperation(operation.id, {\r\n            status: 'processing'\r\n          });\r\n\r\n          // Executa operação\r\n          await this.executeOperation(operation);\r\n\r\n          // Remove da fila\r\n          await unifiedStorage.removeSyncOperation(operation.id);\r\n          \r\n          successCount++;\r\n          console.log(`✅ Sincronizado: ${operation.type}`);\r\n\r\n        } catch (error) {\r\n          console.error(`❌ Falha ao sincronizar ${operation.type}:`, error);\r\n          \r\n          // Incrementa tentativas\r\n          const retries = operation.retries + 1;\r\n          \r\n          if (retries >= MAX_RETRIES) {\r\n            // Após 5 tentativas, marca como falha permanente\r\n            await unifiedStorage.updateSyncOperation(operation.id, {\r\n              status: 'failed',\r\n              retries,\r\n              lastError: error.message\r\n            });\r\n            failCount++;\r\n          } else {\r\n            // Volta para pending com backoff\r\n            await unifiedStorage.updateSyncOperation(operation.id, {\r\n              status: 'pending',\r\n              retries,\r\n              lastError: error.message,\r\n              nextRetry: Date.now() + (INITIAL_BACKOFF * Math.pow(2, retries))\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Log de sincronização\r\n      await unifiedStorage.addSyncLog({\r\n        operation: 'SYNC_BATCH',\r\n        itemsSynced: successCount,\r\n        itemsFailed: failCount,\r\n        totalOperations: operations.length\r\n      });\r\n\r\n      console.log(`✅ Sincronização concluída: ${successCount} sucesso, ${failCount} falhas`);\r\n      this.emit('syncComplete', { successCount, failCount });\r\n\r\n    } catch (error) {\r\n      console.error('❌ Erro na sincronização:', error);\r\n      this.emit('syncError', error);\r\n    } finally {\r\n      this.isSyncing = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ⚡ Executa operação no Firebase\r\n   */\r\n  async executeOperation(operation) {\r\n    const { type, entityType, entityId, data } = operation;\r\n\r\n    switch (type) {\r\n      case 'CREATE_DECK':\r\n        return await this.createDeckOnFirebase(data);\r\n      \r\n      case 'UPDATE_DECK':\r\n        return await this.updateDeckOnFirebase(entityId, data);\r\n      \r\n      case 'DELETE_DECK':\r\n        return await this.deleteDeckOnFirebase(entityId);\r\n      \r\n      case 'CREATE_CARD':\r\n        return await this.createCardOnFirebase(data);\r\n      \r\n      case 'UPDATE_CARD':\r\n        return await this.updateCardOnFirebase(entityId, data);\r\n      \r\n      case 'DELETE_CARD':\r\n        return await this.deleteCardOnFirebase(entityId);\r\n      \r\n      default:\r\n        throw new Error(`Tipo de operação desconhecido: ${type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🎴 Cria deck no Firebase\r\n   */\r\n  async createDeckOnFirebase(deckData) {\r\n    try {\r\n      // Remove campos internos antes de enviar\r\n      const { _synced, _pending, _localChanges, _version, _updatedAt, ...cleanData } = deckData;\r\n\r\n      const docRef = await addDoc(collection(db, 'decks'), {\r\n        ...cleanData,\r\n        created_at: serverTimestamp(),\r\n        updated_at: serverTimestamp()\r\n      });\r\n\r\n      // Atualiza ID local para ID do Firebase\r\n      const localDeck = await unifiedStorage.getDeck(deckData.id);\r\n      if (localDeck) {\r\n        await unifiedStorage.deleteDeck(deckData.id);\r\n        await unifiedStorage.saveDeck({\r\n          ...localDeck,\r\n          id: docRef.id\r\n        }, { synced: true });\r\n      }\r\n\r\n      console.log('✅ Deck criado no Firebase:', docRef.id);\r\n      return docRef.id;\r\n\r\n    } catch (error) {\r\n      // Se for quota excedida, não retry\r\n      if (error.code === 'resource-exhausted') {\r\n        console.log('⚠️ Quota do Firebase excedida - operação adiada');\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ✏️ Atualiza deck no Firebase\r\n   */\r\n  async updateDeckOnFirebase(deckId, updates) {\r\n    try {\r\n      // Remove campos internos\r\n      const { _synced, _pending, _localChanges, _version, _updatedAt, ...cleanData } = updates;\r\n\r\n      const docRef = doc(db, 'decks', deckId);\r\n      await updateDoc(docRef, {\r\n        ...cleanData,\r\n        updated_at: serverTimestamp()\r\n      });\r\n\r\n      // Marca como sincronizado localmente\r\n      const localDeck = await unifiedStorage.getDeck(deckId);\r\n      if (localDeck) {\r\n        await unifiedStorage.saveDeck(localDeck, { synced: true });\r\n      }\r\n\r\n      console.log('✅ Deck atualizado no Firebase:', deckId);\r\n\r\n    } catch (error) {\r\n      if (error.code === 'resource-exhausted') {\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🗑️ Deleta deck no Firebase\r\n   */\r\n  async deleteDeckOnFirebase(deckId) {\r\n    try {\r\n      const docRef = doc(db, 'decks', deckId);\r\n      await deleteDoc(docRef);\r\n      console.log('✅ Deck deletado no Firebase:', deckId);\r\n\r\n    } catch (error) {\r\n      if (error.code === 'resource-exhausted') {\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🎴 Cria carta no Firebase\r\n   */\r\n  async createCardOnFirebase(cardData) {\r\n    try {\r\n      const { _synced, _pending, _version, _updatedAt, ...cleanData } = cardData;\r\n\r\n      const docRef = await addDoc(collection(db, 'cards'), {\r\n        ...cleanData,\r\n        created_at: serverTimestamp()\r\n      });\r\n\r\n      // Atualiza ID local\r\n      const localCard = await unifiedStorage.getCard(cardData.id);\r\n      if (localCard) {\r\n        await unifiedStorage.deleteCard(cardData.id);\r\n        await unifiedStorage.saveCard({\r\n          ...localCard,\r\n          id: docRef.id\r\n        }, { synced: true });\r\n      }\r\n\r\n      console.log('✅ Carta criada no Firebase:', docRef.id);\r\n      return docRef.id;\r\n\r\n    } catch (error) {\r\n      if (error.code === 'resource-exhausted') {\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ✏️ Atualiza carta no Firebase\r\n   */\r\n  async updateCardOnFirebase(cardId, updates) {\r\n    try {\r\n      const { _synced, _pending, _version, _updatedAt, ...cleanData } = updates;\r\n\r\n      const docRef = doc(db, 'cards', cardId);\r\n      await updateDoc(docRef, cleanData);\r\n\r\n      // Marca como sincronizado\r\n      const localCard = await unifiedStorage.getCard(cardId);\r\n      if (localCard) {\r\n        await unifiedStorage.saveCard(localCard, { synced: true });\r\n      }\r\n\r\n      console.log('✅ Carta atualizada no Firebase:', cardId);\r\n\r\n    } catch (error) {\r\n      if (error.code === 'resource-exhausted') {\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🗑️ Deleta carta no Firebase\r\n   */\r\n  async deleteCardOnFirebase(cardId) {\r\n    try {\r\n      const docRef = doc(db, 'cards', cardId);\r\n      await deleteDoc(docRef);\r\n      console.log('✅ Carta deletada no Firebase:', cardId);\r\n\r\n    } catch (error) {\r\n      if (error.code === 'resource-exhausted') {\r\n        throw new Error('QUOTA_EXCEEDED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 🔄 Merge com dados do Firebase (pull)\r\n   */\r\n  async pullFromFirebase(userId) {\r\n    if (!navigator.onLine) {\r\n      console.log('📴 Offline - pull adiado');\r\n      return;\r\n    }\r\n\r\n    console.log('⬇️ Baixando dados do Firebase...');\r\n\r\n    try {\r\n      // Busca decks do Firebase\r\n      const decksQuery = query(\r\n        collection(db, 'decks'),\r\n        where('userId', '==', userId)\r\n      );\r\n      const decksSnapshot = await getDocs(decksQuery);\r\n\r\n      for (const docSnapshot of decksSnapshot.docs) {\r\n        const firebaseDeck = { id: docSnapshot.id, ...docSnapshot.data() };\r\n        const localDeck = await unifiedStorage.getDeck(docSnapshot.id);\r\n\r\n        if (!localDeck) {\r\n          // Não existe localmente - salva\r\n          await unifiedStorage.saveDeck(firebaseDeck, { synced: true });\r\n          console.log('⬇️ Deck baixado:', docSnapshot.id);\r\n        } else {\r\n          // Existe localmente - resolve conflito\r\n          await this.resolveConflict('deck', localDeck, firebaseDeck);\r\n        }\r\n      }\r\n\r\n      // Busca cartas (apenas dos decks sincronizados)\r\n      const deckIds = decksSnapshot.docs.map(d => d.id);\r\n      for (const deckId of deckIds) {\r\n        const cardsQuery = query(\r\n          collection(db, 'cards'),\r\n          where('deck_id', '==', deckId)\r\n        );\r\n        const cardsSnapshot = await getDocs(cardsQuery);\r\n\r\n        for (const cardDoc of cardsSnapshot.docs) {\r\n          const firebaseCard = { id: cardDoc.id, ...cardDoc.data() };\r\n          const localCard = await unifiedStorage.getCard(cardDoc.id);\r\n\r\n          if (!localCard) {\r\n            await unifiedStorage.saveCard(firebaseCard, { synced: true });\r\n            console.log('⬇️ Carta baixada:', cardDoc.id);\r\n          } else {\r\n            await this.resolveConflict('card', localCard, firebaseCard);\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('✅ Pull do Firebase concluído');\r\n      this.emit('pullComplete');\r\n\r\n    } catch (error) {\r\n      console.error('❌ Erro no pull do Firebase:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ⚖️ Resolve conflito entre dados locais e Firebase\r\n   * Estratégia: Timestamp - mais recente ganha\r\n   */\r\n  async resolveConflict(entityType, localData, firebaseData) {\r\n    const localTimestamp = localData._updatedAt || localData.updated_at?.toMillis?.() || 0;\r\n    const firebaseTimestamp = firebaseData.updated_at?.toMillis?.() || firebaseData._updatedAt || 0;\r\n\r\n    console.log(`⚖️ Resolvendo conflito (${entityType}):`, {\r\n      local: new Date(localTimestamp),\r\n      firebase: new Date(firebaseTimestamp)\r\n    });\r\n\r\n    // Se local tem mudanças não sincronizadas, mantém local\r\n    if (localData._pending && localData._pending.length > 0) {\r\n      console.log('✅ Local tem mudanças pendentes - mantém local');\r\n      return;\r\n    }\r\n\r\n    // Se Firebase é mais recente, usa Firebase\r\n    if (firebaseTimestamp > localTimestamp) {\r\n      console.log('✅ Firebase mais recente - atualiza local');\r\n      \r\n      if (entityType === 'deck') {\r\n        await unifiedStorage.saveDeck(firebaseData, { synced: true });\r\n      } else if (entityType === 'card') {\r\n        await unifiedStorage.saveCard(firebaseData, { synced: true });\r\n      }\r\n    } else {\r\n      console.log('✅ Local mais recente - mantém local');\r\n      // Local já está atualizado, apenas marca como sincronizado\r\n      if (entityType === 'deck') {\r\n        await unifiedStorage.saveDeck(localData, { synced: true });\r\n      } else if (entityType === 'card') {\r\n        await unifiedStorage.saveCard(localData, { synced: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 📊 Status da sincronização\r\n   */\r\n  async getStatus() {\r\n    const pending = await unifiedStorage.getPendingSyncOperations();\r\n    const stats = await unifiedStorage.getStats();\r\n    const logs = await unifiedStorage.getSyncLogs(10);\r\n\r\n    return {\r\n      isOnline: navigator.onLine,\r\n      isSyncing: this.isSyncing,\r\n      pendingOperations: pending.length,\r\n      stats,\r\n      recentLogs: logs\r\n    };\r\n  }\r\n}\r\n\r\n// Singleton\r\nconst syncManager = new SyncManager();\r\n\r\n// Expõe no window para debug\r\nif (typeof window !== 'undefined') {\r\n  window.syncManager = syncManager;\r\n  console.log('🔄 SyncManager disponível em window.syncManager');\r\n}\r\n\r\nexport default syncManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}