{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport VectorIndexApi from './VectorIndexApi';\nimport VectorDataApi from './VectorDataApi';\nimport VectorBucketApi from './VectorBucketApi';\n/**\n * Main client for interacting with S3 Vectors API\n * Provides access to bucket, index, and vector data operations\n *\n * **Usage Patterns:**\n *\n * 1. **Via StorageClient (recommended for most use cases):**\n * ```typescript\n * import { StorageClient } from '@supabase/storage-js'\n *\n * const storageClient = new StorageClient(url, headers)\n * const vectors = storageClient.vectors\n *\n * // Use vector operations\n * await vectors.createBucket('embeddings-prod')\n * const bucket = vectors.from('embeddings-prod')\n * await bucket.createIndex({ ... })\n * ```\n *\n * 2. **Standalone (for vector-only applications):**\n * ```typescript\n * import { StorageVectorsClient } from '@supabase/storage-js'\n *\n * const vectorsClient = new StorageVectorsClient('https://api.example.com', {\n *   headers: { 'Authorization': 'Bearer token' }\n * })\n *\n * // Access bucket operations\n * await vectorsClient.createBucket('embeddings-prod')\n *\n * // Access index operations via buckets\n * const bucket = vectorsClient.from('embeddings-prod')\n * await bucket.createIndex({\n *   indexName: 'documents',\n *   dataType: 'float32',\n *   dimension: 1536,\n *   distanceMetric: 'cosine'\n * })\n *\n * // Access vector operations via index\n * const index = bucket.index('documents')\n * await index.putVectors({\n *   vectors: [\n *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n *   ]\n * })\n *\n * // Query similar vectors\n * const { data } = await index.queryVectors({\n *   queryVector: { float32: [...] },\n *   topK: 5,\n *   returnDistance: true\n * })\n * ```\n */\nexport class StorageVectorsClient extends VectorBucketApi {\n  constructor(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(url, options.headers || {}, options.fetch);\n  }\n  /**\n   * Access operations for a specific vector bucket\n   * Returns a scoped client for index and vector operations within the bucket\n   *\n   * @param vectorBucketName - Name of the vector bucket\n   * @returns Bucket-scoped client with index and vector operations\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   *\n   * // Create an index in this bucket\n   * await bucket.createIndex({\n   *   indexName: 'documents-openai',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine'\n   * })\n   *\n   * // List indexes in this bucket\n   * const { data } = await bucket.listIndexes()\n   * ```\n   */\n  from(vectorBucketName) {\n    return new VectorBucketScope(this.url, this.headers, vectorBucketName, this.fetch);\n  }\n}\n/**\n * Scoped client for operations within a specific vector bucket\n * Provides index management and access to vector operations\n */\nexport class VectorBucketScope extends VectorIndexApi {\n  constructor(url, headers, vectorBucketName, fetch) {\n    super(url, headers, fetch);\n    this.vectorBucketName = vectorBucketName;\n  }\n  /**\n   * Creates a new vector index in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param options - Index configuration (vectorBucketName is automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * await bucket.createIndex({\n   *   indexName: 'documents-openai',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine',\n   *   metadataConfiguration: {\n   *     nonFilterableMetadataKeys: ['raw_text']\n   *   }\n   * })\n   * ```\n   */\n  createIndex(options) {\n    const _super = Object.create(null, {\n      createIndex: {\n        get: () => super.createIndex\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.createIndex.call(this, Object.assign(Object.assign({}, options), {\n        vectorBucketName: this.vectorBucketName\n      }));\n    });\n  }\n  /**\n   * Lists indexes in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param options - Listing options (vectorBucketName is automatically set)\n   * @returns Promise with list of indexes or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * const { data } = await bucket.listIndexes({ prefix: 'documents-' })\n   * ```\n   */\n  listIndexes() {\n    const _super = Object.create(null, {\n      listIndexes: {\n        get: () => super.listIndexes\n      }\n    });\n    return __awaiter(this, arguments, void 0, function () {\n      var _this = this;\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return function* () {\n        return _super.listIndexes.call(_this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: _this.vectorBucketName\n        }));\n      }();\n    });\n  }\n  /**\n   * Retrieves metadata for a specific index in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param indexName - Name of the index to retrieve\n   * @returns Promise with index metadata or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * const { data } = await bucket.getIndex('documents-openai')\n   * console.log('Dimension:', data?.index.dimension)\n   * ```\n   */\n  getIndex(indexName) {\n    const _super = Object.create(null, {\n      getIndex: {\n        get: () => super.getIndex\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getIndex.call(this, this.vectorBucketName, indexName);\n    });\n  }\n  /**\n   * Deletes an index from this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param indexName - Name of the index to delete\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * await bucket.deleteIndex('old-index')\n   * ```\n   */\n  deleteIndex(indexName) {\n    const _super = Object.create(null, {\n      deleteIndex: {\n        get: () => super.deleteIndex\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.deleteIndex.call(this, this.vectorBucketName, indexName);\n    });\n  }\n  /**\n   * Access operations for a specific index within this bucket\n   * Returns a scoped client for vector data operations\n   *\n   * @param indexName - Name of the index\n   * @returns Index-scoped client with vector data operations\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   *\n   * // Insert vectors\n   * await index.putVectors({\n   *   vectors: [\n   *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n   *   ]\n   * })\n   *\n   * // Query similar vectors\n   * const { data } = await index.queryVectors({\n   *   queryVector: { float32: [...] },\n   *   topK: 5\n   * })\n   * ```\n   */\n  index(indexName) {\n    return new VectorIndexScope(this.url, this.headers, this.vectorBucketName, indexName, this.fetch);\n  }\n}\n/**\n * Scoped client for operations within a specific vector index\n * Provides vector data operations (put, get, list, query, delete)\n */\nexport class VectorIndexScope extends VectorDataApi {\n  constructor(url, headers, vectorBucketName, indexName, fetch) {\n    super(url, headers, fetch);\n    this.vectorBucketName = vectorBucketName;\n    this.indexName = indexName;\n  }\n  /**\n   * Inserts or updates vectors in this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Vector insertion options (bucket and index names automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * await index.putVectors({\n   *   vectors: [\n   *     {\n   *       key: 'doc-1',\n   *       data: { float32: [0.1, 0.2, ...] },\n   *       metadata: { title: 'Introduction', page: 1 }\n   *     }\n   *   ]\n   * })\n   * ```\n   */\n  putVectors(options) {\n    const _super = Object.create(null, {\n      putVectors: {\n        get: () => super.putVectors\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.putVectors.call(this, Object.assign(Object.assign({}, options), {\n        vectorBucketName: this.vectorBucketName,\n        indexName: this.indexName\n      }));\n    });\n  }\n  /**\n   * Retrieves vectors by keys from this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Vector retrieval options (bucket and index names automatically set)\n   * @returns Promise with array of vectors or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.getVectors({\n   *   keys: ['doc-1', 'doc-2'],\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  getVectors(options) {\n    const _super = Object.create(null, {\n      getVectors: {\n        get: () => super.getVectors\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getVectors.call(this, Object.assign(Object.assign({}, options), {\n        vectorBucketName: this.vectorBucketName,\n        indexName: this.indexName\n      }));\n    });\n  }\n  /**\n   * Lists vectors in this index with pagination\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Listing options (bucket and index names automatically set)\n   * @returns Promise with array of vectors and pagination token\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.listVectors({\n   *   maxResults: 500,\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  listVectors() {\n    const _super = Object.create(null, {\n      listVectors: {\n        get: () => super.listVectors\n      }\n    });\n    return __awaiter(this, arguments, void 0, function () {\n      var _this2 = this;\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return function* () {\n        return _super.listVectors.call(_this2, Object.assign(Object.assign({}, options), {\n          vectorBucketName: _this2.vectorBucketName,\n          indexName: _this2.indexName\n        }));\n      }();\n    });\n  }\n  /**\n   * Queries for similar vectors in this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Query options (bucket and index names automatically set)\n   * @returns Promise with array of similar vectors ordered by distance\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.queryVectors({\n   *   queryVector: { float32: [0.1, 0.2, ...] },\n   *   topK: 5,\n   *   filter: { category: 'technical' },\n   *   returnDistance: true,\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  queryVectors(options) {\n    const _super = Object.create(null, {\n      queryVectors: {\n        get: () => super.queryVectors\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.queryVectors.call(this, Object.assign(Object.assign({}, options), {\n        vectorBucketName: this.vectorBucketName,\n        indexName: this.indexName\n      }));\n    });\n  }\n  /**\n   * Deletes vectors by keys from this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Deletion options (bucket and index names automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * await index.deleteVectors({\n   *   keys: ['doc-1', 'doc-2', 'doc-3']\n   * })\n   * ```\n   */\n  deleteVectors(options) {\n    const _super = Object.create(null, {\n      deleteVectors: {\n        get: () => super.deleteVectors\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.deleteVectors.call(this, Object.assign(Object.assign({}, options), {\n        vectorBucketName: this.vectorBucketName,\n        indexName: this.indexName\n      }));\n    });\n  }\n}","map":{"version":3,"names":["VectorIndexApi","VectorDataApi","VectorBucketApi","StorageVectorsClient","constructor","url","options","arguments","length","undefined","headers","fetch","from","vectorBucketName","VectorBucketScope","createIndex","_super","call","Object","assign","listIndexes","_this","getIndex","indexName","deleteIndex","index","VectorIndexScope","putVectors","getVectors","listVectors","_this2","queryVectors","deleteVectors"],"sources":["C:\\Users\\Lucas Araujo\\Desktop\\supabase\\DeckMaster\\node_modules\\@supabase\\storage-js\\src\\lib\\vectors\\StorageVectorsClient.ts"],"sourcesContent":["import VectorIndexApi, { CreateIndexOptions } from './VectorIndexApi'\nimport VectorDataApi from './VectorDataApi'\nimport { Fetch } from './fetch'\nimport VectorBucketApi from './VectorBucketApi'\nimport {\n  DeleteVectorsOptions,\n  GetVectorsOptions,\n  ListIndexesOptions,\n  ListVectorsOptions,\n  PutVectorsOptions,\n  QueryVectorsOptions,\n} from './types'\n\n/**\n * Configuration options for the Storage Vectors client\n */\nexport interface StorageVectorsClientOptions {\n  /**\n   * Custom headers to include in all requests\n   */\n  headers?: { [key: string]: string }\n  /**\n   * Custom fetch implementation (optional)\n   * Useful for testing or custom request handling\n   */\n  fetch?: Fetch\n}\n\n/**\n * Main client for interacting with S3 Vectors API\n * Provides access to bucket, index, and vector data operations\n *\n * **Usage Patterns:**\n *\n * 1. **Via StorageClient (recommended for most use cases):**\n * ```typescript\n * import { StorageClient } from '@supabase/storage-js'\n *\n * const storageClient = new StorageClient(url, headers)\n * const vectors = storageClient.vectors\n *\n * // Use vector operations\n * await vectors.createBucket('embeddings-prod')\n * const bucket = vectors.from('embeddings-prod')\n * await bucket.createIndex({ ... })\n * ```\n *\n * 2. **Standalone (for vector-only applications):**\n * ```typescript\n * import { StorageVectorsClient } from '@supabase/storage-js'\n *\n * const vectorsClient = new StorageVectorsClient('https://api.example.com', {\n *   headers: { 'Authorization': 'Bearer token' }\n * })\n *\n * // Access bucket operations\n * await vectorsClient.createBucket('embeddings-prod')\n *\n * // Access index operations via buckets\n * const bucket = vectorsClient.from('embeddings-prod')\n * await bucket.createIndex({\n *   indexName: 'documents',\n *   dataType: 'float32',\n *   dimension: 1536,\n *   distanceMetric: 'cosine'\n * })\n *\n * // Access vector operations via index\n * const index = bucket.index('documents')\n * await index.putVectors({\n *   vectors: [\n *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n *   ]\n * })\n *\n * // Query similar vectors\n * const { data } = await index.queryVectors({\n *   queryVector: { float32: [...] },\n *   topK: 5,\n *   returnDistance: true\n * })\n * ```\n */\nexport class StorageVectorsClient extends VectorBucketApi {\n  constructor(url: string, options: StorageVectorsClientOptions = {}) {\n    super(url, options.headers || {}, options.fetch)\n  }\n\n  /**\n   * Access operations for a specific vector bucket\n   * Returns a scoped client for index and vector operations within the bucket\n   *\n   * @param vectorBucketName - Name of the vector bucket\n   * @returns Bucket-scoped client with index and vector operations\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   *\n   * // Create an index in this bucket\n   * await bucket.createIndex({\n   *   indexName: 'documents-openai',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine'\n   * })\n   *\n   * // List indexes in this bucket\n   * const { data } = await bucket.listIndexes()\n   * ```\n   */\n  from(vectorBucketName: string): VectorBucketScope {\n    return new VectorBucketScope(this.url, this.headers, vectorBucketName, this.fetch)\n  }\n}\n\n/**\n * Scoped client for operations within a specific vector bucket\n * Provides index management and access to vector operations\n */\nexport class VectorBucketScope extends VectorIndexApi {\n  private vectorBucketName: string\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string },\n    vectorBucketName: string,\n    fetch?: Fetch\n  ) {\n    super(url, headers, fetch)\n    this.vectorBucketName = vectorBucketName\n  }\n\n  /**\n   * Creates a new vector index in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param options - Index configuration (vectorBucketName is automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * await bucket.createIndex({\n   *   indexName: 'documents-openai',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine',\n   *   metadataConfiguration: {\n   *     nonFilterableMetadataKeys: ['raw_text']\n   *   }\n   * })\n   * ```\n   */\n  override async createIndex(options: Omit<CreateIndexOptions, 'vectorBucketName'>) {\n    return super.createIndex({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n    })\n  }\n\n  /**\n   * Lists indexes in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param options - Listing options (vectorBucketName is automatically set)\n   * @returns Promise with list of indexes or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * const { data } = await bucket.listIndexes({ prefix: 'documents-' })\n   * ```\n   */\n  override async listIndexes(options: Omit<ListIndexesOptions, 'vectorBucketName'> = {}) {\n    return super.listIndexes({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n    })\n  }\n\n  /**\n   * Retrieves metadata for a specific index in this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param indexName - Name of the index to retrieve\n   * @returns Promise with index metadata or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * const { data } = await bucket.getIndex('documents-openai')\n   * console.log('Dimension:', data?.index.dimension)\n   * ```\n   */\n  override async getIndex(indexName: string) {\n    return super.getIndex(this.vectorBucketName, indexName)\n  }\n\n  /**\n   * Deletes an index from this bucket\n   * Convenience method that automatically includes the bucket name\n   *\n   * @param indexName - Name of the index to delete\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const bucket = client.bucket('embeddings-prod')\n   * await bucket.deleteIndex('old-index')\n   * ```\n   */\n  override async deleteIndex(indexName: string) {\n    return super.deleteIndex(this.vectorBucketName, indexName)\n  }\n\n  /**\n   * Access operations for a specific index within this bucket\n   * Returns a scoped client for vector data operations\n   *\n   * @param indexName - Name of the index\n   * @returns Index-scoped client with vector data operations\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   *\n   * // Insert vectors\n   * await index.putVectors({\n   *   vectors: [\n   *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n   *   ]\n   * })\n   *\n   * // Query similar vectors\n   * const { data } = await index.queryVectors({\n   *   queryVector: { float32: [...] },\n   *   topK: 5\n   * })\n   * ```\n   */\n  index(indexName: string): VectorIndexScope {\n    return new VectorIndexScope(\n      this.url,\n      this.headers,\n      this.vectorBucketName,\n      indexName,\n      this.fetch\n    )\n  }\n}\n\n/**\n * Scoped client for operations within a specific vector index\n * Provides vector data operations (put, get, list, query, delete)\n */\nexport class VectorIndexScope extends VectorDataApi {\n  private vectorBucketName: string\n  private indexName: string\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string },\n    vectorBucketName: string,\n    indexName: string,\n    fetch?: Fetch\n  ) {\n    super(url, headers, fetch)\n    this.vectorBucketName = vectorBucketName\n    this.indexName = indexName\n  }\n\n  /**\n   * Inserts or updates vectors in this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Vector insertion options (bucket and index names automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * await index.putVectors({\n   *   vectors: [\n   *     {\n   *       key: 'doc-1',\n   *       data: { float32: [0.1, 0.2, ...] },\n   *       metadata: { title: 'Introduction', page: 1 }\n   *     }\n   *   ]\n   * })\n   * ```\n   */\n  override async putVectors(options: Omit<PutVectorsOptions, 'vectorBucketName' | 'indexName'>) {\n    return super.putVectors({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n      indexName: this.indexName,\n    })\n  }\n\n  /**\n   * Retrieves vectors by keys from this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Vector retrieval options (bucket and index names automatically set)\n   * @returns Promise with array of vectors or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.getVectors({\n   *   keys: ['doc-1', 'doc-2'],\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  override async getVectors(options: Omit<GetVectorsOptions, 'vectorBucketName' | 'indexName'>) {\n    return super.getVectors({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n      indexName: this.indexName,\n    })\n  }\n\n  /**\n   * Lists vectors in this index with pagination\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Listing options (bucket and index names automatically set)\n   * @returns Promise with array of vectors and pagination token\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.listVectors({\n   *   maxResults: 500,\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  override async listVectors(\n    options: Omit<ListVectorsOptions, 'vectorBucketName' | 'indexName'> = {}\n  ) {\n    return super.listVectors({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n      indexName: this.indexName,\n    })\n  }\n\n  /**\n   * Queries for similar vectors in this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Query options (bucket and index names automatically set)\n   * @returns Promise with array of similar vectors ordered by distance\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * const { data } = await index.queryVectors({\n   *   queryVector: { float32: [0.1, 0.2, ...] },\n   *   topK: 5,\n   *   filter: { category: 'technical' },\n   *   returnDistance: true,\n   *   returnMetadata: true\n   * })\n   * ```\n   */\n  override async queryVectors(\n    options: Omit<QueryVectorsOptions, 'vectorBucketName' | 'indexName'>\n  ) {\n    return super.queryVectors({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n      indexName: this.indexName,\n    })\n  }\n\n  /**\n   * Deletes vectors by keys from this index\n   * Convenience method that automatically includes bucket and index names\n   *\n   * @param options - Deletion options (bucket and index names automatically set)\n   * @returns Promise with empty response on success or error\n   *\n   * @example\n   * ```typescript\n   * const index = client.bucket('embeddings-prod').index('documents-openai')\n   * await index.deleteVectors({\n   *   keys: ['doc-1', 'doc-2', 'doc-3']\n   * })\n   * ```\n   */\n  override async deleteVectors(\n    options: Omit<DeleteVectorsOptions, 'vectorBucketName' | 'indexName'>\n  ) {\n    return super.deleteVectors({\n      ...options,\n      vectorBucketName: this.vectorBucketName,\n      indexName: this.indexName,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}