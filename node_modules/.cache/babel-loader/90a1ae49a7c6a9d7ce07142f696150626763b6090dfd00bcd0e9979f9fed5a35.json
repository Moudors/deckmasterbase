{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * 🗄️ UNIFIED STORAGE - IndexedDB como Single Source of Truth\r\n * ===========================================================\r\n * Sistema unificado de armazenamento offline-first\r\n * \r\n * DATABASES:\r\n * - deckmaster_unified (dados principais)\r\n * \r\n * STORES:\r\n * 1. user_profile - Perfil do usuário\r\n * 2. decks - Todos os decks\r\n * 3. cards - Todas as cartas\r\n * 4. sync_queue - Operações pendentes\r\n * 5. sync_log - Histórico de sincronizações\r\n */const DB_NAME='deckmaster_unified';const DB_VERSION=1;const STORES={USER_PROFILE:'user_profile',DECKS:'decks',CARDS:'cards',SYNC_QUEUE:'sync_queue',SYNC_LOG:'sync_log'};class UnifiedStorage{constructor(){this.db=null;this.isReady=false;this.initPromise=this.init();}/**\r\n   * 🔧 Inicializa IndexedDB\r\n   */async init(){if(this.isReady)return this.db;return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onerror=()=>{console.error('❌ Erro ao abrir IndexedDB:',request.error);reject(request.error);};request.onsuccess=()=>{this.db=request.result;this.isReady=true;console.log('✅ UnifiedStorage inicializado');resolve(this.db);};request.onupgradeneeded=event=>{const db=event.target.result;// Store 1: user_profile (keyPath: userId)\nif(!db.objectStoreNames.contains(STORES.USER_PROFILE)){const userStore=db.createObjectStore(STORES.USER_PROFILE,{keyPath:'userId'});userStore.createIndex('email','email',{unique:false});console.log('✅ Store user_profile criado');}// Store 2: decks (keyPath: id)\nif(!db.objectStoreNames.contains(STORES.DECKS)){const deckStore=db.createObjectStore(STORES.DECKS,{keyPath:'id'});deckStore.createIndex('userId','userId',{unique:false});deckStore.createIndex('_synced','_synced',{unique:false});deckStore.createIndex('_lastSync','_lastSync',{unique:false});console.log('✅ Store decks criado');}// Store 3: cards (keyPath: id)\nif(!db.objectStoreNames.contains(STORES.CARDS)){const cardStore=db.createObjectStore(STORES.CARDS,{keyPath:'id'});cardStore.createIndex('deck_id','deck_id',{unique:false});cardStore.createIndex('_synced','_synced',{unique:false});console.log('✅ Store cards criado');}// Store 4: sync_queue (keyPath: id)\nif(!db.objectStoreNames.contains(STORES.SYNC_QUEUE)){const queueStore=db.createObjectStore(STORES.SYNC_QUEUE,{keyPath:'id'});queueStore.createIndex('timestamp','timestamp',{unique:false});queueStore.createIndex('entityType','entityType',{unique:false});queueStore.createIndex('status','status',{unique:false});console.log('✅ Store sync_queue criado');}// Store 5: sync_log (keyPath: id, autoIncrement)\nif(!db.objectStoreNames.contains(STORES.SYNC_LOG)){const logStore=db.createObjectStore(STORES.SYNC_LOG,{keyPath:'id',autoIncrement:true});logStore.createIndex('timestamp','timestamp',{unique:false});console.log('✅ Store sync_log criado');}};});}/**\r\n   * 🔍 Garante que DB está pronto\r\n   */async ensureReady(){if(!this.isReady){await this.initPromise;}return this.db;}// ============================================\n// 👤 USER PROFILE\n// ============================================\n/**\r\n   * 💾 Salva perfil do usuário\r\n   */async saveUserProfile(profile){const db=await this.ensureReady();const transaction=db.transaction(STORES.USER_PROFILE,'readwrite');const store=transaction.objectStore(STORES.USER_PROFILE);const userProfile=_objectSpread({userId:profile.userId||profile.uid,username:profile.username||profile.displayName,email:profile.email,photoURL:profile.photoURL||null,_synced:true,_lastSync:Date.now(),_version:(profile._version||0)+1},profile);return new Promise((resolve,reject)=>{const request=store.put(userProfile);request.onsuccess=()=>{console.log('✅ Perfil salvo:',userProfile.userId);resolve(userProfile);};request.onerror=()=>{console.error('❌ Erro ao salvar perfil:',request.error);reject(request.error);};});}/**\r\n   * 📖 Busca perfil do usuário\r\n   */async getUserProfile(userId){const db=await this.ensureReady();const transaction=db.transaction(STORES.USER_PROFILE,'readonly');const store=transaction.objectStore(STORES.USER_PROFILE);return new Promise((resolve,reject)=>{const request=store.get(userId);request.onsuccess=()=>resolve(request.result||null);request.onerror=()=>reject(request.error);});}// ============================================\n// 🃏 DECKS\n// ============================================\n/**\r\n   * 💾 Salva deck\r\n   */async saveDeck(deck){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const db=await this.ensureReady();const transaction=db.transaction(STORES.DECKS,'readwrite');const store=transaction.objectStore(STORES.DECKS);const deckData=_objectSpread(_objectSpread({},deck),{},{_synced:options.synced!==undefined?options.synced:false,_pending:options.pending||[],_lastSync:options.synced?Date.now():deck._lastSync||0,_localChanges:options.localChanges||{},_version:(deck._version||0)+1,_updatedAt:Date.now()});return new Promise((resolve,reject)=>{const request=store.put(deckData);request.onsuccess=()=>{console.log('✅ Deck salvo:',deckData.id);resolve(deckData);};request.onerror=()=>{console.error('❌ Erro ao salvar deck:',request.error);reject(request.error);};});}/**\r\n   * 📖 Busca deck por ID\r\n   */async getDeck(deckId){const db=await this.ensureReady();const transaction=db.transaction(STORES.DECKS,'readonly');const store=transaction.objectStore(STORES.DECKS);return new Promise((resolve,reject)=>{const request=store.get(deckId);request.onsuccess=()=>resolve(request.result||null);request.onerror=()=>reject(request.error);});}/**\r\n   * 📖 Busca todos os decks do usuário\r\n   */async getUserDecks(userId){const db=await this.ensureReady();const transaction=db.transaction(STORES.DECKS,'readonly');const store=transaction.objectStore(STORES.DECKS);const index=store.index('userId');return new Promise((resolve,reject)=>{const request=index.getAll(userId);request.onsuccess=()=>resolve(request.result||[]);request.onerror=()=>reject(request.error);});}/**\r\n   * 🗑️ Deleta deck\r\n   */async deleteDeck(deckId){const db=await this.ensureReady();// Deleta deck e suas cartas em transação única\nconst transaction=db.transaction([STORES.DECKS,STORES.CARDS],'readwrite');const deckStore=transaction.objectStore(STORES.DECKS);const cardStore=transaction.objectStore(STORES.CARDS);const cardIndex=cardStore.index('deck_id');return new Promise((resolve,reject)=>{// Deleta deck\ndeckStore.delete(deckId);// Deleta todas as cartas do deck\nconst cardRequest=cardIndex.openCursor(IDBKeyRange.only(deckId));cardRequest.onsuccess=event=>{const cursor=event.target.result;if(cursor){cursor.delete();cursor.continue();}};transaction.oncomplete=()=>{console.log('✅ Deck deletado:',deckId);resolve();};transaction.onerror=()=>{console.error('❌ Erro ao deletar deck:',transaction.error);reject(transaction.error);};});}// ============================================\n// 🎴 CARDS\n// ============================================\n/**\r\n   * 💾 Salva carta\r\n   */async saveCard(card){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const db=await this.ensureReady();const transaction=db.transaction(STORES.CARDS,'readwrite');const store=transaction.objectStore(STORES.CARDS);const cardData=_objectSpread(_objectSpread({},card),{},{_synced:options.synced!==undefined?options.synced:false,_pending:options.pending||[],_lastSync:options.synced?Date.now():card._lastSync||0,_version:(card._version||0)+1,_updatedAt:Date.now()});return new Promise((resolve,reject)=>{const request=store.put(cardData);request.onsuccess=()=>{console.log('✅ Carta salva:',cardData.id);resolve(cardData);};request.onerror=()=>{console.error('❌ Erro ao salvar carta:',request.error);reject(request.error);};});}/**\r\n   * 📖 Busca carta por ID\r\n   */async getCard(cardId){const db=await this.ensureReady();const transaction=db.transaction(STORES.CARDS,'readonly');const store=transaction.objectStore(STORES.CARDS);return new Promise((resolve,reject)=>{const request=store.get(cardId);request.onsuccess=()=>resolve(request.result||null);request.onerror=()=>reject(request.error);});}/**\r\n   * 📖 Busca todas as cartas de um deck\r\n   */async getDeckCards(deckId){const db=await this.ensureReady();const transaction=db.transaction(STORES.CARDS,'readonly');const store=transaction.objectStore(STORES.CARDS);const index=store.index('deck_id');return new Promise((resolve,reject)=>{const request=index.getAll(deckId);request.onsuccess=()=>resolve(request.result||[]);request.onerror=()=>reject(request.error);});}/**\r\n   * 🗑️ Deleta carta\r\n   */async deleteCard(cardId){const db=await this.ensureReady();const transaction=db.transaction(STORES.CARDS,'readwrite');const store=transaction.objectStore(STORES.CARDS);return new Promise((resolve,reject)=>{const request=store.delete(cardId);request.onsuccess=()=>{console.log('✅ Carta deletada:',cardId);resolve();};request.onerror=()=>{console.error('❌ Erro ao deletar carta:',request.error);reject(request.error);};});}// ============================================\n// 🔄 SYNC QUEUE\n// ============================================\n/**\r\n   * ➕ Adiciona operação à fila de sincronização\r\n   */async addToSyncQueue(operation){const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_QUEUE,'readwrite');const store=transaction.objectStore(STORES.SYNC_QUEUE);const queueItem=_objectSpread({id:\"sync_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9)),timestamp:Date.now(),status:'pending',// pending, processing, completed, failed\nretries:0},operation);return new Promise((resolve,reject)=>{const request=store.add(queueItem);request.onsuccess=()=>{console.log('✅ Adicionado à fila de sync:',queueItem.id);resolve(queueItem);};request.onerror=()=>{console.error('❌ Erro ao adicionar à fila:',request.error);reject(request.error);};});}/**\r\n   * 📖 Busca operações pendentes\r\n   */async getPendingSyncOperations(){const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_QUEUE,'readonly');const store=transaction.objectStore(STORES.SYNC_QUEUE);const index=store.index('status');return new Promise((resolve,reject)=>{const request=index.getAll('pending');request.onsuccess=()=>resolve(request.result||[]);request.onerror=()=>reject(request.error);});}/**\r\n   * ✏️ Atualiza status da operação\r\n   */async updateSyncOperation(operationId,updates){const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_QUEUE,'readwrite');const store=transaction.objectStore(STORES.SYNC_QUEUE);return new Promise((resolve,reject)=>{const getRequest=store.get(operationId);getRequest.onsuccess=()=>{const operation=getRequest.result;if(!operation){reject(new Error('Operação não encontrada'));return;}const updated=_objectSpread(_objectSpread({},operation),updates);const putRequest=store.put(updated);putRequest.onsuccess=()=>resolve(updated);putRequest.onerror=()=>reject(putRequest.error);};getRequest.onerror=()=>reject(getRequest.error);});}/**\r\n   * 🗑️ Remove operação da fila\r\n   */async removeSyncOperation(operationId){const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_QUEUE,'readwrite');const store=transaction.objectStore(STORES.SYNC_QUEUE);return new Promise((resolve,reject)=>{const request=store.delete(operationId);request.onsuccess=()=>resolve();request.onerror=()=>reject(request.error);});}// ============================================\n// 📊 SYNC LOG\n// ============================================\n/**\r\n   * 📝 Adiciona entrada no log de sincronização\r\n   */async addSyncLog(logEntry){const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_LOG,'readwrite');const store=transaction.objectStore(STORES.SYNC_LOG);const log=_objectSpread({timestamp:Date.now()},logEntry);return new Promise((resolve,reject)=>{const request=store.add(log);request.onsuccess=()=>resolve(log);request.onerror=()=>reject(request.error);});}/**\r\n   * 📖 Busca últimos logs\r\n   */async getSyncLogs(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;const db=await this.ensureReady();const transaction=db.transaction(STORES.SYNC_LOG,'readonly');const store=transaction.objectStore(STORES.SYNC_LOG);const index=store.index('timestamp');return new Promise((resolve,reject)=>{const logs=[];const request=index.openCursor(null,'prev');// Ordem decrescente\nrequest.onsuccess=event=>{const cursor=event.target.result;if(cursor&&logs.length<limit){logs.push(cursor.value);cursor.continue();}else{resolve(logs);}};request.onerror=()=>reject(request.error);});}// ============================================\n// 🧹 UTILITIES\n// ============================================\n/**\r\n   * 🗑️ Limpa tudo (usar com cuidado!)\r\n   */async clearAll(){const db=await this.ensureReady();const storeNames=[STORES.USER_PROFILE,STORES.DECKS,STORES.CARDS,STORES.SYNC_QUEUE,STORES.SYNC_LOG];const transaction=db.transaction(storeNames,'readwrite');return new Promise((resolve,reject)=>{storeNames.forEach(storeName=>{transaction.objectStore(storeName).clear();});transaction.oncomplete=()=>{console.log('🗑️ Todos os dados limpos');resolve();};transaction.onerror=()=>reject(transaction.error);});}/**\r\n   * 📊 Estatísticas gerais\r\n   */async getStats(){const db=await this.ensureReady();const transaction=db.transaction([STORES.DECKS,STORES.CARDS,STORES.SYNC_QUEUE],'readonly');const deckStore=transaction.objectStore(STORES.DECKS);const cardStore=transaction.objectStore(STORES.CARDS);const queueStore=transaction.objectStore(STORES.SYNC_QUEUE);const stats=await Promise.all([new Promise(resolve=>{const request=deckStore.count();request.onsuccess=()=>resolve(request.result);}),new Promise(resolve=>{const request=cardStore.count();request.onsuccess=()=>resolve(request.result);}),new Promise(resolve=>{const request=queueStore.count();request.onsuccess=()=>resolve(request.result);})]);return{totalDecks:stats[0],totalCards:stats[1],pendingSync:stats[2]};}}// Singleton instance\nconst unifiedStorage=new UnifiedStorage();// Expõe no window para debug\nif(typeof window!=='undefined'){window.unifiedStorage=unifiedStorage;console.log('🗄️ UnifiedStorage disponível em window.unifiedStorage');}export default unifiedStorage;export{STORES};","map":{"version":3,"names":["DB_NAME","DB_VERSION","STORES","USER_PROFILE","DECKS","CARDS","SYNC_QUEUE","SYNC_LOG","UnifiedStorage","constructor","db","isReady","initPromise","init","Promise","resolve","reject","request","indexedDB","open","onerror","console","error","onsuccess","result","log","onupgradeneeded","event","target","objectStoreNames","contains","userStore","createObjectStore","keyPath","createIndex","unique","deckStore","cardStore","queueStore","logStore","autoIncrement","ensureReady","saveUserProfile","profile","transaction","store","objectStore","userProfile","_objectSpread","userId","uid","username","displayName","email","photoURL","_synced","_lastSync","Date","now","_version","put","getUserProfile","get","saveDeck","deck","options","arguments","length","undefined","deckData","synced","_pending","pending","_localChanges","localChanges","_updatedAt","id","getDeck","deckId","getUserDecks","index","getAll","deleteDeck","cardIndex","delete","cardRequest","openCursor","IDBKeyRange","only","cursor","continue","oncomplete","saveCard","card","cardData","getCard","cardId","getDeckCards","deleteCard","addToSyncQueue","operation","queueItem","concat","Math","random","toString","substr","timestamp","status","retries","add","getPendingSyncOperations","updateSyncOperation","operationId","updates","getRequest","Error","updated","putRequest","removeSyncOperation","addSyncLog","logEntry","getSyncLogs","limit","logs","push","value","clearAll","storeNames","forEach","storeName","clear","getStats","stats","all","count","totalDecks","totalCards","pendingSync","unifiedStorage","window"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/unifiedStorage.js"],"sourcesContent":["/**\r\n * 🗄️ UNIFIED STORAGE - IndexedDB como Single Source of Truth\r\n * ===========================================================\r\n * Sistema unificado de armazenamento offline-first\r\n * \r\n * DATABASES:\r\n * - deckmaster_unified (dados principais)\r\n * \r\n * STORES:\r\n * 1. user_profile - Perfil do usuário\r\n * 2. decks - Todos os decks\r\n * 3. cards - Todas as cartas\r\n * 4. sync_queue - Operações pendentes\r\n * 5. sync_log - Histórico de sincronizações\r\n */\r\n\r\nconst DB_NAME = 'deckmaster_unified';\r\nconst DB_VERSION = 1;\r\n\r\nconst STORES = {\r\n  USER_PROFILE: 'user_profile',\r\n  DECKS: 'decks',\r\n  CARDS: 'cards',\r\n  SYNC_QUEUE: 'sync_queue',\r\n  SYNC_LOG: 'sync_log'\r\n};\r\n\r\nclass UnifiedStorage {\r\n  constructor() {\r\n    this.db = null;\r\n    this.isReady = false;\r\n    this.initPromise = this.init();\r\n  }\r\n\r\n  /**\r\n   * 🔧 Inicializa IndexedDB\r\n   */\r\n  async init() {\r\n    if (this.isReady) return this.db;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao abrir IndexedDB:', request.error);\r\n        reject(request.error);\r\n      };\r\n\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        this.isReady = true;\r\n        console.log('✅ UnifiedStorage inicializado');\r\n        resolve(this.db);\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n\r\n        // Store 1: user_profile (keyPath: userId)\r\n        if (!db.objectStoreNames.contains(STORES.USER_PROFILE)) {\r\n          const userStore = db.createObjectStore(STORES.USER_PROFILE, { keyPath: 'userId' });\r\n          userStore.createIndex('email', 'email', { unique: false });\r\n          console.log('✅ Store user_profile criado');\r\n        }\r\n\r\n        // Store 2: decks (keyPath: id)\r\n        if (!db.objectStoreNames.contains(STORES.DECKS)) {\r\n          const deckStore = db.createObjectStore(STORES.DECKS, { keyPath: 'id' });\r\n          deckStore.createIndex('userId', 'userId', { unique: false });\r\n          deckStore.createIndex('_synced', '_synced', { unique: false });\r\n          deckStore.createIndex('_lastSync', '_lastSync', { unique: false });\r\n          console.log('✅ Store decks criado');\r\n        }\r\n\r\n        // Store 3: cards (keyPath: id)\r\n        if (!db.objectStoreNames.contains(STORES.CARDS)) {\r\n          const cardStore = db.createObjectStore(STORES.CARDS, { keyPath: 'id' });\r\n          cardStore.createIndex('deck_id', 'deck_id', { unique: false });\r\n          cardStore.createIndex('_synced', '_synced', { unique: false });\r\n          console.log('✅ Store cards criado');\r\n        }\r\n\r\n        // Store 4: sync_queue (keyPath: id)\r\n        if (!db.objectStoreNames.contains(STORES.SYNC_QUEUE)) {\r\n          const queueStore = db.createObjectStore(STORES.SYNC_QUEUE, { keyPath: 'id' });\r\n          queueStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          queueStore.createIndex('entityType', 'entityType', { unique: false });\r\n          queueStore.createIndex('status', 'status', { unique: false });\r\n          console.log('✅ Store sync_queue criado');\r\n        }\r\n\r\n        // Store 5: sync_log (keyPath: id, autoIncrement)\r\n        if (!db.objectStoreNames.contains(STORES.SYNC_LOG)) {\r\n          const logStore = db.createObjectStore(STORES.SYNC_LOG, { \r\n            keyPath: 'id', \r\n            autoIncrement: true \r\n          });\r\n          logStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          console.log('✅ Store sync_log criado');\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🔍 Garante que DB está pronto\r\n   */\r\n  async ensureReady() {\r\n    if (!this.isReady) {\r\n      await this.initPromise;\r\n    }\r\n    return this.db;\r\n  }\r\n\r\n  // ============================================\r\n  // 👤 USER PROFILE\r\n  // ============================================\r\n\r\n  /**\r\n   * 💾 Salva perfil do usuário\r\n   */\r\n  async saveUserProfile(profile) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.USER_PROFILE, 'readwrite');\r\n    const store = transaction.objectStore(STORES.USER_PROFILE);\r\n\r\n    const userProfile = {\r\n      userId: profile.userId || profile.uid,\r\n      username: profile.username || profile.displayName,\r\n      email: profile.email,\r\n      photoURL: profile.photoURL || null,\r\n      _synced: true,\r\n      _lastSync: Date.now(),\r\n      _version: (profile._version || 0) + 1,\r\n      ...profile\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.put(userProfile);\r\n      request.onsuccess = () => {\r\n        console.log('✅ Perfil salvo:', userProfile.userId);\r\n        resolve(userProfile);\r\n      };\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao salvar perfil:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca perfil do usuário\r\n   */\r\n  async getUserProfile(userId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.USER_PROFILE, 'readonly');\r\n    const store = transaction.objectStore(STORES.USER_PROFILE);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.get(userId);\r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // ============================================\r\n  // 🃏 DECKS\r\n  // ============================================\r\n\r\n  /**\r\n   * 💾 Salva deck\r\n   */\r\n  async saveDeck(deck, options = {}) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.DECKS, 'readwrite');\r\n    const store = transaction.objectStore(STORES.DECKS);\r\n\r\n    const deckData = {\r\n      ...deck,\r\n      _synced: options.synced !== undefined ? options.synced : false,\r\n      _pending: options.pending || [],\r\n      _lastSync: options.synced ? Date.now() : (deck._lastSync || 0),\r\n      _localChanges: options.localChanges || {},\r\n      _version: (deck._version || 0) + 1,\r\n      _updatedAt: Date.now()\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.put(deckData);\r\n      request.onsuccess = () => {\r\n        console.log('✅ Deck salvo:', deckData.id);\r\n        resolve(deckData);\r\n      };\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao salvar deck:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca deck por ID\r\n   */\r\n  async getDeck(deckId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.DECKS, 'readonly');\r\n    const store = transaction.objectStore(STORES.DECKS);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.get(deckId);\r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca todos os decks do usuário\r\n   */\r\n  async getUserDecks(userId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.DECKS, 'readonly');\r\n    const store = transaction.objectStore(STORES.DECKS);\r\n    const index = store.index('userId');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = index.getAll(userId);\r\n      request.onsuccess = () => resolve(request.result || []);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🗑️ Deleta deck\r\n   */\r\n  async deleteDeck(deckId) {\r\n    const db = await this.ensureReady();\r\n    \r\n    // Deleta deck e suas cartas em transação única\r\n    const transaction = db.transaction([STORES.DECKS, STORES.CARDS], 'readwrite');\r\n    const deckStore = transaction.objectStore(STORES.DECKS);\r\n    const cardStore = transaction.objectStore(STORES.CARDS);\r\n    const cardIndex = cardStore.index('deck_id');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // Deleta deck\r\n      deckStore.delete(deckId);\r\n\r\n      // Deleta todas as cartas do deck\r\n      const cardRequest = cardIndex.openCursor(IDBKeyRange.only(deckId));\r\n      cardRequest.onsuccess = (event) => {\r\n        const cursor = event.target.result;\r\n        if (cursor) {\r\n          cursor.delete();\r\n          cursor.continue();\r\n        }\r\n      };\r\n\r\n      transaction.oncomplete = () => {\r\n        console.log('✅ Deck deletado:', deckId);\r\n        resolve();\r\n      };\r\n      transaction.onerror = () => {\r\n        console.error('❌ Erro ao deletar deck:', transaction.error);\r\n        reject(transaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  // ============================================\r\n  // 🎴 CARDS\r\n  // ============================================\r\n\r\n  /**\r\n   * 💾 Salva carta\r\n   */\r\n  async saveCard(card, options = {}) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.CARDS, 'readwrite');\r\n    const store = transaction.objectStore(STORES.CARDS);\r\n\r\n    const cardData = {\r\n      ...card,\r\n      _synced: options.synced !== undefined ? options.synced : false,\r\n      _pending: options.pending || [],\r\n      _lastSync: options.synced ? Date.now() : (card._lastSync || 0),\r\n      _version: (card._version || 0) + 1,\r\n      _updatedAt: Date.now()\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.put(cardData);\r\n      request.onsuccess = () => {\r\n        console.log('✅ Carta salva:', cardData.id);\r\n        resolve(cardData);\r\n      };\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao salvar carta:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca carta por ID\r\n   */\r\n  async getCard(cardId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.CARDS, 'readonly');\r\n    const store = transaction.objectStore(STORES.CARDS);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.get(cardId);\r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca todas as cartas de um deck\r\n   */\r\n  async getDeckCards(deckId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.CARDS, 'readonly');\r\n    const store = transaction.objectStore(STORES.CARDS);\r\n    const index = store.index('deck_id');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = index.getAll(deckId);\r\n      request.onsuccess = () => resolve(request.result || []);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🗑️ Deleta carta\r\n   */\r\n  async deleteCard(cardId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.CARDS, 'readwrite');\r\n    const store = transaction.objectStore(STORES.CARDS);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.delete(cardId);\r\n      request.onsuccess = () => {\r\n        console.log('✅ Carta deletada:', cardId);\r\n        resolve();\r\n      };\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao deletar carta:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  // ============================================\r\n  // 🔄 SYNC QUEUE\r\n  // ============================================\r\n\r\n  /**\r\n   * ➕ Adiciona operação à fila de sincronização\r\n   */\r\n  async addToSyncQueue(operation) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_QUEUE, 'readwrite');\r\n    const store = transaction.objectStore(STORES.SYNC_QUEUE);\r\n\r\n    const queueItem = {\r\n      id: `sync_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: Date.now(),\r\n      status: 'pending', // pending, processing, completed, failed\r\n      retries: 0,\r\n      ...operation\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.add(queueItem);\r\n      request.onsuccess = () => {\r\n        console.log('✅ Adicionado à fila de sync:', queueItem.id);\r\n        resolve(queueItem);\r\n      };\r\n      request.onerror = () => {\r\n        console.error('❌ Erro ao adicionar à fila:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca operações pendentes\r\n   */\r\n  async getPendingSyncOperations() {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_QUEUE, 'readonly');\r\n    const store = transaction.objectStore(STORES.SYNC_QUEUE);\r\n    const index = store.index('status');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = index.getAll('pending');\r\n      request.onsuccess = () => resolve(request.result || []);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ✏️ Atualiza status da operação\r\n   */\r\n  async updateSyncOperation(operationId, updates) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_QUEUE, 'readwrite');\r\n    const store = transaction.objectStore(STORES.SYNC_QUEUE);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const getRequest = store.get(operationId);\r\n      \r\n      getRequest.onsuccess = () => {\r\n        const operation = getRequest.result;\r\n        if (!operation) {\r\n          reject(new Error('Operação não encontrada'));\r\n          return;\r\n        }\r\n\r\n        const updated = { ...operation, ...updates };\r\n        const putRequest = store.put(updated);\r\n        \r\n        putRequest.onsuccess = () => resolve(updated);\r\n        putRequest.onerror = () => reject(putRequest.error);\r\n      };\r\n      \r\n      getRequest.onerror = () => reject(getRequest.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🗑️ Remove operação da fila\r\n   */\r\n  async removeSyncOperation(operationId) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_QUEUE, 'readwrite');\r\n    const store = transaction.objectStore(STORES.SYNC_QUEUE);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.delete(operationId);\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // ============================================\r\n  // 📊 SYNC LOG\r\n  // ============================================\r\n\r\n  /**\r\n   * 📝 Adiciona entrada no log de sincronização\r\n   */\r\n  async addSyncLog(logEntry) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_LOG, 'readwrite');\r\n    const store = transaction.objectStore(STORES.SYNC_LOG);\r\n\r\n    const log = {\r\n      timestamp: Date.now(),\r\n      ...logEntry\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.add(log);\r\n      request.onsuccess = () => resolve(log);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📖 Busca últimos logs\r\n   */\r\n  async getSyncLogs(limit = 50) {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction(STORES.SYNC_LOG, 'readonly');\r\n    const store = transaction.objectStore(STORES.SYNC_LOG);\r\n    const index = store.index('timestamp');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const logs = [];\r\n      const request = index.openCursor(null, 'prev'); // Ordem decrescente\r\n\r\n      request.onsuccess = (event) => {\r\n        const cursor = event.target.result;\r\n        if (cursor && logs.length < limit) {\r\n          logs.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(logs);\r\n        }\r\n      };\r\n\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // ============================================\r\n  // 🧹 UTILITIES\r\n  // ============================================\r\n\r\n  /**\r\n   * 🗑️ Limpa tudo (usar com cuidado!)\r\n   */\r\n  async clearAll() {\r\n    const db = await this.ensureReady();\r\n    const storeNames = [\r\n      STORES.USER_PROFILE,\r\n      STORES.DECKS,\r\n      STORES.CARDS,\r\n      STORES.SYNC_QUEUE,\r\n      STORES.SYNC_LOG\r\n    ];\r\n\r\n    const transaction = db.transaction(storeNames, 'readwrite');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      storeNames.forEach(storeName => {\r\n        transaction.objectStore(storeName).clear();\r\n      });\r\n\r\n      transaction.oncomplete = () => {\r\n        console.log('🗑️ Todos os dados limpos');\r\n        resolve();\r\n      };\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 📊 Estatísticas gerais\r\n   */\r\n  async getStats() {\r\n    const db = await this.ensureReady();\r\n    const transaction = db.transaction([STORES.DECKS, STORES.CARDS, STORES.SYNC_QUEUE], 'readonly');\r\n\r\n    const deckStore = transaction.objectStore(STORES.DECKS);\r\n    const cardStore = transaction.objectStore(STORES.CARDS);\r\n    const queueStore = transaction.objectStore(STORES.SYNC_QUEUE);\r\n\r\n    const stats = await Promise.all([\r\n      new Promise(resolve => {\r\n        const request = deckStore.count();\r\n        request.onsuccess = () => resolve(request.result);\r\n      }),\r\n      new Promise(resolve => {\r\n        const request = cardStore.count();\r\n        request.onsuccess = () => resolve(request.result);\r\n      }),\r\n      new Promise(resolve => {\r\n        const request = queueStore.count();\r\n        request.onsuccess = () => resolve(request.result);\r\n      })\r\n    ]);\r\n\r\n    return {\r\n      totalDecks: stats[0],\r\n      totalCards: stats[1],\r\n      pendingSync: stats[2]\r\n    };\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nconst unifiedStorage = new UnifiedStorage();\r\n\r\n// Expõe no window para debug\r\nif (typeof window !== 'undefined') {\r\n  window.unifiedStorage = unifiedStorage;\r\n  console.log('🗄️ UnifiedStorage disponível em window.unifiedStorage');\r\n}\r\n\r\nexport default unifiedStorage;\r\nexport { STORES };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}