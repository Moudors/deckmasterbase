{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Hook unificado para gerenciar decks - Online First com fallback offline\nimport{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{useConnectivity}from'./connectivityManager';import{offlineCacheManager}from'./offlineCacheManager';import{deckOperations,deckCardOperations}from'./supabaseOperations';import{useAuthState}from'../hooks/useAuthState';import{supabase}from'../supabase';export function useDecks(){const[user,authLoading]=useAuthState();// ✅ Correção: useAuthState retorna array\nconst connectivity=useConnectivity();const queryClient=useQueryClient();// Query para buscar decks\nconst{data:decks=[],isLoading,error,refetch}=useQuery({queryKey:['decks'],queryFn:async()=>{// 🔍 Obter o usuário autenticado do Supabase\nconst{data:{user},error:authError}=await supabase.auth.getUser();if(authError||!user){console.log('👤 Usuário não autenticado, retornando array vazio');return[];}console.log('👤 Usuário autenticado para buscar decks:',user.email,'ID:',user.id);// MODO ONLINE: Busca do Supabase e faz cache\nif(connectivity.canSaveData){try{const onlineDecks=await deckOperations.getUserDecks(user.id);// Salva no cache para uso offline\nawait offlineCacheManager.cacheDecks(user.id,onlineDecks);await offlineCacheManager.setLastSyncTime();console.log('✅ Decks encontrados online:',onlineDecks.length);console.log('📋 Lista de decks:',onlineDecks.map(d=>({id:d.id,name:d.name,owner_id:d.owner_id})));return onlineDecks;}catch(err){console.error('⚠️ Erro detalhado ao buscar decks online:',{message:err.message,code:err.code,details:err.details,hint:err.hint,fullError:err});// Fallback para cache offline\nconst cachedDecks=await offlineCacheManager.getCachedDecks(user.id);console.log('📦 Usando cache offline:',cachedDecks.length,'decks');return cachedDecks;}}// MODO OFFLINE: Busca do cache\nconsole.log('📱 Modo offline - buscando decks do cache');return await offlineCacheManager.getCachedDecks(user.id);},enabled:true,// Sempre habilitado, a verificação de auth é interna\nstaleTime:5*60*1000,// 5 minutos\ncacheTime:10*60*1000// 10 minutos\n});// Mutation para criar deck (apenas online)\nconst createDeckMutation=useMutation({mutationFn:async deckData=>{if(!connectivity.canSaveData){throw new Error('Não é possível criar decks offline. Conecte-se à internet.');}// 🔍 Obter o usuário autenticado do Supabase (uma única vez)\nconst{data:{user},error:authError}=await supabase.auth.getUser();if(authError||!user){throw new Error('Usuário não autenticado. Faça login novamente.');}console.log('🆕 Criando deck online para usuário:',user.email);// Chama diretamente o Supabase sem dupla autenticação\nconst{data,error}=await supabase.from('decks').insert(_objectSpread(_objectSpread({},deckData),{},{owner_id:user.id,created_at:new Date().toISOString(),updated_at:new Date().toISOString()})).select().single();if(error)throw error;return data;},onSuccess:newDeck=>{console.log('✅ Deck criado com sucesso:',newDeck.id);// Atualiza cache otimisticamente\nqueryClient.setQueryData(['decks'],function(){let old=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return[newDeck,...old];});// 🔄 Força invalidação das queries para garantir sincronização\nqueryClient.invalidateQueries({queryKey:['decks']});// 📦 Atualiza cache offline também\nif(user!==null&&user!==void 0&&user.id){offlineCacheManager.cacheDecks(user.id,[newDeck,...decks]);}}});// Mutation para atualizar deck (apenas online)\nconst updateDeckMutation=useMutation({mutationFn:async _ref=>{let{deckId,updates}=_ref;if(!connectivity.canSaveData){throw new Error('Não é possível editar decks offline. Conecte-se à internet.');}console.log('✏️ Atualizando deck online');return await deckOperations.updateDeck(deckId,updates);},onSuccess:(updatedDeck,_ref2)=>{let{deckId}=_ref2;// Atualiza o deck no cache\nqueryClient.setQueryData(['decks'],function(){let old=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return old.map(deck=>deck.id===deckId?_objectSpread(_objectSpread({},deck),updatedDeck):deck);});// Invalida e recarrega as queries relacionadas\nqueryClient.invalidateQueries({queryKey:['decks']});// Atualiza cache offline\nif(user!==null&&user!==void 0&&user.id){const updatedDecks=decks.map(deck=>deck.id===deckId?_objectSpread(_objectSpread({},deck),updatedDeck):deck);offlineCacheManager.cacheDecks(user.id,updatedDecks);}}});// Mutation para deletar deck (apenas online)\nconst deleteDeckMutation=useMutation({mutationFn:async deckId=>{if(!connectivity.canSaveData){throw new Error('Não é possível deletar decks offline. Conecte-se à internet.');}console.log('🗑️ Deletando deck online');return await deckOperations.deleteDeck(deckId);},onSuccess:(_,deckId)=>{// Remove o deck do cache\nqueryClient.setQueryData(['decks'],function(){let old=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return old.filter(deck=>deck.id!==deckId);});// Invalida queries\nqueryClient.invalidateQueries({queryKey:['decks']});// Atualiza cache offline\nif(user!==null&&user!==void 0&&user.id){const filteredDecks=decks.filter(deck=>deck.id!==deckId);offlineCacheManager.cacheDecks(user.id,filteredDecks);}}});// Função para forçar sincronização (quando voltar online)\nconst syncDecks=async()=>{if(connectivity.canSaveData&&user!==null&&user!==void 0&&user.id){console.log('🔄 Sincronizando decks...');await refetch();}};return{// Dados\ndecks,isLoading,error,// Estados\nisOnline:connectivity.canSaveData,isOfflineMode:connectivity.isOfflineMode,canEdit:connectivity.canSaveData,// Mutations (apenas online)\ncreateDeck:createDeckMutation.mutateAsync,updateDeck:updateDeckMutation.mutateAsync,deleteDeck:deleteDeckMutation.mutateAsync,// Estados das mutations\nisCreating:createDeckMutation.isPending,isUpdating:updateDeckMutation.isPending,isDeleting:deleteDeckMutation.isPending,// Erros das mutations\ncreateError:createDeckMutation.error,updateError:updateDeckMutation.error,deleteError:deleteDeckMutation.error,// Funções utilitárias\nrefetch,syncDecks};}export function useDeckCards(deckId){const connectivity=useConnectivity();const queryClient=useQueryClient();// Query para buscar cartas do deck\nconst{data:cards=[],isLoading,error,refetch}=useQuery({queryKey:['cards',deckId],queryFn:async()=>{if(!deckId)return[];// Sempre busca do Supabase, nunca do cache offline\nconsole.log(\"\\uD83C\\uDF10 Buscando cartas do deck \".concat(deckId,\" diretamente do Supabase (sem cache offline)\"));const onlineCards=await deckCardOperations.getDeckCards(deckId);return onlineCards;},enabled:!!deckId,staleTime:2*60*1000,// 2 minutos\ncacheTime:5*60*1000// 5 minutos\n});// Mutation para adicionar carta (apenas online)\nconst addCardMutation=useMutation({mutationFn:async cardData=>{if(!connectivity.canSaveData){throw new Error('Não é possível adicionar cartas offline. Conecte-se à internet.');}console.log('➕ Adicionando carta online');return await deckCardOperations.addCardToDeck(deckId,cardData);},onSuccess:newCard=>{// Adiciona a carta ao cache\nqueryClient.setQueryData(['cards',deckId],function(){let old=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return[newCard,...old];});// Atualiza cache offline\nofflineCacheManager.cacheDeckCards(deckId,[newCard,...cards]);}});// Mutation para atualizar carta (apenas online)\nconst updateCardMutation=useMutation({mutationFn:async _ref3=>{let{cardId,updates}=_ref3;if(!connectivity.canSaveData){throw new Error('Não é possível editar cartas offline. Conecte-se à internet.');}console.log('✏️ Atualizando carta online:',{cardId,updates});return await deckCardOperations.updateDeckCard(cardId,updates);},// Removido update otimístico: só atualiza cache após sucesso do banco\nonMutate:async _ref4=>{let{cardId,updates}=_ref4;await queryClient.cancelQueries({queryKey:['cards',deckId]});// Snapshot para rollback, mas sem update otimístico\nconst previousCards=queryClient.getQueryData(['cards',deckId]);return{previousCards,cardId,updates};},onSuccess:(updatedCard,_ref5)=>{let{cardId,updates}=_ref5;// Após atualização, força refetch das cartas diretamente do Supabase\nqueryClient.invalidateQueries({queryKey:['cards',deckId]});// Atualiza cache offline APENAS após sucesso\nif(updatedCard){const cards=queryClient.getQueryData(['cards',deckId])||[];const updatedCards=cards.map(card=>card.id===cardId?_objectSpread(_objectSpread({},card),updatedCard):card);offlineCacheManager.cacheDeckCards(deckId,updatedCards);console.log('[DEBUG] Cache offline atualizado após sucesso:',updatedCard);}},onError:(err,_ref6,context)=>{let{cardId}=_ref6;// Rollback em caso de erro\nif(context!==null&&context!==void 0&&context.previousCards){queryClient.setQueryData(['cards',deckId],context.previousCards);}console.error('❌ Erro ao atualizar carta:',err);}});// Mutation para deletar carta (apenas online)\nconst deleteCardMutation=useMutation({mutationFn:async cardId=>{if(!connectivity.canSaveData){throw new Error('Não é possível remover cartas offline. Conecte-se à internet.');}console.log('🗑️ Removendo carta online');return await deckCardOperations.deleteDeckCard(cardId);},onSuccess:(_,cardId)=>{// Remove a carta do cache\nqueryClient.setQueryData(['cards',deckId],function(){let old=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return old.filter(card=>card.id!==cardId);});// Atualiza cache offline\nconst filteredCards=cards.filter(card=>card.id!==cardId);offlineCacheManager.cacheDeckCards(deckId,filteredCards);}});return{// Dados\ncards,isLoading,error,// Estados\nisOnline:connectivity.canSaveData,isOfflineMode:connectivity.isOfflineMode,canEdit:connectivity.canSaveData,// Mutations (apenas online)\naddCard:addCardMutation.mutate,updateCard:updateCardMutation.mutate,deleteCard:deleteCardMutation.mutate,// Estados das mutations\nisAdding:addCardMutation.isPending,isUpdating:updateCardMutation.isPending,isDeleting:deleteCardMutation.isPending,// Erros das mutations\naddError:addCardMutation.error,updateError:updateCardMutation.error,deleteError:deleteCardMutation.error,// Funções utilitárias\nrefetch};}","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","useConnectivity","offlineCacheManager","deckOperations","deckCardOperations","useAuthState","supabase","useDecks","user","authLoading","connectivity","queryClient","data","decks","isLoading","error","refetch","queryKey","queryFn","authError","auth","getUser","console","log","email","id","canSaveData","onlineDecks","getUserDecks","cacheDecks","setLastSyncTime","length","map","d","name","owner_id","err","message","code","details","hint","fullError","cachedDecks","getCachedDecks","enabled","staleTime","cacheTime","createDeckMutation","mutationFn","deckData","Error","from","insert","_objectSpread","created_at","Date","toISOString","updated_at","select","single","onSuccess","newDeck","setQueryData","old","arguments","undefined","invalidateQueries","updateDeckMutation","_ref","deckId","updates","updateDeck","updatedDeck","_ref2","deck","updatedDecks","deleteDeckMutation","deleteDeck","_","filter","filteredDecks","syncDecks","isOnline","isOfflineMode","canEdit","createDeck","mutateAsync","isCreating","isPending","isUpdating","isDeleting","createError","updateError","deleteError","useDeckCards","cards","concat","onlineCards","getDeckCards","addCardMutation","cardData","addCardToDeck","newCard","cacheDeckCards","updateCardMutation","_ref3","cardId","updateDeckCard","onMutate","_ref4","cancelQueries","previousCards","getQueryData","updatedCard","_ref5","updatedCards","card","onError","_ref6","context","deleteCardMutation","deleteDeckCard","filteredCards","addCard","mutate","updateCard","deleteCard","isAdding","addError"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/useUnifiedDecks.js"],"sourcesContent":["// Hook unificado para gerenciar decks - Online First com fallback offline\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { useConnectivity } from './connectivityManager';\r\nimport { offlineCacheManager } from './offlineCacheManager';\r\nimport { deckOperations, deckCardOperations } from './supabaseOperations';\r\nimport { useAuthState } from '../hooks/useAuthState';\r\nimport { supabase } from '../supabase';\r\n\r\nexport function useDecks() {\r\n  const [user, authLoading] = useAuthState(); // ✅ Correção: useAuthState retorna array\r\n  const connectivity = useConnectivity();\r\n  const queryClient = useQueryClient();\r\n\r\n  // Query para buscar decks\r\n  const {\r\n    data: decks = [],\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['decks'],\r\n    queryFn: async () => {\r\n      // 🔍 Obter o usuário autenticado do Supabase\r\n      const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n      \r\n      if (authError || !user) {\r\n        console.log('👤 Usuário não autenticado, retornando array vazio');\r\n        return [];\r\n      }\r\n\r\n      console.log('👤 Usuário autenticado para buscar decks:', user.email, 'ID:', user.id);\r\n\r\n      // MODO ONLINE: Busca do Supabase e faz cache\r\n      if (connectivity.canSaveData) {\r\n        try {\r\n          const onlineDecks = await deckOperations.getUserDecks(user.id);\r\n          \r\n          // Salva no cache para uso offline\r\n          await offlineCacheManager.cacheDecks(user.id, onlineDecks);\r\n          await offlineCacheManager.setLastSyncTime();\r\n          \r\n          console.log('✅ Decks encontrados online:', onlineDecks.length);\r\n          console.log('📋 Lista de decks:', onlineDecks.map(d => ({ id: d.id, name: d.name, owner_id: d.owner_id })));\r\n          \r\n          return onlineDecks;\r\n        } catch (err) {\r\n          console.error('⚠️ Erro detalhado ao buscar decks online:', {\r\n            message: err.message,\r\n            code: err.code,\r\n            details: err.details,\r\n            hint: err.hint,\r\n            fullError: err\r\n          });\r\n          \r\n          // Fallback para cache offline\r\n          const cachedDecks = await offlineCacheManager.getCachedDecks(user.id);\r\n          console.log('📦 Usando cache offline:', cachedDecks.length, 'decks');\r\n          return cachedDecks;\r\n        }\r\n      }\r\n      \r\n      // MODO OFFLINE: Busca do cache\r\n      console.log('📱 Modo offline - buscando decks do cache');\r\n      return await offlineCacheManager.getCachedDecks(user.id);\r\n    },\r\n    enabled: true, // Sempre habilitado, a verificação de auth é interna\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    cacheTime: 10 * 60 * 1000, // 10 minutos\r\n  });\r\n\r\n  // Mutation para criar deck (apenas online)\r\n  const createDeckMutation = useMutation({\r\n    mutationFn: async (deckData) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível criar decks offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      // 🔍 Obter o usuário autenticado do Supabase (uma única vez)\r\n      const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n      \r\n      if (authError || !user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n      \r\n      console.log('🆕 Criando deck online para usuário:', user.email);\r\n      \r\n      // Chama diretamente o Supabase sem dupla autenticação\r\n      const { data, error } = await supabase\r\n        .from('decks')\r\n        .insert({\r\n          ...deckData,\r\n          owner_id: user.id,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n      \r\n      if (error) throw error;\r\n      return data;\r\n    },\r\n    onSuccess: (newDeck) => {\r\n      console.log('✅ Deck criado com sucesso:', newDeck.id);\r\n      \r\n      // Atualiza cache otimisticamente\r\n      queryClient.setQueryData(['decks'], (old = []) => [newDeck, ...old]);\r\n      \r\n      // 🔄 Força invalidação das queries para garantir sincronização\r\n      queryClient.invalidateQueries({ queryKey: ['decks'] });\r\n      \r\n      // 📦 Atualiza cache offline também\r\n      if (user?.id) {\r\n        offlineCacheManager.cacheDecks(user.id, [newDeck, ...decks]);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Mutation para atualizar deck (apenas online)\r\n  const updateDeckMutation = useMutation({\r\n    mutationFn: async ({ deckId, updates }) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível editar decks offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      console.log('✏️ Atualizando deck online');\r\n      return await deckOperations.updateDeck(deckId, updates);\r\n    },\r\n    onSuccess: (updatedDeck, { deckId }) => {\r\n      // Atualiza o deck no cache\r\n      queryClient.setQueryData(['decks'], (old = []) =>\r\n        old.map(deck => deck.id === deckId ? { ...deck, ...updatedDeck } : deck)\r\n      );\r\n      \r\n      // Invalida e recarrega as queries relacionadas\r\n      queryClient.invalidateQueries({ queryKey: ['decks'] });\r\n      \r\n      // Atualiza cache offline\r\n      if (user?.id) {\r\n        const updatedDecks = decks.map(deck => \r\n          deck.id === deckId ? { ...deck, ...updatedDeck } : deck\r\n        );\r\n        offlineCacheManager.cacheDecks(user.id, updatedDecks);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Mutation para deletar deck (apenas online)\r\n  const deleteDeckMutation = useMutation({\r\n    mutationFn: async (deckId) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível deletar decks offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      console.log('🗑️ Deletando deck online');\r\n      return await deckOperations.deleteDeck(deckId);\r\n    },\r\n    onSuccess: (_, deckId) => {\r\n      // Remove o deck do cache\r\n      queryClient.setQueryData(['decks'], (old = []) =>\r\n        old.filter(deck => deck.id !== deckId)\r\n      );\r\n      \r\n      // Invalida queries\r\n      queryClient.invalidateQueries({ queryKey: ['decks'] });\r\n      \r\n      // Atualiza cache offline\r\n      if (user?.id) {\r\n        const filteredDecks = decks.filter(deck => deck.id !== deckId);\r\n        offlineCacheManager.cacheDecks(user.id, filteredDecks);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Função para forçar sincronização (quando voltar online)\r\n  const syncDecks = async () => {\r\n    if (connectivity.canSaveData && user?.id) {\r\n      console.log('🔄 Sincronizando decks...');\r\n      await refetch();\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Dados\r\n    decks,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Estados\r\n    isOnline: connectivity.canSaveData,\r\n    isOfflineMode: connectivity.isOfflineMode,\r\n    canEdit: connectivity.canSaveData,\r\n    \r\n    // Mutations (apenas online)\r\n    createDeck: createDeckMutation.mutateAsync,\r\n    updateDeck: updateDeckMutation.mutateAsync,\r\n    deleteDeck: deleteDeckMutation.mutateAsync,\r\n    \r\n    // Estados das mutations\r\n    isCreating: createDeckMutation.isPending,\r\n    isUpdating: updateDeckMutation.isPending,\r\n    isDeleting: deleteDeckMutation.isPending,\r\n    \r\n    // Erros das mutations\r\n    createError: createDeckMutation.error,\r\n    updateError: updateDeckMutation.error,\r\n    deleteError: deleteDeckMutation.error,\r\n    \r\n    // Funções utilitárias\r\n    refetch,\r\n    syncDecks,\r\n  };\r\n}\r\n\r\nexport function useDeckCards(deckId) {\r\n  const connectivity = useConnectivity();\r\n  const queryClient = useQueryClient();\r\n\r\n  // Query para buscar cartas do deck\r\n  const {\r\n    data: cards = [],\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['cards', deckId],\r\n    queryFn: async () => {\r\n      if (!deckId) return [];\r\n\r\n      // Sempre busca do Supabase, nunca do cache offline\r\n      console.log(`🌐 Buscando cartas do deck ${deckId} diretamente do Supabase (sem cache offline)`);\r\n      const onlineCards = await deckCardOperations.getDeckCards(deckId);\r\n      return onlineCards;\r\n    },\r\n    enabled: !!deckId,\r\n    staleTime: 2 * 60 * 1000, // 2 minutos\r\n    cacheTime: 5 * 60 * 1000, // 5 minutos\r\n  });\r\n\r\n  // Mutation para adicionar carta (apenas online)\r\n  const addCardMutation = useMutation({\r\n    mutationFn: async (cardData) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível adicionar cartas offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      console.log('➕ Adicionando carta online');\r\n      return await deckCardOperations.addCardToDeck(deckId, cardData);\r\n    },\r\n    onSuccess: (newCard) => {\r\n      // Adiciona a carta ao cache\r\n      queryClient.setQueryData(['cards', deckId], (old = []) => [newCard, ...old]);\r\n      \r\n      // Atualiza cache offline\r\n      offlineCacheManager.cacheDeckCards(deckId, [newCard, ...cards]);\r\n    },\r\n  });\r\n\r\n  // Mutation para atualizar carta (apenas online)\r\n  const updateCardMutation = useMutation({\r\n    mutationFn: async ({ cardId, updates }) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível editar cartas offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      console.log('✏️ Atualizando carta online:', { cardId, updates });\r\n      return await deckCardOperations.updateDeckCard(cardId, updates);\r\n    },\r\n    // Removido update otimístico: só atualiza cache após sucesso do banco\r\n    onMutate: async ({ cardId, updates }) => {\r\n      await queryClient.cancelQueries({ queryKey: ['cards', deckId] });\r\n      // Snapshot para rollback, mas sem update otimístico\r\n      const previousCards = queryClient.getQueryData(['cards', deckId]);\r\n      return { previousCards, cardId, updates };\r\n    },\r\n    onSuccess: (updatedCard, { cardId, updates }) => {\r\n      // Após atualização, força refetch das cartas diretamente do Supabase\r\n      queryClient.invalidateQueries({ queryKey: ['cards', deckId] });\r\n      // Atualiza cache offline APENAS após sucesso\r\n      if (updatedCard) {\r\n        const cards = queryClient.getQueryData(['cards', deckId]) || [];\r\n        const updatedCards = cards.map(card => card.id === cardId ? { ...card, ...updatedCard } : card);\r\n        offlineCacheManager.cacheDeckCards(deckId, updatedCards);\r\n        console.log('[DEBUG] Cache offline atualizado após sucesso:', updatedCard);\r\n      }\r\n    },\r\n    onError: (err, { cardId }, context) => {\r\n      // Rollback em caso de erro\r\n      if (context?.previousCards) {\r\n        queryClient.setQueryData(['cards', deckId], context.previousCards);\r\n      }\r\n      console.error('❌ Erro ao atualizar carta:', err);\r\n    },\r\n  });\r\n\r\n  // Mutation para deletar carta (apenas online)\r\n  const deleteCardMutation = useMutation({\r\n    mutationFn: async (cardId) => {\r\n      if (!connectivity.canSaveData) {\r\n        throw new Error('Não é possível remover cartas offline. Conecte-se à internet.');\r\n      }\r\n      \r\n      console.log('🗑️ Removendo carta online');\r\n      return await deckCardOperations.deleteDeckCard(cardId);\r\n    },\r\n    onSuccess: (_, cardId) => {\r\n      // Remove a carta do cache\r\n      queryClient.setQueryData(['cards', deckId], (old = []) =>\r\n        old.filter(card => card.id !== cardId)\r\n      );\r\n      \r\n      // Atualiza cache offline\r\n      const filteredCards = cards.filter(card => card.id !== cardId);\r\n      offlineCacheManager.cacheDeckCards(deckId, filteredCards);\r\n    },\r\n  });\r\n\r\n  return {\r\n    // Dados\r\n    cards,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Estados\r\n    isOnline: connectivity.canSaveData,\r\n    isOfflineMode: connectivity.isOfflineMode,\r\n    canEdit: connectivity.canSaveData,\r\n    \r\n    // Mutations (apenas online)\r\n    addCard: addCardMutation.mutate,\r\n    updateCard: updateCardMutation.mutate,\r\n    deleteCard: deleteCardMutation.mutate,\r\n    \r\n    // Estados das mutations\r\n    isAdding: addCardMutation.isPending,\r\n    isUpdating: updateCardMutation.isPending,\r\n    isDeleting: deleteCardMutation.isPending,\r\n    \r\n    // Erros das mutations\r\n    addError: addCardMutation.error,\r\n    updateError: updateCardMutation.error,\r\n    deleteError: deleteCardMutation.error,\r\n    \r\n    // Funções utilitárias\r\n    refetch,\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}