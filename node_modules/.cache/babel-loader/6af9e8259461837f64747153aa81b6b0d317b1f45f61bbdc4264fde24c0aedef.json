{"ast":null,"code":"// Utilitário para migrar dados do localStorage para IndexedDB\nimport storage from'./indexedDBStorage';const KEYS_TO_MIGRATE=['deckmaster_pending_sync'// Adicione outras chaves do DeckMaster aqui se necessário\n];export async function migrateToIndexedDB(){console.log(\"🔄 Iniciando migração localStorage → IndexedDB...\");let migratedCount=0;let errors=0;for(const key of KEYS_TO_MIGRATE){try{const value=localStorage.getItem(key);if(value){// Tenta fazer parse se for JSON\nlet parsedValue;try{parsedValue=JSON.parse(value);}catch(_unused){parsedValue=value;// Mantém como string se não for JSON\n}// Salva no IndexedDB\nawait storage.setItem(key,parsedValue);// Remove do localStorage após migração bem-sucedida\nlocalStorage.removeItem(key);migratedCount++;console.log(\"\\u2705 Migrado: \".concat(key));}}catch(error){console.error(\"\\u274C Erro ao migrar \".concat(key,\":\"),error);errors++;}}console.log(\"\\n\\uD83C\\uDF89 Migra\\xE7\\xE3o conclu\\xEDda!\\n  \\u2705 Itens migrados: \".concat(migratedCount,\"\\n  \\u274C Erros: \").concat(errors,\"\\n  \"));return{migratedCount,errors};}// Limpa localStorage de itens do DeckMaster\nexport function clearDeckMasterLocalStorage(){console.log(\"🗑️ Limpando localStorage do DeckMaster...\");let clearedCount=0;const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith('deckmaster_')){localStorage.removeItem(key);clearedCount++;}});console.log(\"\\u2705 \".concat(clearedCount,\" itens removidos do localStorage\"));return clearedCount;}// Exporta globalmente para uso no console\nif(typeof window!=='undefined'){window.migrateToIndexedDB=migrateToIndexedDB;window.clearDeckMasterLocalStorage=clearDeckMasterLocalStorage;console.log(\"💡 Use window.migrateToIndexedDB() para migrar dados do localStorage\");console.log(\"💡 Use window.clearDeckMasterLocalStorage() para limpar localStorage\");}","map":{"version":3,"names":["storage","KEYS_TO_MIGRATE","migrateToIndexedDB","console","log","migratedCount","errors","key","value","localStorage","getItem","parsedValue","JSON","parse","_unused","setItem","removeItem","concat","error","clearDeckMasterLocalStorage","clearedCount","keys","Object","forEach","startsWith","window"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/storageMigration.js"],"sourcesContent":["// Utilitário para migrar dados do localStorage para IndexedDB\r\nimport storage from './indexedDBStorage';\r\n\r\nconst KEYS_TO_MIGRATE = [\r\n  'deckmaster_pending_sync',\r\n  // Adicione outras chaves do DeckMaster aqui se necessário\r\n];\r\n\r\nexport async function migrateToIndexedDB() {\r\n  console.log(\"🔄 Iniciando migração localStorage → IndexedDB...\");\r\n  \r\n  let migratedCount = 0;\r\n  let errors = 0;\r\n  \r\n  for (const key of KEYS_TO_MIGRATE) {\r\n    try {\r\n      const value = localStorage.getItem(key);\r\n      \r\n      if (value) {\r\n        // Tenta fazer parse se for JSON\r\n        let parsedValue;\r\n        try {\r\n          parsedValue = JSON.parse(value);\r\n        } catch {\r\n          parsedValue = value; // Mantém como string se não for JSON\r\n        }\r\n        \r\n        // Salva no IndexedDB\r\n        await storage.setItem(key, parsedValue);\r\n        \r\n        // Remove do localStorage após migração bem-sucedida\r\n        localStorage.removeItem(key);\r\n        \r\n        migratedCount++;\r\n        console.log(`✅ Migrado: ${key}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`❌ Erro ao migrar ${key}:`, error);\r\n      errors++;\r\n    }\r\n  }\r\n  \r\n  console.log(`\r\n🎉 Migração concluída!\r\n  ✅ Itens migrados: ${migratedCount}\r\n  ❌ Erros: ${errors}\r\n  `);\r\n  \r\n  return { migratedCount, errors };\r\n}\r\n\r\n// Limpa localStorage de itens do DeckMaster\r\nexport function clearDeckMasterLocalStorage() {\r\n  console.log(\"🗑️ Limpando localStorage do DeckMaster...\");\r\n  \r\n  let clearedCount = 0;\r\n  const keys = Object.keys(localStorage);\r\n  \r\n  keys.forEach(key => {\r\n    if (key.startsWith('deckmaster_')) {\r\n      localStorage.removeItem(key);\r\n      clearedCount++;\r\n    }\r\n  });\r\n  \r\n  console.log(`✅ ${clearedCount} itens removidos do localStorage`);\r\n  return clearedCount;\r\n}\r\n\r\n// Exporta globalmente para uso no console\r\nif (typeof window !== 'undefined') {\r\n  window.migrateToIndexedDB = migrateToIndexedDB;\r\n  window.clearDeckMasterLocalStorage = clearDeckMasterLocalStorage;\r\n  console.log(\"💡 Use window.migrateToIndexedDB() para migrar dados do localStorage\");\r\n  console.log(\"💡 Use window.clearDeckMasterLocalStorage() para limpar localStorage\");\r\n}\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,OAAO,KAAM,oBAAoB,CAExC,KAAM,CAAAC,eAAe,CAAG,CACtB,yBACA;AAAA,CACD,CAED,MAAO,eAAe,CAAAC,kBAAkBA,CAAA,CAAG,CACzCC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC,CAEhE,GAAI,CAAAC,aAAa,CAAG,CAAC,CACrB,GAAI,CAAAC,MAAM,CAAG,CAAC,CAEd,IAAK,KAAM,CAAAC,GAAG,GAAI,CAAAN,eAAe,CAAE,CACjC,GAAI,CACF,KAAM,CAAAO,KAAK,CAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC,CAEvC,GAAIC,KAAK,CAAE,CACT;AACA,GAAI,CAAAG,WAAW,CACf,GAAI,CACFA,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,CACjC,CAAE,MAAAM,OAAA,CAAM,CACNH,WAAW,CAAGH,KAAK,CAAE;AACvB,CAEA;AACA,KAAM,CAAAR,OAAO,CAACe,OAAO,CAACR,GAAG,CAAEI,WAAW,CAAC,CAEvC;AACAF,YAAY,CAACO,UAAU,CAACT,GAAG,CAAC,CAE5BF,aAAa,EAAE,CACfF,OAAO,CAACC,GAAG,oBAAAa,MAAA,CAAeV,GAAG,CAAE,CAAC,CAClC,CACF,CAAE,MAAOW,KAAK,CAAE,CACdf,OAAO,CAACe,KAAK,0BAAAD,MAAA,CAAqBV,GAAG,MAAKW,KAAK,CAAC,CAChDZ,MAAM,EAAE,CACV,CACF,CAEAH,OAAO,CAACC,GAAG,0EAAAa,MAAA,CAESZ,aAAa,uBAAAY,MAAA,CACtBX,MAAM,QAChB,CAAC,CAEF,MAAO,CAAED,aAAa,CAAEC,MAAO,CAAC,CAClC,CAEA;AACA,MAAO,SAAS,CAAAa,2BAA2BA,CAAA,CAAG,CAC5ChB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAEzD,GAAI,CAAAgB,YAAY,CAAG,CAAC,CACpB,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACD,IAAI,CAACZ,YAAY,CAAC,CAEtCY,IAAI,CAACE,OAAO,CAAChB,GAAG,EAAI,CAClB,GAAIA,GAAG,CAACiB,UAAU,CAAC,aAAa,CAAC,CAAE,CACjCf,YAAY,CAACO,UAAU,CAACT,GAAG,CAAC,CAC5Ba,YAAY,EAAE,CAChB,CACF,CAAC,CAAC,CAEFjB,OAAO,CAACC,GAAG,WAAAa,MAAA,CAAMG,YAAY,oCAAkC,CAAC,CAChE,MAAO,CAAAA,YAAY,CACrB,CAEA;AACA,GAAI,MAAO,CAAAK,MAAM,GAAK,WAAW,CAAE,CACjCA,MAAM,CAACvB,kBAAkB,CAAGA,kBAAkB,CAC9CuB,MAAM,CAACN,2BAA2B,CAAGA,2BAA2B,CAChEhB,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC,CACnFD,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC,CACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}