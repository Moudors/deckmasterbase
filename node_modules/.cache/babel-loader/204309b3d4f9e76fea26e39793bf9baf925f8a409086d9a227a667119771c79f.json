{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useMemo}from\"react\";import{useParams,useNavigate,useLocation}from\"react-router-dom\";import{motion,AnimatePresence}from\"framer-motion\";import{X,Eye,Trash2}from\"lucide-react\";import{useAuthState}from\"../hooks/useAuthState\";import SearchBar from\"../components/deck/SearchBar\";import{useDoubleClickTransparency}from\"../components/deck/DoubleClickTransparencyManager\";import CardGridItem from\"../components/deck/CardGridItem\";import TradeConfirmDialog from\"../components/deck/TradeConfirmDialog\";import BuyRequestModal from\"../components/deck/BuyRequestModal\";import ArtSelector from\"../components/deck/ArtSelector\";import DeleteQuantityDialog from\"../components/deck/DeleteQuantityDialog\";import{Button}from\"../components/ui/button\";import{Alert,AlertDescription}from\"../components/ui/alert\";import{AlertCircle}from\"lucide-react\";import{useConnectivity}from\"../lib/connectivityManager\";import{useDecks,useDeckCards}from\"../lib/useUnifiedDecks\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Deckbuilder=()=>{var _location$state3;// Declara√ß√£o √∫nica dos hooks e estados\nconst{id:deckId}=useParams();const navigate=useNavigate();const location=useLocation();const[user]=useAuthState();const{isOnline,canSaveData}=useConnectivity();const{decks=[],isLoading:decksLoading,error:decksError,updateDeck,refetch:refetchDecks}=useDecks();const{cards:deckCards=[],isLoading:cardsLoading,error:cardsError,addCard,updateCard,deleteCard,canEdit}=useDeckCards(deckId);const{refetch:refetchCards}=useDeckCards(deckId);const doubleClickTransparency=useDoubleClickTransparency(updateCard,refetchCards);const[showTradeDialog,setShowTradeDialog]=useState(false);const[selectedCardForTrade,setSelectedCardForTrade]=useState(null);const[searchTimeout,setSearchTimeout]=useState(false);const[error,setError]=useState(null);const[isSearching,setIsSearching]=useState(false);const[isSelectionMode,setIsSelectionMode]=useState(false);const[selectedCards,setSelectedCards]=useState([]);const[showArtSelector,setShowArtSelector]=useState(false);const[selectedCardForArt,setSelectedCardForArt]=useState(null);const[showDeleteDialog,setShowDeleteDialog]=useState(false);const[cardsToDelete,setCardsToDelete]=useState([]);const[showBuyRequestModal,setShowBuyRequestModal]=useState(false);const[selectedCardForBuy,setSelectedCardForBuy]=useState(null);const[deckOwnerName,setDeckOwnerName]=useState(\"\");// Protege contra decks locais - sistema agora √© online-first apenas\nuseEffect(()=>{if(deckId&&deckId.startsWith(\"local_\")){navigate(\"/\",{state:{message:\"Sistema migrado: decks locais n√£o s√£o mais suportados. Use apenas decks online.\",type:\"warning\"}});return;}},[deckId,navigate]);// Controla timeout para busca do deck\nuseEffect(()=>{if(!deckId||decksLoading){setSearchTimeout(false);return;}console.log(\"üîç Iniciando timer para busca do deck:\",deckId);// Tenta refetch ap√≥s 2 segundos se deck n√£o foi encontrado\nconst refetchTimer=setTimeout(async()=>{if(!(decks!==null&&decks!==void 0&&decks.find(deck=>deck.id===deckId))){console.log(\"üîÑ Deck n√£o encontrado, tentando refetch...\");try{await refetchDecks();}catch(error){console.error(\"‚ùå Erro no refetch:\",error);}}},2000);// Aguarda 5 segundos antes de mostrar \"deck n√£o encontrado\"\n// Aumentado de 3 para 5 segundos para decks rec√©m-criados\nconst timeoutTimer=setTimeout(()=>{console.log(\"‚è∞ Timeout atingido - deck ainda n√£o encontrado\");setSearchTimeout(true);},5000);return()=>{console.log(\"üõë Limpando timers de busca\");clearTimeout(refetchTimer);clearTimeout(timeoutTimer);};},[deckId,decksLoading,decks,refetchDecks]);// Busca o deck atual\nconst[remoteDeck,setRemoteDeck]=useState(null);useEffect(()=>{if(!(decks!==null&&decks!==void 0&&decks.find(deck=>deck.id===deckId))){// Se n√£o encontrar localmente, busca direto do banco\nimport(\"../lib/supabaseOperations\").then(_ref=>{let{deckOperations}=_ref;deckOperations.getDeck(deckId).then(deck=>{if(deck){setRemoteDeck(deck);console.log(\"‚úÖ Deck encontrado remotamente:\",deck.name);}else{setRemoteDeck(null);console.log(\"‚ùå Deck n√£o encontrado remotamente\");}}).catch(err=>{setRemoteDeck(null);console.error(\"‚ùå Erro ao buscar deck remotamente:\",err);});});}else{setRemoteDeck(null);}},[decks,deckId]);const currentDeck=useMemo(()=>{const foundDeck=(decks===null||decks===void 0?void 0:decks.find(deck=>deck.id===deckId))||remoteDeck;if(foundDeck){console.log(\"‚úÖ Deck encontrado:\",foundDeck.name);}else{console.log(\"‚ùå Deck n√£o encontrado na lista nem remotamente\");}return foundDeck;},[decks,deckId,remoteDeck]);// Estados de carregamento e erro\nconst isLoading=decksLoading||cardsLoading;const deckError=decksError||cardsError;// Determina se √© visualiza√ß√£o apenas (bloqueia busca para decks de amigos)\nconst isViewOnly=!canEdit||currentDeck&&(user===null||user===void 0?void 0:user.id)!==currentDeck.owner_id;// Verifica se √© um deck Trade de um amigo\nconst isFriendTradeDeck=useMemo(()=>{const result=isViewOnly&&currentDeck&&(currentDeck.format===\"Trade\"||currentDeck.format===\"Trades\");console.log(\"üîç isFriendTradeDeck:\",{result,isViewOnly,currentDeck:currentDeck===null||currentDeck===void 0?void 0:currentDeck.deck_name,format:currentDeck===null||currentDeck===void 0?void 0:currentDeck.format,ownerId:currentDeck===null||currentDeck===void 0?void 0:currentDeck.owner_id,userId:user===null||user===void 0?void 0:user.id});return result;},[isViewOnly,currentDeck,user===null||user===void 0?void 0:user.id]);// Buscar nome do dono do deck se for deck de amigo\nuseEffect(()=>{const fetchOwnerName=async()=>{if(currentDeck!==null&&currentDeck!==void 0&&currentDeck.owner_id&&isViewOnly){try{const{userOperations}=await import(\"../lib/supabaseOperations\");const ownerData=await userOperations.getUser(currentDeck.owner_id);setDeckOwnerName((ownerData===null||ownerData===void 0?void 0:ownerData.display_name)||\"Amigo\");}catch(err){console.error(\"Erro ao buscar nome do dono:\",err);setDeckOwnerName(\"Amigo\");}}};fetchOwnerName();},[currentDeck===null||currentDeck===void 0?void 0:currentDeck.owner_id,isViewOnly]);// Adiciona carta do Advanced Search (controle de execu√ß√£o √∫nica)\nconst hasAddedRef=React.useRef(false);useEffect(()=>{var _location$state,_location$state2;if((_location$state=location.state)!==null&&_location$state!==void 0&&_location$state.addCard&&!hasAddedRef.current){hasAddedRef.current=true;const addCardFromAdvancedSearch=async()=>{if(!deckId||!canEdit){navigate(location.pathname,{state:_objectSpread(_objectSpread({},location.state),{},{addCard:null}),replace:true});return;}const cardToAdd=location.state.addCard;try{var _cardData$image_uris,_cardData$card_faces,_cardData$card_faces$,_cardData$card_faces$2;// Buscar dados completos da carta no Scryfall\nconst response=await fetch(\"https://api.scryfall.com/cards/named?exact=\".concat(encodeURIComponent(cardToAdd.name)));const cardData=await response.json();const imageUrl=((_cardData$image_uris=cardData.image_uris)===null||_cardData$image_uris===void 0?void 0:_cardData$image_uris.normal)||((_cardData$card_faces=cardData.card_faces)===null||_cardData$card_faces===void 0?void 0:(_cardData$card_faces$=_cardData$card_faces[0])===null||_cardData$card_faces$===void 0?void 0:(_cardData$card_faces$2=_cardData$card_faces$.image_uris)===null||_cardData$card_faces$2===void 0?void 0:_cardData$card_faces$2.normal);await addCard({scryfall_id:cardData.id,card_name:cardData.name,image_url:imageUrl,mana_cost:cardData.mana_cost||\"\",type_line:cardData.type_line||\"\",quantity:1,acquired:false,card_faces:cardData.card_faces||null});navigate(location.pathname,{state:_objectSpread(_objectSpread({},location.state),{},{addCard:null}),replace:true});}catch(error){setError(error.message||\"Erro ao adicionar carta\");navigate(location.pathname,{state:_objectSpread(_objectSpread({},location.state),{},{addCard:null}),replace:true});}};addCardFromAdvancedSearch();}if(!((_location$state2=location.state)!==null&&_location$state2!==void 0&&_location$state2.addCard)){hasAddedRef.current=false;}},[(_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.addCard,deckId,canEdit,addCard,navigate,location.pathname,location.state]);// Handlers para cartas do deck\nconst handleQuantityChange=async(card,newQuantity)=>{if(!canEdit){setError(\"N√£o √© poss√≠vel modificar cartas offline. Conecte-se √† internet.\");return;}if(newQuantity<=0){await handleRemoveCard(card);return;}try{await updateCard({cardId:card.id,updates:{quantity:newQuantity}});}catch(error){console.error(\"‚ùå Erro ao alterar quantidade:\",error);setError(error.message||\"Erro ao alterar quantidade\");}};const handleRemoveCard=async card=>{if(!canEdit){setError(\"N√£o √© poss√≠vel remover cartas offline. Conecte-se √† internet.\");return;}try{await deleteCard(card.id);}catch(error){console.error(\"‚ùå Erro ao remover carta:\",error);setError(error.message||\"Erro ao remover carta\");}};// Handlers para modo de sele√ß√£o\nconst handleToggleSelect=cardId=>{setSelectedCards(prev=>prev.includes(cardId)?prev.filter(id=>id!==cardId):[...prev,cardId]);};const handleDeleteSelected=async()=>{if(selectedCards.length>0&&canEdit){const cardsToRemove=deckCards.filter(c=>selectedCards.includes(c.id));setCardsToDelete(cardsToRemove);setShowDeleteDialog(true);}};const handleConfirmDelete=async quantities=>{try{const deletions=Object.entries(quantities).map(_ref2=>{let[cardId,quantity]=_ref2;return{cardId,quantityToDelete:quantity};});for(const deletion of deletions){const card=deckCards.find(c=>c.id===deletion.cardId);if(card){if(deletion.quantityToDelete>=card.quantity){// Deletar carta completamente\nawait deleteCard(deletion.cardId);}else{// Reduzir quantidade\nconst newQuantity=card.quantity-deletion.quantityToDelete;await updateCard({cardId:deletion.cardId,updates:{quantity:newQuantity}});}}}setSelectedCards([]);setIsSelectionMode(false);setShowDeleteDialog(false);setCardsToDelete([]);}catch(error){setError(\"Erro ao remover cartas selecionadas\");}};// Handler para sele√ß√£o de arte\nconst handleShowArtSelector=card=>{console.log('[DEBUG] handleShowArtSelector chamado',{card,isViewOnly});if(isViewOnly){console.log('[DEBUG] N√£o abrindo modal - modo view only');return;}console.log('[DEBUG] Abrindo ArtSelector modal');setSelectedCardForArt(card);setShowArtSelector(true);};const handleSelectArt=async artData=>{let updates=_objectSpread({},artData);// Se for carta dupla face, atualiza image_url e image_uris.normal em ambas as faces\nif(selectedCardForArt.card_faces&&Array.isArray(selectedCardForArt.card_faces)){const newCardFaces=selectedCardForArt.card_faces.map(face=>_objectSpread(_objectSpread({},face),{},{image_url:artData.image_url,image_uris:_objectSpread(_objectSpread({},face.image_uris),{},{normal:artData.image_url})}));updates.card_faces=newCardFaces;}// Log de debug para verificar updates enviados\nconsole.log('[DEBUG] handleSelectArt - updates:',updates);if(selectedCardForArt&&!isViewOnly){var _location$state4;// Se veio da busca avan√ßada, n√£o faz nada (adi√ß√£o j√° foi feita pelo fluxo principal)\nif((_location$state4=location.state)!==null&&_location$state4!==void 0&&_location$state4.addCard){setShowArtSelector(false);setSelectedCardForArt(null);return;}// Fluxo normal: alterar arte de carta j√° existente\ntry{let updates=_objectSpread({},artData);// Se for carta dupla face, atualiza image_url em ambas as faces\nif(selectedCardForArt.card_faces&&Array.isArray(selectedCardForArt.card_faces)){const newCardFaces=selectedCardForArt.card_faces.map(face=>_objectSpread(_objectSpread({},face),{},{image_url:artData.image_url,image_uris:_objectSpread(_objectSpread({},face.image_uris),{},{normal:artData.image_url})}));updates.card_faces=newCardFaces;}await updateCard({cardId:selectedCardForArt.id,updates});setShowArtSelector(false);setSelectedCardForArt(null);}catch(error){setError(\"Erro ao alterar arte da carta\");}}};// Handler para atualizar cover do deck\nconst handleUpdateDeckCover=async coverImageUrl=>{if(currentDeck&&!isViewOnly){try{await updateDeck({id:currentDeck.id,data:{cover_image_url:coverImageUrl}});}catch(error){setError(\"Erro ao alterar cover do deck\");}}};// Calcula total de cartas\nconst totalCards=deckCards.reduce((sum,c)=>sum+(c.quantity||1),0);// Mostra loading enquanto busca o deck ou ainda n√£o passou o timeout\nif(isLoading||!currentDeck&&!searchTimeout){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-blue-400 mb-4\",children:isLoading?\"Carregando deck...\":\"Procurando deck rec√©m-criado...\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-400 mb-4 text-sm\",children:!isLoading&&\"Aguarde alguns segundos para a sincroniza√ß√£o\"}),/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"})]})});}if(deckError){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-red-400 mb-4\",children:[\"Erro ao carregar deck: \",deckError]}),/*#__PURE__*/_jsx(Button,{onClick:()=>navigate(\"/\"),className:\"bg-blue-600 hover:bg-blue-700\",children:\"Voltar para Home\"})]})});}if(!currentDeck&&searchTimeout){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-yellow-400 mb-4\",children:\"Deck n\\xE3o encontrado\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>navigate(\"/\"),className:\"bg-blue-600 hover:bg-blue-700\",children:\"Voltar para Home\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sticky top-0 z-30 bg-gray-900 border-b border-gray-800 shadow-lg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between px-4 py-3\",children:[/*#__PURE__*/_jsx(Button,{variant:\"ghost\",size:\"icon\",onClick:()=>navigate(\"/\"),className:\"text-gray-400 hover:text-white\",children:/*#__PURE__*/_jsx(X,{className:\"w-6 h-6\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center flex-1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-center gap-2\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-lg font-bold text-white\",children:currentDeck===null||currentDeck===void 0?void 0:currentDeck.name}),isViewOnly&&/*#__PURE__*/_jsx(Eye,{className:\"w-4 h-4 text-blue-400\"})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-400\",children:[currentDeck===null||currentDeck===void 0?void 0:currentDeck.format,\" \\u2022 \",totalCards,\" cartas\"]})]}),!isViewOnly&&/*#__PURE__*/_jsx(Button,{variant:\"ghost\",size:\"icon\",onClick:()=>{if(isSelectionMode&&selectedCards.length>0){handleDeleteSelected();}else{setIsSelectionMode(!isSelectionMode);setSelectedCards([]);}},className:\"\".concat(isSelectionMode&&selectedCards.length>0?\"text-red-500 hover:text-red-400\":\"text-gray-400 hover:text-white\"),children:/*#__PURE__*/_jsx(Trash2,{className:\"w-5 h-5\"})}),isViewOnly&&/*#__PURE__*/_jsx(\"div\",{className:\"w-10\"})]})}),!isViewOnly&&/*#__PURE__*/_jsx(SearchBar,{deckId:deckId,isSearching:isSearching,setIsSearching:setIsSearching}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"px-4 pt-4\",children:/*#__PURE__*/_jsxs(Alert,{className:error.includes(\"sucesso\")?\"bg-green-900/20 border-green-800\":\"bg-red-900/20 border-red-800\",children:[/*#__PURE__*/_jsx(AlertCircle,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(AlertDescription,{className:error.includes(\"sucesso\")?\"text-green-400\":\"text-red-400\",children:error})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"p-4\",children:deckCards.length===0&&!isLoading?/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center justify-center py-20 text-center\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-400 text-lg mb-2\",children:isViewOnly?\"Este deck ainda n√£o tem cartas\":\"Nenhuma carta adicionada ainda\"}),!isViewOnly&&/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-500 text-sm\",children:\"Use a barra de busca para adicionar cartas\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-3 gap-4\",children:/*#__PURE__*/_jsx(AnimatePresence,{mode:\"popLayout\",children:deckCards.map(card=>{console.log('[DEBUG] Renderizando card:',{cardId:card.id,is_transparent:card.is_transparent,typeof:typeof card.is_transparent});const transparent=card.is_transparent===true||card.is_transparent==='true';// Long press manual\nlet pressTimer=null;let lastTap=0;const handleTouchStart=e=>{// Cancelar timer anterior se existir\nif(pressTimer)clearTimeout(pressTimer);// Iniciar timer de long press (500ms)\npressTimer=setTimeout(()=>{console.log(\"‚è±Ô∏è Long press detectado!\",{isFriendTradeDeck,cardName:card.card_name,isViewOnly});if(isFriendTradeDeck){console.log(\"üõí Abrindo BuyRequestModal via long press\");setSelectedCardForBuy(card);setShowBuyRequestModal(true);}else if(!isViewOnly){// Se n√£o √© deck de amigo e n√£o √© viewOnly, abre modal de arte\nconsole.log(\"üé® Abrindo ArtSelector via long press\");handleShowArtSelector(card);}},500);// 500ms = meio segundo\n};const handleTouchEnd=async e=>{// Cancelar long press se soltar antes de 500ms\nif(pressTimer){clearTimeout(pressTimer);pressTimer=null;}// Double tap detection (mantido para desktop)\nconst now=Date.now();if(now-lastTap<400){if(isFriendTradeDeck){setSelectedCardForBuy(card);setShowBuyRequestModal(true);}else if(isViewOnly&&transparent){setSelectedCardForTrade(card);setShowTradeDialog(true);}else if(!isViewOnly){await doubleClickTransparency(card,deckCards);}}lastTap=now;};const handleTouchCancel=()=>{// Cancelar long press se o toque for cancelado\nif(pressTimer){clearTimeout(pressTimer);pressTimer=null;}};return/*#__PURE__*/_jsx(\"div\",{onDoubleClick:async()=>{console.log(\"üñ±Ô∏è Duplo clique detectado!\",{isFriendTradeDeck,cardName:card.card_name,isViewOnly,transparent});if(isFriendTradeDeck){console.log(\"üõí Abrindo BuyRequestModal via double click\");setSelectedCardForBuy(card);setShowBuyRequestModal(true);}else if(isViewOnly&&transparent){setSelectedCardForTrade(card);setShowTradeDialog(true);}else if(!isViewOnly){await doubleClickTransparency(card,deckCards);}},onTouchStart:handleTouchStart,onTouchEnd:handleTouchEnd,onTouchCancel:handleTouchCancel,style:{opacity:transparent?0.5:1,transition:\"opacity 0.3s\"},children:/*#__PURE__*/_jsx(CardGridItem,{card:card,isSelectionMode:isSelectionMode&&!isViewOnly,isSelected:selectedCards.includes(card.id),onToggleSelect:handleToggleSelect,onShowArtSelector:handleShowArtSelector,isViewOnly:isViewOnly,currentUserId:user===null||user===void 0?void 0:user.id,deckOwnerId:currentDeck===null||currentDeck===void 0?void 0:currentDeck.user_id})},card.id);})})})}),isSelectionMode&&!isViewOnly&&/*#__PURE__*/_jsx(motion.div,{initial:{y:100},animate:{y:0},exit:{y:100},className:\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-gray-800 border border-gray-700 rounded-full px-6 py-3 shadow-2xl\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-white font-medium\",children:selectedCards.length>0?\"\".concat(selectedCards.length,\" carta\").concat(selectedCards.length>1?'s':'',\" selecionada\").concat(selectedCards.length>1?'s':''):\"Selecione cartas para remover\"})}),/*#__PURE__*/_jsx(ArtSelector,{isOpen:showArtSelector,onClose:()=>{setShowArtSelector(false);setSelectedCardForArt(null);},card:selectedCardForArt,onSelectArt:handleSelectArt,onAddCard:addCard,onUpdateCard:updateCard,deckId:deckId}),/*#__PURE__*/_jsx(DeleteQuantityDialog,{isOpen:showDeleteDialog,onClose:()=>{setShowDeleteDialog(false);setCardsToDelete([]);},cards:cardsToDelete,deckId:deckId,onConfirm:handleConfirmDelete,isLoading:false}),showTradeDialog&&selectedCardForTrade&&/*#__PURE__*/_jsx(TradeConfirmDialog,{isOpen:showTradeDialog,onClose:()=>setShowTradeDialog(false),card:selectedCardForTrade,onConfirm:async()=>{var _user$user_metadata;console.log('[TRADE DEBUG] user:',user);console.log('[TRADE DEBUG] user.user_metadata:',user===null||user===void 0?void 0:user.user_metadata);console.log('[TRADE DEBUG] user.user_metadata.full_name:',user===null||user===void 0?void 0:(_user$user_metadata=user.user_metadata)===null||_user$user_metadata===void 0?void 0:_user$user_metadata.full_name);// Envia mensagem na caixa de mensagem ao oferecer trade (permite duplicados)\ntry{const recipientId=currentDeck===null||currentDeck===void 0?void 0:currentDeck.owner_id;const messageText=\"Oferta de trade: \".concat(selectedCardForTrade.card_name);const messageData={recipient_id:recipientId,sender_id:user===null||user===void 0?void 0:user.id,card_id:selectedCardForTrade.id,card_name:selectedCardForTrade.card_name,type:'trade_offer',text:messageText,created_at:new Date().toISOString()};const{messageOperations}=await import(\"../lib/supabaseOperations\");// Corrigir campo para 'content' ao inv√©s de 'text' e adicionar nome do remetente\nconst messageDataFixed=_objectSpread({},messageData);if(messageDataFixed.text){messageDataFixed.content=messageDataFixed.text;delete messageDataFixed.text;}// Buscar display_name do usu√°rio logado na tabela users\nlet senderName=\"\";try{const{userOperations}=await import(\"../lib/supabaseOperations\");const userDb=await userOperations.getUser(user.id);senderName=(userDb===null||userDb===void 0?void 0:userDb.display_name)||\"\";console.log('[TRADE DEBUG] display_name do usu√°rio:',senderName);}catch(err){console.error('[TRADE DEBUG] Erro ao buscar display_name:',err);}if(!messageDataFixed.sender_name){messageDataFixed.sender_name=senderName;}await messageOperations.sendMessage(messageDataFixed);setShowTradeDialog(false);setSelectedCardForTrade(null);setError(\"Mensagem de trade enviada com sucesso!\");}catch(err){console.error('[TRADE] Erro ao enviar mensagem:',err);setError(\"Erro ao enviar mensagem de trade: \"+((err===null||err===void 0?void 0:err.message)||err));}}}),/*#__PURE__*/_jsx(BuyRequestModal,{isOpen:showBuyRequestModal,onClose:()=>{setShowBuyRequestModal(false);setSelectedCardForBuy(null);},card:selectedCardForBuy,deckOwnerId:currentDeck===null||currentDeck===void 0?void 0:currentDeck.owner_id,deckOwnerName:deckOwnerName||\"Amigo\"})]});};export default Deckbuilder;","map":{"version":3,"names":["React","useState","useEffect","useMemo","useParams","useNavigate","useLocation","motion","AnimatePresence","X","Eye","Trash2","useAuthState","SearchBar","useDoubleClickTransparency","CardGridItem","TradeConfirmDialog","BuyRequestModal","ArtSelector","DeleteQuantityDialog","Button","Alert","AlertDescription","AlertCircle","useConnectivity","useDecks","useDeckCards","jsx","_jsx","jsxs","_jsxs","Deckbuilder","_location$state3","id","deckId","navigate","location","user","isOnline","canSaveData","decks","isLoading","decksLoading","error","decksError","updateDeck","refetch","refetchDecks","cards","deckCards","cardsLoading","cardsError","addCard","updateCard","deleteCard","canEdit","refetchCards","doubleClickTransparency","showTradeDialog","setShowTradeDialog","selectedCardForTrade","setSelectedCardForTrade","searchTimeout","setSearchTimeout","setError","isSearching","setIsSearching","isSelectionMode","setIsSelectionMode","selectedCards","setSelectedCards","showArtSelector","setShowArtSelector","selectedCardForArt","setSelectedCardForArt","showDeleteDialog","setShowDeleteDialog","cardsToDelete","setCardsToDelete","showBuyRequestModal","setShowBuyRequestModal","selectedCardForBuy","setSelectedCardForBuy","deckOwnerName","setDeckOwnerName","startsWith","state","message","type","console","log","refetchTimer","setTimeout","find","deck","timeoutTimer","clearTimeout","remoteDeck","setRemoteDeck","then","_ref","deckOperations","getDeck","name","catch","err","currentDeck","foundDeck","deckError","isViewOnly","owner_id","isFriendTradeDeck","result","format","deck_name","ownerId","userId","fetchOwnerName","userOperations","ownerData","getUser","display_name","hasAddedRef","useRef","_location$state","_location$state2","current","addCardFromAdvancedSearch","pathname","_objectSpread","replace","cardToAdd","_cardData$image_uris","_cardData$card_faces","_cardData$card_faces$","_cardData$card_faces$2","response","fetch","concat","encodeURIComponent","cardData","json","imageUrl","image_uris","normal","card_faces","scryfall_id","card_name","image_url","mana_cost","type_line","quantity","acquired","handleQuantityChange","card","newQuantity","handleRemoveCard","cardId","updates","handleToggleSelect","prev","includes","filter","handleDeleteSelected","length","cardsToRemove","c","handleConfirmDelete","quantities","deletions","Object","entries","map","_ref2","quantityToDelete","deletion","handleShowArtSelector","handleSelectArt","artData","Array","isArray","newCardFaces","face","_location$state4","handleUpdateDeckCover","coverImageUrl","data","cover_image_url","totalCards","reduce","sum","className","children","onClick","variant","size","mode","is_transparent","typeof","transparent","pressTimer","lastTap","handleTouchStart","e","cardName","handleTouchEnd","now","Date","handleTouchCancel","onDoubleClick","onTouchStart","onTouchEnd","onTouchCancel","style","opacity","transition","isSelected","onToggleSelect","onShowArtSelector","currentUserId","deckOwnerId","user_id","div","initial","y","animate","exit","isOpen","onClose","onSelectArt","onAddCard","onUpdateCard","onConfirm","_user$user_metadata","user_metadata","full_name","recipientId","messageText","messageData","recipient_id","sender_id","card_id","text","created_at","toISOString","messageOperations","messageDataFixed","content","senderName","userDb","sender_name","sendMessage"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/pages/Deckbuilder.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { X, Eye, Trash2 } from \"lucide-react\";\r\nimport { useAuthState } from \"../hooks/useAuthState\";\r\nimport SearchBar from \"../components/deck/SearchBar\";\r\nimport { useDoubleClickTransparency } from \"../components/deck/DoubleClickTransparencyManager\";\r\nimport CardGridItem from \"../components/deck/CardGridItem\";\r\nimport TradeConfirmDialog from \"../components/deck/TradeConfirmDialog\";\r\nimport BuyRequestModal from \"../components/deck/BuyRequestModal\";\r\nimport ArtSelector from \"../components/deck/ArtSelector\";\r\nimport DeleteQuantityDialog from \"../components/deck/DeleteQuantityDialog\";\r\nimport { Button } from \"../components/ui/button\";\r\nimport { Alert, AlertDescription } from \"../components/ui/alert\";\r\nimport { AlertCircle } from \"lucide-react\";\r\nimport { useConnectivity } from \"../lib/connectivityManager\";\r\nimport { useDecks, useDeckCards } from \"../lib/useUnifiedDecks\";\r\n\r\nconst Deckbuilder = () => {\r\n  // Declara√ß√£o √∫nica dos hooks e estados\r\n  const { id: deckId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [user] = useAuthState();\r\n  const { isOnline, canSaveData } = useConnectivity();\r\n  const { \r\n    decks = [], \r\n    isLoading: decksLoading, \r\n    error: decksError,\r\n    updateDeck,\r\n    refetch: refetchDecks\r\n  } = useDecks();\r\n  const { \r\n    cards: deckCards = [], \r\n    isLoading: cardsLoading, \r\n    error: cardsError,\r\n    addCard,\r\n    updateCard,\r\n    deleteCard,\r\n    canEdit \r\n  } = useDeckCards(deckId);\r\n  const { refetch: refetchCards } = useDeckCards(deckId);\r\n  const doubleClickTransparency = useDoubleClickTransparency(updateCard, refetchCards);\r\n  const [showTradeDialog, setShowTradeDialog] = useState(false);\r\n  const [selectedCardForTrade, setSelectedCardForTrade] = useState(null);\r\n  const [searchTimeout, setSearchTimeout] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [showArtSelector, setShowArtSelector] = useState(false);\r\n  const [selectedCardForArt, setSelectedCardForArt] = useState(null);\r\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\r\n  const [cardsToDelete, setCardsToDelete] = useState([]);\r\n  const [showBuyRequestModal, setShowBuyRequestModal] = useState(false);\r\n  const [selectedCardForBuy, setSelectedCardForBuy] = useState(null);\r\n  const [deckOwnerName, setDeckOwnerName] = useState(\"\");\r\n\r\n  // Protege contra decks locais - sistema agora √© online-first apenas\r\n  useEffect(() => {\r\n    if (deckId && deckId.startsWith(\"local_\")) {\r\n      navigate(\"/\", { \r\n        state: { \r\n          message: \"Sistema migrado: decks locais n√£o s√£o mais suportados. Use apenas decks online.\",\r\n          type: \"warning\"\r\n        } \r\n      });\r\n      return;\r\n    }\r\n  }, [deckId, navigate]);\r\n\r\n  // Controla timeout para busca do deck\r\n  useEffect(() => {\r\n    if (!deckId || decksLoading) {\r\n      setSearchTimeout(false);\r\n      return;\r\n    }\r\n\r\n    console.log(\"üîç Iniciando timer para busca do deck:\", deckId);\r\n    \r\n    // Tenta refetch ap√≥s 2 segundos se deck n√£o foi encontrado\r\n    const refetchTimer = setTimeout(async () => {\r\n      if (!decks?.find(deck => deck.id === deckId)) {\r\n        console.log(\"üîÑ Deck n√£o encontrado, tentando refetch...\");\r\n        try {\r\n          await refetchDecks();\r\n        } catch (error) {\r\n          console.error(\"‚ùå Erro no refetch:\", error);\r\n        }\r\n      }\r\n    }, 2000);\r\n    \r\n    // Aguarda 5 segundos antes de mostrar \"deck n√£o encontrado\"\r\n    // Aumentado de 3 para 5 segundos para decks rec√©m-criados\r\n    const timeoutTimer = setTimeout(() => {\r\n      console.log(\"‚è∞ Timeout atingido - deck ainda n√£o encontrado\");\r\n      setSearchTimeout(true);\r\n    }, 5000);\r\n\r\n    return () => {\r\n      console.log(\"üõë Limpando timers de busca\");\r\n      clearTimeout(refetchTimer);\r\n      clearTimeout(timeoutTimer);\r\n    };\r\n  }, [deckId, decksLoading, decks, refetchDecks]);\r\n\r\n  // Busca o deck atual\r\n  const [remoteDeck, setRemoteDeck] = useState(null);\r\n  useEffect(() => {\r\n    if (!decks?.find(deck => deck.id === deckId)) {\r\n      // Se n√£o encontrar localmente, busca direto do banco\r\n      import(\"../lib/supabaseOperations\").then(({ deckOperations }) => {\r\n        deckOperations.getDeck(deckId)\r\n          .then(deck => {\r\n            if (deck) {\r\n              setRemoteDeck(deck);\r\n              console.log(\"‚úÖ Deck encontrado remotamente:\", deck.name);\r\n            } else {\r\n              setRemoteDeck(null);\r\n              console.log(\"‚ùå Deck n√£o encontrado remotamente\");\r\n            }\r\n          })\r\n          .catch(err => {\r\n            setRemoteDeck(null);\r\n            console.error(\"‚ùå Erro ao buscar deck remotamente:\", err);\r\n          });\r\n      });\r\n    } else {\r\n      setRemoteDeck(null);\r\n    }\r\n  }, [decks, deckId]);\r\n\r\n  const currentDeck = useMemo(() => {\r\n    const foundDeck = decks?.find(deck => deck.id === deckId) || remoteDeck;\r\n    if (foundDeck) {\r\n      console.log(\"‚úÖ Deck encontrado:\", foundDeck.name);\r\n    } else {\r\n      console.log(\"‚ùå Deck n√£o encontrado na lista nem remotamente\");\r\n    }\r\n    return foundDeck;\r\n  }, [decks, deckId, remoteDeck]);\r\n\r\n  // Estados de carregamento e erro\r\n  const isLoading = decksLoading || cardsLoading;\r\n  const deckError = decksError || cardsError;\r\n\r\n  // Determina se √© visualiza√ß√£o apenas (bloqueia busca para decks de amigos)\r\n  const isViewOnly = !canEdit || (currentDeck && user?.id !== currentDeck.owner_id);\r\n  \r\n  // Verifica se √© um deck Trade de um amigo\r\n  const isFriendTradeDeck = useMemo(() => {\r\n    const result = isViewOnly && \r\n           currentDeck && \r\n           (currentDeck.format === \"Trade\" || currentDeck.format === \"Trades\");\r\n    console.log(\"üîç isFriendTradeDeck:\", {\r\n      result,\r\n      isViewOnly,\r\n      currentDeck: currentDeck?.deck_name,\r\n      format: currentDeck?.format,\r\n      ownerId: currentDeck?.owner_id,\r\n      userId: user?.id\r\n    });\r\n    return result;\r\n  }, [isViewOnly, currentDeck, user?.id]);\r\n\r\n  // Buscar nome do dono do deck se for deck de amigo\r\n  useEffect(() => {\r\n    const fetchOwnerName = async () => {\r\n      if (currentDeck?.owner_id && isViewOnly) {\r\n        try {\r\n          const { userOperations } = await import(\"../lib/supabaseOperations\");\r\n          const ownerData = await userOperations.getUser(currentDeck.owner_id);\r\n          setDeckOwnerName(ownerData?.display_name || \"Amigo\");\r\n        } catch (err) {\r\n          console.error(\"Erro ao buscar nome do dono:\", err);\r\n          setDeckOwnerName(\"Amigo\");\r\n        }\r\n      }\r\n    };\r\n    \r\n    fetchOwnerName();\r\n  }, [currentDeck?.owner_id, isViewOnly]);\r\n\r\n  // Adiciona carta do Advanced Search (controle de execu√ß√£o √∫nica)\r\n  const hasAddedRef = React.useRef(false);\r\n  useEffect(() => {\r\n    if (location.state?.addCard && !hasAddedRef.current) {\r\n      hasAddedRef.current = true;\r\n      const addCardFromAdvancedSearch = async () => {\r\n        if (!deckId || !canEdit) {\r\n          navigate(location.pathname, { \r\n            state: { ...location.state, addCard: null }, \r\n            replace: true \r\n          });\r\n          return;\r\n        }\r\n        const cardToAdd = location.state.addCard;\r\n        try {\r\n          // Buscar dados completos da carta no Scryfall\r\n          const response = await fetch(\r\n            `https://api.scryfall.com/cards/named?exact=${encodeURIComponent(cardToAdd.name)}`\r\n          );\r\n          const cardData = await response.json();\r\n          const imageUrl = cardData.image_uris?.normal || cardData.card_faces?.[0]?.image_uris?.normal;\r\n          await addCard({\r\n            scryfall_id: cardData.id,\r\n            card_name: cardData.name,\r\n            image_url: imageUrl,\r\n            mana_cost: cardData.mana_cost || \"\",\r\n            type_line: cardData.type_line || \"\",\r\n            quantity: 1,\r\n            acquired: false,\r\n            card_faces: cardData.card_faces || null,\r\n          });\r\n          navigate(location.pathname, { \r\n            state: { ...location.state, addCard: null }, \r\n            replace: true \r\n          });\r\n        } catch (error) {\r\n          setError(error.message || \"Erro ao adicionar carta\");\r\n          navigate(location.pathname, { \r\n            state: { ...location.state, addCard: null }, \r\n            replace: true \r\n          });\r\n        }\r\n      };\r\n      addCardFromAdvancedSearch();\r\n    }\r\n    if (!location.state?.addCard) {\r\n      hasAddedRef.current = false;\r\n    }\r\n  }, [location.state?.addCard, deckId, canEdit, addCard, navigate, location.pathname, location.state]);\r\n\r\n  // Handlers para cartas do deck\r\n\r\n  const handleQuantityChange = async (card, newQuantity) => {\r\n    if (!canEdit) {\r\n      setError(\"N√£o √© poss√≠vel modificar cartas offline. Conecte-se √† internet.\");\r\n      return;\r\n    }\r\n\r\n    if (newQuantity <= 0) {\r\n      await handleRemoveCard(card);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateCard({ cardId: card.id, updates: { quantity: newQuantity } });\r\n    } catch (error) {\r\n      console.error(\"‚ùå Erro ao alterar quantidade:\", error);\r\n      setError(error.message || \"Erro ao alterar quantidade\");\r\n    }\r\n  };\r\n\r\n  const handleRemoveCard = async (card) => {\r\n    if (!canEdit) {\r\n      setError(\"N√£o √© poss√≠vel remover cartas offline. Conecte-se √† internet.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteCard(card.id);\r\n    } catch (error) {\r\n      console.error(\"‚ùå Erro ao remover carta:\", error);\r\n      setError(error.message || \"Erro ao remover carta\");\r\n    }\r\n  };\r\n\r\n  // Handlers para modo de sele√ß√£o\r\n  const handleToggleSelect = (cardId) => {\r\n    setSelectedCards((prev) =>\r\n      prev.includes(cardId)\r\n        ? prev.filter((id) => id !== cardId)\r\n        : [...prev, cardId]\r\n    );\r\n  };\r\n\r\n  const handleDeleteSelected = async () => {\r\n    if (selectedCards.length > 0 && canEdit) {\r\n      const cardsToRemove = deckCards.filter((c) => selectedCards.includes(c.id));\r\n      setCardsToDelete(cardsToRemove);\r\n      setShowDeleteDialog(true);\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = async (quantities) => {\r\n    try {\r\n      const deletions = Object.entries(quantities).map(([cardId, quantity]) => ({\r\n        cardId,\r\n        quantityToDelete: quantity,\r\n      }));\r\n      \r\n      for (const deletion of deletions) {\r\n        const card = deckCards.find(c => c.id === deletion.cardId);\r\n        if (card) {\r\n          if (deletion.quantityToDelete >= card.quantity) {\r\n            // Deletar carta completamente\r\n            await deleteCard(deletion.cardId);\r\n          } else {\r\n            // Reduzir quantidade\r\n            const newQuantity = card.quantity - deletion.quantityToDelete;\r\n            await updateCard({ cardId: deletion.cardId, updates: { quantity: newQuantity } });\r\n          }\r\n        }\r\n      }\r\n      \r\n      setSelectedCards([]);\r\n      setIsSelectionMode(false);\r\n      setShowDeleteDialog(false);\r\n      setCardsToDelete([]);\r\n    } catch (error) {\r\n      setError(\"Erro ao remover cartas selecionadas\");\r\n    }\r\n  };\r\n\r\n  // Handler para sele√ß√£o de arte\r\n  const handleShowArtSelector = (card) => {\r\n    console.log('[DEBUG] handleShowArtSelector chamado', { card, isViewOnly });\r\n    if (isViewOnly) {\r\n      console.log('[DEBUG] N√£o abrindo modal - modo view only');\r\n      return;\r\n    }\r\n    console.log('[DEBUG] Abrindo ArtSelector modal');\r\n    setSelectedCardForArt(card);\r\n    setShowArtSelector(true);\r\n  };\r\n\r\n  const handleSelectArt = async (artData) => {\r\n      let updates = { ...artData };\r\n      // Se for carta dupla face, atualiza image_url e image_uris.normal em ambas as faces\r\n      if (selectedCardForArt.card_faces && Array.isArray(selectedCardForArt.card_faces)) {\r\n        const newCardFaces = selectedCardForArt.card_faces.map(face => ({\r\n          ...face,\r\n          image_url: artData.image_url,\r\n          image_uris: {\r\n            ...face.image_uris,\r\n            normal: artData.image_url\r\n          }\r\n        }));\r\n        updates.card_faces = newCardFaces;\r\n      }\r\n      // Log de debug para verificar updates enviados\r\n      console.log('[DEBUG] handleSelectArt - updates:', updates);\r\n    if (selectedCardForArt && !isViewOnly) {\r\n      // Se veio da busca avan√ßada, n√£o faz nada (adi√ß√£o j√° foi feita pelo fluxo principal)\r\n      if (location.state?.addCard) {\r\n        setShowArtSelector(false);\r\n        setSelectedCardForArt(null);\r\n        return;\r\n      }\r\n      // Fluxo normal: alterar arte de carta j√° existente\r\n      try {\r\n        let updates = { ...artData };\r\n        // Se for carta dupla face, atualiza image_url em ambas as faces\r\n        if (selectedCardForArt.card_faces && Array.isArray(selectedCardForArt.card_faces)) {\r\n          const newCardFaces = selectedCardForArt.card_faces.map(face => ({\r\n            ...face,\r\n            image_url: artData.image_url,\r\n            image_uris: {\r\n              ...face.image_uris,\r\n              normal: artData.image_url\r\n            }\r\n          }));\r\n          updates.card_faces = newCardFaces;\r\n        }\r\n        await updateCard({ \r\n          cardId: selectedCardForArt.id, \r\n          updates\r\n        });\r\n        setShowArtSelector(false);\r\n        setSelectedCardForArt(null);\r\n      } catch (error) {\r\n        setError(\"Erro ao alterar arte da carta\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handler para atualizar cover do deck\r\n  const handleUpdateDeckCover = async (coverImageUrl) => {\r\n    if (currentDeck && !isViewOnly) {\r\n      try {\r\n        await updateDeck({ \r\n          id: currentDeck.id, \r\n          data: { cover_image_url: coverImageUrl } \r\n        });\r\n      } catch (error) {\r\n        setError(\"Erro ao alterar cover do deck\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Calcula total de cartas\r\n  const totalCards = deckCards.reduce((sum, c) => sum + (c.quantity || 1), 0);\r\n\r\n  // Mostra loading enquanto busca o deck ou ainda n√£o passou o timeout\r\n  if (isLoading || (!currentDeck && !searchTimeout)) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-blue-400 mb-4\">\r\n            {isLoading ? \"Carregando deck...\" : \"Procurando deck rec√©m-criado...\"}\r\n          </p>\r\n          <p className=\"text-gray-400 mb-4 text-sm\">\r\n            {!isLoading && \"Aguarde alguns segundos para a sincroniza√ß√£o\"}\r\n          </p>\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (deckError) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-400 mb-4\">Erro ao carregar deck: {deckError}</p>\r\n          <Button onClick={() => navigate(\"/\")} className=\"bg-blue-600 hover:bg-blue-700\">\r\n            Voltar para Home\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!currentDeck && searchTimeout) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-yellow-400 mb-4\">Deck n√£o encontrado</p>\r\n          <Button onClick={() => navigate(\"/\")} className=\"bg-blue-600 hover:bg-blue-700\">\r\n            Voltar para Home\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950\">\r\n      {/* Header */}\r\n      <div className=\"sticky top-0 z-30 bg-gray-900 border-b border-gray-800 shadow-lg\">\r\n        <div className=\"flex items-center justify-between px-4 py-3\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => navigate(\"/\")}\r\n            className=\"text-gray-400 hover:text-white\"\r\n          >\r\n            <X className=\"w-6 h-6\" />\r\n          </Button>\r\n\r\n          <div className=\"text-center flex-1\">\r\n            <div className=\"flex items-center justify-center gap-2\">\r\n              <h1 className=\"text-lg font-bold text-white\">{currentDeck?.name}</h1>\r\n              {isViewOnly && <Eye className=\"w-4 h-4 text-blue-400\" />}\r\n            </div>\r\n            <p className=\"text-sm text-gray-400\">\r\n              {currentDeck?.format} ‚Ä¢ {totalCards} cartas\r\n            </p>\r\n          </div>\r\n\r\n          {!isViewOnly && (\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={() => {\r\n                if (isSelectionMode && selectedCards.length > 0) {\r\n                  handleDeleteSelected();\r\n                } else {\r\n                  setIsSelectionMode(!isSelectionMode);\r\n                  setSelectedCards([]);\r\n                }\r\n              }}\r\n              className={`${\r\n                isSelectionMode && selectedCards.length > 0\r\n                  ? \"text-red-500 hover:text-red-400\"\r\n                  : \"text-gray-400 hover:text-white\"\r\n              }`}\r\n            >\r\n              <Trash2 className=\"w-5 h-5\" />\r\n            </Button>\r\n          )}\r\n          {isViewOnly && <div className=\"w-10\" />}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Barra de busca */}\r\n      {!isViewOnly && (\r\n        <SearchBar deckId={deckId} isSearching={isSearching} setIsSearching={setIsSearching} />\r\n      )}\r\n\r\n      {/* Mensagens de erro/sucesso */}\r\n      {error && (\r\n        <div className=\"px-4 pt-4\">\r\n          <Alert\r\n            className={\r\n              error.includes(\"sucesso\")\r\n                ? \"bg-green-900/20 border-green-800\"\r\n                : \"bg-red-900/20 border-red-800\"\r\n            }\r\n          >\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertDescription\r\n              className={error.includes(\"sucesso\") ? \"text-green-400\" : \"text-red-400\"}\r\n            >\r\n              {error}\r\n            </AlertDescription>\r\n          </Alert>\r\n        </div>\r\n      )}\r\n\r\n      {/* Grid de cartas */}\r\n      <div className=\"p-4\">\r\n        {deckCards.length === 0 && !isLoading ? (\r\n          <div className=\"flex flex-col items-center justify-center py-20 text-center\">\r\n            <p className=\"text-gray-400 text-lg mb-2\">\r\n              {isViewOnly\r\n                ? \"Este deck ainda n√£o tem cartas\"\r\n                : \"Nenhuma carta adicionada ainda\"}\r\n            </p>\r\n            {!isViewOnly && (\r\n              <p className=\"text-gray-500 text-sm\">\r\n                Use a barra de busca para adicionar cartas\r\n              </p>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <AnimatePresence mode=\"popLayout\">\r\n              {deckCards.map((card) => {\r\n                console.log('[DEBUG] Renderizando card:', {\r\n                  cardId: card.id,\r\n                  is_transparent: card.is_transparent,\r\n                  typeof: typeof card.is_transparent\r\n                });\r\n                const transparent = card.is_transparent === true || card.is_transparent === 'true';\r\n                \r\n                // Long press manual\r\n                let pressTimer = null;\r\n                let lastTap = 0;\r\n                \r\n                const handleTouchStart = (e) => {\r\n                  // Cancelar timer anterior se existir\r\n                  if (pressTimer) clearTimeout(pressTimer);\r\n                  \r\n                  // Iniciar timer de long press (500ms)\r\n                  pressTimer = setTimeout(() => {\r\n                    console.log(\"‚è±Ô∏è Long press detectado!\", {\r\n                      isFriendTradeDeck,\r\n                      cardName: card.card_name,\r\n                      isViewOnly\r\n                    });\r\n                    if (isFriendTradeDeck) {\r\n                      console.log(\"üõí Abrindo BuyRequestModal via long press\");\r\n                      setSelectedCardForBuy(card);\r\n                      setShowBuyRequestModal(true);\r\n                    } else if (!isViewOnly) {\r\n                      // Se n√£o √© deck de amigo e n√£o √© viewOnly, abre modal de arte\r\n                      console.log(\"üé® Abrindo ArtSelector via long press\");\r\n                      handleShowArtSelector(card);\r\n                    }\r\n                  }, 500); // 500ms = meio segundo\r\n                };\r\n                \r\n                const handleTouchEnd = async (e) => {\r\n                  // Cancelar long press se soltar antes de 500ms\r\n                  if (pressTimer) {\r\n                    clearTimeout(pressTimer);\r\n                    pressTimer = null;\r\n                  }\r\n                  \r\n                  // Double tap detection (mantido para desktop)\r\n                  const now = Date.now();\r\n                  if (now - lastTap < 400) {\r\n                    if (isFriendTradeDeck) {\r\n                      setSelectedCardForBuy(card);\r\n                      setShowBuyRequestModal(true);\r\n                    } else if (isViewOnly && transparent) {\r\n                      setSelectedCardForTrade(card);\r\n                      setShowTradeDialog(true);\r\n                    } else if (!isViewOnly) {\r\n                      await doubleClickTransparency(card, deckCards);\r\n                    }\r\n                  }\r\n                  lastTap = now;\r\n                };\r\n                \r\n                const handleTouchCancel = () => {\r\n                  // Cancelar long press se o toque for cancelado\r\n                  if (pressTimer) {\r\n                    clearTimeout(pressTimer);\r\n                    pressTimer = null;\r\n                  }\r\n                };\r\n                \r\n                return (\r\n                  <div\r\n                    key={card.id}\r\n                    onDoubleClick={async () => {\r\n                      console.log(\"üñ±Ô∏è Duplo clique detectado!\", {\r\n                        isFriendTradeDeck,\r\n                        cardName: card.card_name,\r\n                        isViewOnly,\r\n                        transparent\r\n                      });\r\n                      if (isFriendTradeDeck) {\r\n                        console.log(\"üõí Abrindo BuyRequestModal via double click\");\r\n                        setSelectedCardForBuy(card);\r\n                        setShowBuyRequestModal(true);\r\n                      } else if (isViewOnly && transparent) {\r\n                        setSelectedCardForTrade(card);\r\n                        setShowTradeDialog(true);\r\n                      } else if (!isViewOnly) {\r\n                        await doubleClickTransparency(card, deckCards);\r\n                      }\r\n                    }}\r\n                    onTouchStart={handleTouchStart}\r\n                    onTouchEnd={handleTouchEnd}\r\n                    onTouchCancel={handleTouchCancel}\r\n                    style={{ opacity: transparent ? 0.5 : 1, transition: \"opacity 0.3s\" }}\r\n                  >\r\n                    <CardGridItem\r\n                      card={card}\r\n                      isSelectionMode={isSelectionMode && !isViewOnly}\r\n                      isSelected={selectedCards.includes(card.id)}\r\n                      onToggleSelect={handleToggleSelect}\r\n                      onShowArtSelector={handleShowArtSelector}\r\n                      isViewOnly={isViewOnly}\r\n                      currentUserId={user?.id}\r\n                      deckOwnerId={currentDeck?.user_id}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </AnimatePresence>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Barra inferior de sele√ß√£o */}\r\n      {isSelectionMode && !isViewOnly && (\r\n        <motion.div\r\n          initial={{ y: 100 }}\r\n          animate={{ y: 0 }}\r\n          exit={{ y: 100 }}\r\n          className=\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-gray-800 border border-gray-700 rounded-full px-6 py-3 shadow-2xl\"\r\n        >\r\n          <p className=\"text-white font-medium\">\r\n            {selectedCards.length > 0\r\n              ? `${selectedCards.length} carta${selectedCards.length > 1 ? 's' : ''} selecionada${selectedCards.length > 1 ? 's' : ''}`\r\n              : \"Selecione cartas para remover\"}\r\n          </p>\r\n        </motion.div>\r\n      )}\r\n\r\n      {/* Modais */}\r\n      <ArtSelector\r\n        isOpen={showArtSelector}\r\n        onClose={() => {\r\n          setShowArtSelector(false);\r\n          setSelectedCardForArt(null);\r\n        }}\r\n        card={selectedCardForArt}\r\n        onSelectArt={handleSelectArt}\r\n        onAddCard={addCard}\r\n        onUpdateCard={updateCard}\r\n        deckId={deckId}\r\n      />\r\n\r\n      <DeleteQuantityDialog\r\n        isOpen={showDeleteDialog}\r\n        onClose={() => {\r\n          setShowDeleteDialog(false);\r\n          setCardsToDelete([]);\r\n        }}\r\n        cards={cardsToDelete}\r\n        deckId={deckId}\r\n        onConfirm={handleConfirmDelete}\r\n        isLoading={false}\r\n      />\r\n    {/* Modal de trade para deck do amigo */}\r\n    {showTradeDialog && selectedCardForTrade && (\r\n      <TradeConfirmDialog\r\n        isOpen={showTradeDialog}\r\n        onClose={() => setShowTradeDialog(false)}\r\n        card={selectedCardForTrade}\r\n        onConfirm={async () => {\r\n            console.log('[TRADE DEBUG] user:', user);\r\n            console.log('[TRADE DEBUG] user.user_metadata:', user?.user_metadata);\r\n            console.log('[TRADE DEBUG] user.user_metadata.full_name:', user?.user_metadata?.full_name);\r\n          // Envia mensagem na caixa de mensagem ao oferecer trade (permite duplicados)\r\n          try {\r\n            const recipientId = currentDeck?.owner_id;\r\n            const messageText = `Oferta de trade: ${selectedCardForTrade.card_name}`;\r\n            const messageData = {\r\n              recipient_id: recipientId,\r\n              sender_id: user?.id,\r\n              card_id: selectedCardForTrade.id,\r\n              card_name: selectedCardForTrade.card_name,\r\n              type: 'trade_offer',\r\n              text: messageText,\r\n              created_at: new Date().toISOString()\r\n            };\r\n            const { messageOperations } = await import(\"../lib/supabaseOperations\");\r\n            // Corrigir campo para 'content' ao inv√©s de 'text' e adicionar nome do remetente\r\n            const messageDataFixed = { ...messageData };\r\n            if (messageDataFixed.text) {\r\n              messageDataFixed.content = messageDataFixed.text;\r\n              delete messageDataFixed.text;\r\n            }\r\n                // Buscar display_name do usu√°rio logado na tabela users\r\n                let senderName = \"\";\r\n                try {\r\n                  const { userOperations } = await import(\"../lib/supabaseOperations\");\r\n                  const userDb = await userOperations.getUser(user.id);\r\n                  senderName = userDb?.display_name || \"\";\r\n                  console.log('[TRADE DEBUG] display_name do usu√°rio:', senderName);\r\n                } catch (err) {\r\n                  console.error('[TRADE DEBUG] Erro ao buscar display_name:', err);\r\n                }\r\n                if (!messageDataFixed.sender_name) {\r\n                  messageDataFixed.sender_name = senderName;\r\n                }\r\n            await messageOperations.sendMessage(messageDataFixed);\r\n            setShowTradeDialog(false);\r\n            setSelectedCardForTrade(null);\r\n            setError(\"Mensagem de trade enviada com sucesso!\");\r\n          } catch (err) {\r\n            console.error('[TRADE] Erro ao enviar mensagem:', err);\r\n            setError(\"Erro ao enviar mensagem de trade: \" + (err?.message || err));\r\n          }\r\n        }}\r\n      />\r\n    )}\r\n    \r\n    {/* Modal de interesse em comprar (deck Trade de amigo) */}\r\n    <BuyRequestModal\r\n      isOpen={showBuyRequestModal}\r\n      onClose={() => {\r\n        setShowBuyRequestModal(false);\r\n        setSelectedCardForBuy(null);\r\n      }}\r\n      card={selectedCardForBuy}\r\n      deckOwnerId={currentDeck?.owner_id}\r\n      deckOwnerName={deckOwnerName || \"Amigo\"}\r\n    />\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Deckbuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}