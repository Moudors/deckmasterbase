{"ast":null,"code":"// Hook para debounce - previne execuções excessivas\n// Útil para inputs que disparam gravações no Firebase\nimport{useEffect,useState}from'react';/**\r\n * Hook que retorna um valor \"debounced\" (atrasado)\r\n * Ideal para campos de busca, inputs de texto que salvam, etc.\r\n * \r\n * @param {any} value - Valor a ser debounced\r\n * @param {number} delay - Delay em milissegundos (padrão: 500ms)\r\n * @returns {any} Valor debounced\r\n * \r\n * @example\r\n * const [searchTerm, setSearchTerm] = useState(\"\");\r\n * const debouncedSearch = useDebounce(searchTerm, 500);\r\n * \r\n * useEffect(() => {\r\n *   // Só executa 500ms após parar de digitar\r\n *   if (debouncedSearch) {\r\n *     performSearch(debouncedSearch);\r\n *   }\r\n * }, [debouncedSearch]);\r\n */export function useDebounce(value){let delay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:500;const[debouncedValue,setDebouncedValue]=useState(value);useEffect(()=>{// Agenda a atualização do valor após o delay\nconst handler=setTimeout(()=>{setDebouncedValue(value);},delay);// Cancela o timeout anterior se value mudar antes do delay\nreturn()=>{clearTimeout(handler);};},[value,delay]);return debouncedValue;}/**\r\n * Hook para debounce de callbacks\r\n * Retorna uma função que só executa após X milissegundos de inatividade\r\n * \r\n * @param {Function} callback - Função a ser executada\r\n * @param {number} delay - Delay em milissegundos (padrão: 500ms)\r\n * @returns {Function} Callback debounced\r\n * \r\n * @example\r\n * const debouncedSave = useDebouncedCallback(async (value) => {\r\n *   await updateDocSilent(\"users\", userId, { bio: value });\r\n * }, 1000);\r\n * \r\n * <input onChange={(e) => debouncedSave(e.target.value)} />\r\n */export function useDebouncedCallback(callback){let delay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:500;const[timeoutId,setTimeoutId]=useState(null);return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}// Cancela execução anterior se ainda não executou\nif(timeoutId){clearTimeout(timeoutId);}// Agenda nova execução\nconst newTimeoutId=setTimeout(()=>{callback(...args);},delay);setTimeoutId(newTimeoutId);};}","map":{"version":3,"names":["useEffect","useState","useDebounce","value","delay","arguments","length","undefined","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebouncedCallback","callback","timeoutId","setTimeoutId","_len","args","Array","_key","newTimeoutId"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/hooks/useDebounce.js"],"sourcesContent":["// Hook para debounce - previne execuções excessivas\r\n// Útil para inputs que disparam gravações no Firebase\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Hook que retorna um valor \"debounced\" (atrasado)\r\n * Ideal para campos de busca, inputs de texto que salvam, etc.\r\n * \r\n * @param {any} value - Valor a ser debounced\r\n * @param {number} delay - Delay em milissegundos (padrão: 500ms)\r\n * @returns {any} Valor debounced\r\n * \r\n * @example\r\n * const [searchTerm, setSearchTerm] = useState(\"\");\r\n * const debouncedSearch = useDebounce(searchTerm, 500);\r\n * \r\n * useEffect(() => {\r\n *   // Só executa 500ms após parar de digitar\r\n *   if (debouncedSearch) {\r\n *     performSearch(debouncedSearch);\r\n *   }\r\n * }, [debouncedSearch]);\r\n */\r\nexport function useDebounce(value, delay = 500) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    // Agenda a atualização do valor após o delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancela o timeout anterior se value mudar antes do delay\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Hook para debounce de callbacks\r\n * Retorna uma função que só executa após X milissegundos de inatividade\r\n * \r\n * @param {Function} callback - Função a ser executada\r\n * @param {number} delay - Delay em milissegundos (padrão: 500ms)\r\n * @returns {Function} Callback debounced\r\n * \r\n * @example\r\n * const debouncedSave = useDebouncedCallback(async (value) => {\r\n *   await updateDocSilent(\"users\", userId, { bio: value });\r\n * }, 1000);\r\n * \r\n * <input onChange={(e) => debouncedSave(e.target.value)} />\r\n */\r\nexport function useDebouncedCallback(callback, delay = 500) {\r\n  const [timeoutId, setTimeoutId] = useState(null);\r\n\r\n  return (...args) => {\r\n    // Cancela execução anterior se ainda não executou\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    // Agenda nova execução\r\n    const newTimeoutId = setTimeout(() => {\r\n      callback(...args);\r\n    }, delay);\r\n\r\n    setTimeoutId(newTimeoutId);\r\n  };\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,WAAWA,CAACC,KAAK,CAAe,IAAb,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAC5C,KAAM,CAACG,cAAc,CAAEC,iBAAiB,CAAC,CAAGR,QAAQ,CAACE,KAAK,CAAC,CAE3DH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAU,OAAO,CAAGC,UAAU,CAAC,IAAM,CAC/BF,iBAAiB,CAACN,KAAK,CAAC,CAC1B,CAAC,CAAEC,KAAK,CAAC,CAET;AACA,MAAO,IAAM,CACXQ,YAAY,CAACF,OAAO,CAAC,CACvB,CAAC,CACH,CAAC,CAAE,CAACP,KAAK,CAAEC,KAAK,CAAC,CAAC,CAElB,MAAO,CAAAI,cAAc,CACvB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAK,oBAAoBA,CAACC,QAAQ,CAAe,IAAb,CAAAV,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CACxD,KAAM,CAACU,SAAS,CAAEC,YAAY,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAEhD,MAAO,WAAa,SAAAgB,IAAA,CAAAZ,SAAA,CAAAC,MAAA,CAATY,IAAI,KAAAC,KAAA,CAAAF,IAAA,EAAAG,IAAA,GAAAA,IAAA,CAAAH,IAAA,CAAAG,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAf,SAAA,CAAAe,IAAA,GACb;AACA,GAAIL,SAAS,CAAE,CACbH,YAAY,CAACG,SAAS,CAAC,CACzB,CAEA;AACA,KAAM,CAAAM,YAAY,CAAGV,UAAU,CAAC,IAAM,CACpCG,QAAQ,CAAC,GAAGI,IAAI,CAAC,CACnB,CAAC,CAAEd,KAAK,CAAC,CAETY,YAAY,CAACK,YAAY,CAAC,CAC5B,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}