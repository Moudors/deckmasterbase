{"ast":null,"code":"/**\r\n * üñºÔ∏è IMAGE CACHE MANAGER\r\n * =====================\r\n * Gerencia cache de imagens de cartas no IndexedDB para:\r\n * - ‚úÖ Reduzir tr√°fego de rede (n√£o baixa mesma imagem 2x)\r\n * - ‚úÖ Funcionar 100% offline depois do primeiro download\r\n * - ‚úÖ N√£o sobrecarregar Firebase (imagens pesam muito)\r\n * - ‚úÖ Performance instant√¢nea (carrega do cache local)\r\n *\r\n * TAMANHOS T√çPICOS:\r\n * - normal: ~100-150 KB por imagem\r\n * - art_crop: ~80-120 KB por imagem\r\n * - small: ~30-50 KB por imagem\r\n *\r\n * ESTIMATIVA DE ARMAZENAMENTO:\r\n * - 100 cartas √ó 120 KB = ~12 MB\r\n * - 500 cartas √ó 120 KB = ~60 MB\r\n * - IndexedDB suporta centenas de MB facilmente\r\n */const DB_NAME='deckmaster_images';const DB_VERSION=1;const STORE_NAME='images';const CACHE_DURATION=30*24*60*60*1000;// 30 dias em ms\n/**\r\n * üîß Abre conex√£o com IndexedDB\r\n */function openDB(){return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onerror=()=>{console.error('‚ùå Erro ao abrir IndexedDB para cache de imagens:',request.error);reject(request.error);};request.onsuccess=()=>{resolve(request.result);};request.onupgradeneeded=event=>{const db=event.target.result;// Cria object store se n√£o existir\nif(!db.objectStoreNames.contains(STORE_NAME)){const store=db.createObjectStore(STORE_NAME,{keyPath:'url'});// √çndice por data para limpeza de cache antigo\nstore.createIndex('timestamp','timestamp',{unique:false});console.log('‚úÖ Object store de imagens criado');}};});}/**\r\n * üñºÔ∏è Busca imagem no cache\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string|null>} - Blob URL local ou null se n√£o estiver em cache\r\n */export async function getCachedImage(imageUrl){if(!imageUrl)return null;try{const db=await openDB();const transaction=db.transaction(STORE_NAME,'readonly');const store=transaction.objectStore(STORE_NAME);const request=store.get(imageUrl);return new Promise(resolve=>{request.onsuccess=()=>{const result=request.result;if(!result){resolve(null);return;}// Verifica se cache est√° expirado (30 dias)\nconst now=Date.now();if(now-result.timestamp>CACHE_DURATION){console.log('‚è∞ Cache expirado para:',imageUrl);resolve(null);return;}// Cria Blob URL local a partir do Blob armazenado\nconst blobUrl=URL.createObjectURL(result.blob);resolve(blobUrl);};request.onerror=()=>{console.error('‚ùå Erro ao buscar imagem do cache:',request.error);resolve(null);};});}catch(error){console.error('‚ùå Erro ao acessar cache de imagens:',error);return null;}}/**\r\n * üì• Baixa imagem da internet e salva no cache\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string|null>} - Blob URL local ou null se falhar\r\n */export async function downloadAndCacheImage(imageUrl){if(!imageUrl)return null;try{console.log('üì• Baixando imagem:',imageUrl);// Baixa imagem\nconst response=await fetch(imageUrl);if(!response.ok){console.error('‚ùå Falha ao baixar imagem:',response.status);return null;}// Converte para Blob\nconst blob=await response.blob();const size=(blob.size/1024).toFixed(2);// KB\nconsole.log(\"\\u2705 Imagem baixada: \".concat(size,\" KB\"));// Salva no IndexedDB\nconst db=await openDB();const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);const cacheEntry={url:imageUrl,blob:blob,timestamp:Date.now(),size:blob.size};store.put(cacheEntry);// Aguarda conclus√£o da transa√ß√£o\nawait new Promise((resolve,reject)=>{transaction.oncomplete=()=>{console.log('‚úÖ Imagem salva no cache');resolve();};transaction.onerror=()=>{console.error('‚ùå Erro ao salvar imagem no cache:',transaction.error);reject(transaction.error);};});// Retorna Blob URL local\nreturn URL.createObjectURL(blob);}catch(error){console.error('‚ùå Erro ao baixar/cachear imagem:',error);return null;}}/**\r\n * üîç Busca imagem (cache first, fallback para download)\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string>} - Blob URL local ou URL original se falhar\r\n */export async function getImage(imageUrl){if(!imageUrl)return'';try{// 1. Tenta buscar do cache\nconst cachedUrl=await getCachedImage(imageUrl);if(cachedUrl){console.log('‚ö° Imagem carregada do cache:',imageUrl);return cachedUrl;}// 2. Se n√£o estiver em cache, baixa e salva\nconst downloadedUrl=await downloadAndCacheImage(imageUrl);if(downloadedUrl){return downloadedUrl;}// 3. Se falhar, retorna URL original (fallback)\nconsole.warn('‚ö†Ô∏è Usando URL original (sem cache):',imageUrl);return imageUrl;}catch(error){console.error('‚ùå Erro ao obter imagem:',error);return imageUrl;// Fallback para URL original\n}}/**\r\n * üóëÔ∏è Remove imagem do cache\r\n * @param {string} imageUrl - URL da imagem\r\n */export async function removeCachedImage(imageUrl){try{const db=await openDB();const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);store.delete(imageUrl);await new Promise((resolve,reject)=>{transaction.oncomplete=()=>{console.log('‚úÖ Imagem removida do cache:',imageUrl);resolve();};transaction.onerror=()=>reject(transaction.error);});}catch(error){console.error('‚ùå Erro ao remover imagem do cache:',error);}}/**\r\n * üßπ Limpa cache antigo (imagens n√£o acessadas h√° 30+ dias)\r\n * @returns {Promise<number>} - N√∫mero de imagens removidas\r\n */export async function cleanupOldCache(){try{const db=await openDB();const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);const index=store.index('timestamp');const now=Date.now();const expiredBefore=now-CACHE_DURATION;let deletedCount=0;const request=index.openCursor();request.onsuccess=event=>{const cursor=event.target.result;if(cursor){if(cursor.value.timestamp<expiredBefore){cursor.delete();deletedCount++;}cursor.continue();}};await new Promise((resolve,reject)=>{transaction.oncomplete=()=>{console.log(\"\\uD83E\\uDDF9 Limpeza conclu\\xEDda: \".concat(deletedCount,\" imagens antigas removidas\"));resolve(deletedCount);};transaction.onerror=()=>reject(transaction.error);});return deletedCount;}catch(error){console.error('‚ùå Erro ao limpar cache:',error);return 0;}}/**\r\n * üìä Retorna estat√≠sticas do cache\r\n * @returns {Promise<object>} - Estat√≠sticas (total, size, oldestTimestamp)\r\n */export async function getCacheStats(){try{const db=await openDB();const transaction=db.transaction(STORE_NAME,'readonly');const store=transaction.objectStore(STORE_NAME);const request=store.getAll();return new Promise((resolve,reject)=>{request.onsuccess=()=>{const allImages=request.result;const stats={total:allImages.length,totalSize:allImages.reduce((sum,img)=>sum+img.size,0),totalSizeMB:(allImages.reduce((sum,img)=>sum+img.size,0)/(1024*1024)).toFixed(2),oldestTimestamp:allImages.length>0?Math.min(...allImages.map(img=>img.timestamp)):null,newestTimestamp:allImages.length>0?Math.max(...allImages.map(img=>img.timestamp)):null};console.log('üìä Estat√≠sticas do cache:',stats);resolve(stats);};request.onerror=()=>{console.error('‚ùå Erro ao obter estat√≠sticas:',request.error);reject(request.error);};});}catch(error){console.error('‚ùå Erro ao acessar estat√≠sticas:',error);return{total:0,totalSize:0,totalSizeMB:'0.00',oldestTimestamp:null,newestTimestamp:null};}}/**\r\n * üóëÔ∏è Limpa TODO o cache (√∫til para debug)\r\n */export async function clearAllCache(){try{const db=await openDB();const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);store.clear();await new Promise((resolve,reject)=>{transaction.oncomplete=()=>{console.log('üóëÔ∏è Cache de imagens limpo completamente');resolve();};transaction.onerror=()=>reject(transaction.error);});}catch(error){console.error('‚ùå Erro ao limpar cache:',error);}}/**\r\n * üîß Exp√µe fun√ß√µes no window para debug no console\r\n */if(typeof window!=='undefined'){window.imageCacheManager={getStats:getCacheStats,cleanup:cleanupOldCache,clearAll:clearAllCache,getImage:getImage};console.log('üñºÔ∏è Image Cache Manager carregado. Use window.imageCacheManager no console.');}export default{getImage,getCachedImage,downloadAndCacheImage,removeCachedImage,cleanupOldCache,getCacheStats,clearAllCache};","map":{"version":3,"names":["DB_NAME","DB_VERSION","STORE_NAME","CACHE_DURATION","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","console","error","onsuccess","result","onupgradeneeded","event","db","target","objectStoreNames","contains","store","createObjectStore","keyPath","createIndex","unique","log","getCachedImage","imageUrl","transaction","objectStore","get","now","Date","timestamp","blobUrl","URL","createObjectURL","blob","downloadAndCacheImage","response","fetch","ok","status","size","toFixed","concat","cacheEntry","url","put","oncomplete","getImage","cachedUrl","downloadedUrl","warn","removeCachedImage","delete","cleanupOldCache","index","expiredBefore","deletedCount","openCursor","cursor","value","continue","getCacheStats","getAll","allImages","stats","total","length","totalSize","reduce","sum","img","totalSizeMB","oldestTimestamp","Math","min","map","newestTimestamp","max","clearAllCache","clear","window","imageCacheManager","getStats","cleanup","clearAll"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/lib/imageCache.js"],"sourcesContent":["/**\r\n * üñºÔ∏è IMAGE CACHE MANAGER\r\n * =====================\r\n * Gerencia cache de imagens de cartas no IndexedDB para:\r\n * - ‚úÖ Reduzir tr√°fego de rede (n√£o baixa mesma imagem 2x)\r\n * - ‚úÖ Funcionar 100% offline depois do primeiro download\r\n * - ‚úÖ N√£o sobrecarregar Firebase (imagens pesam muito)\r\n * - ‚úÖ Performance instant√¢nea (carrega do cache local)\r\n *\r\n * TAMANHOS T√çPICOS:\r\n * - normal: ~100-150 KB por imagem\r\n * - art_crop: ~80-120 KB por imagem\r\n * - small: ~30-50 KB por imagem\r\n *\r\n * ESTIMATIVA DE ARMAZENAMENTO:\r\n * - 100 cartas √ó 120 KB = ~12 MB\r\n * - 500 cartas √ó 120 KB = ~60 MB\r\n * - IndexedDB suporta centenas de MB facilmente\r\n */\r\n\r\nconst DB_NAME = 'deckmaster_images';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'images';\r\nconst CACHE_DURATION = 30 * 24 * 60 * 60 * 1000; // 30 dias em ms\r\n\r\n/**\r\n * üîß Abre conex√£o com IndexedDB\r\n */\r\nfunction openDB() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onerror = () => {\r\n      console.error('‚ùå Erro ao abrir IndexedDB para cache de imagens:', request.error);\r\n      reject(request.error);\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n\r\n      // Cria object store se n√£o existir\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'url' });\r\n        \r\n        // √çndice por data para limpeza de cache antigo\r\n        store.createIndex('timestamp', 'timestamp', { unique: false });\r\n        \r\n        console.log('‚úÖ Object store de imagens criado');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * üñºÔ∏è Busca imagem no cache\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string|null>} - Blob URL local ou null se n√£o estiver em cache\r\n */\r\nexport async function getCachedImage(imageUrl) {\r\n  if (!imageUrl) return null;\r\n\r\n  try {\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.get(imageUrl);\r\n\r\n    return new Promise((resolve) => {\r\n      request.onsuccess = () => {\r\n        const result = request.result;\r\n        \r\n        if (!result) {\r\n          resolve(null);\r\n          return;\r\n        }\r\n\r\n        // Verifica se cache est√° expirado (30 dias)\r\n        const now = Date.now();\r\n        if (now - result.timestamp > CACHE_DURATION) {\r\n          console.log('‚è∞ Cache expirado para:', imageUrl);\r\n          resolve(null);\r\n          return;\r\n        }\r\n\r\n        // Cria Blob URL local a partir do Blob armazenado\r\n        const blobUrl = URL.createObjectURL(result.blob);\r\n        resolve(blobUrl);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        console.error('‚ùå Erro ao buscar imagem do cache:', request.error);\r\n        resolve(null);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao acessar cache de imagens:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * üì• Baixa imagem da internet e salva no cache\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string|null>} - Blob URL local ou null se falhar\r\n */\r\nexport async function downloadAndCacheImage(imageUrl) {\r\n  if (!imageUrl) return null;\r\n\r\n  try {\r\n    console.log('üì• Baixando imagem:', imageUrl);\r\n    \r\n    // Baixa imagem\r\n    const response = await fetch(imageUrl);\r\n    if (!response.ok) {\r\n      console.error('‚ùå Falha ao baixar imagem:', response.status);\r\n      return null;\r\n    }\r\n\r\n    // Converte para Blob\r\n    const blob = await response.blob();\r\n    const size = (blob.size / 1024).toFixed(2); // KB\r\n    console.log(`‚úÖ Imagem baixada: ${size} KB`);\r\n\r\n    // Salva no IndexedDB\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n\r\n    const cacheEntry = {\r\n      url: imageUrl,\r\n      blob: blob,\r\n      timestamp: Date.now(),\r\n      size: blob.size,\r\n    };\r\n\r\n    store.put(cacheEntry);\r\n\r\n    // Aguarda conclus√£o da transa√ß√£o\r\n    await new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        console.log('‚úÖ Imagem salva no cache');\r\n        resolve();\r\n      };\r\n      transaction.onerror = () => {\r\n        console.error('‚ùå Erro ao salvar imagem no cache:', transaction.error);\r\n        reject(transaction.error);\r\n      };\r\n    });\r\n\r\n    // Retorna Blob URL local\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao baixar/cachear imagem:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * üîç Busca imagem (cache first, fallback para download)\r\n * @param {string} imageUrl - URL da imagem\r\n * @returns {Promise<string>} - Blob URL local ou URL original se falhar\r\n */\r\nexport async function getImage(imageUrl) {\r\n  if (!imageUrl) return '';\r\n\r\n  try {\r\n    // 1. Tenta buscar do cache\r\n    const cachedUrl = await getCachedImage(imageUrl);\r\n    if (cachedUrl) {\r\n      console.log('‚ö° Imagem carregada do cache:', imageUrl);\r\n      return cachedUrl;\r\n    }\r\n\r\n    // 2. Se n√£o estiver em cache, baixa e salva\r\n    const downloadedUrl = await downloadAndCacheImage(imageUrl);\r\n    if (downloadedUrl) {\r\n      return downloadedUrl;\r\n    }\r\n\r\n    // 3. Se falhar, retorna URL original (fallback)\r\n    console.warn('‚ö†Ô∏è Usando URL original (sem cache):', imageUrl);\r\n    return imageUrl;\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao obter imagem:', error);\r\n    return imageUrl; // Fallback para URL original\r\n  }\r\n}\r\n\r\n/**\r\n * üóëÔ∏è Remove imagem do cache\r\n * @param {string} imageUrl - URL da imagem\r\n */\r\nexport async function removeCachedImage(imageUrl) {\r\n  try {\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    store.delete(imageUrl);\r\n\r\n    await new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        console.log('‚úÖ Imagem removida do cache:', imageUrl);\r\n        resolve();\r\n      };\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao remover imagem do cache:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * üßπ Limpa cache antigo (imagens n√£o acessadas h√° 30+ dias)\r\n * @returns {Promise<number>} - N√∫mero de imagens removidas\r\n */\r\nexport async function cleanupOldCache() {\r\n  try {\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const index = store.index('timestamp');\r\n    \r\n    const now = Date.now();\r\n    const expiredBefore = now - CACHE_DURATION;\r\n    \r\n    let deletedCount = 0;\r\n\r\n    const request = index.openCursor();\r\n    request.onsuccess = (event) => {\r\n      const cursor = event.target.result;\r\n      if (cursor) {\r\n        if (cursor.value.timestamp < expiredBefore) {\r\n          cursor.delete();\r\n          deletedCount++;\r\n        }\r\n        cursor.continue();\r\n      }\r\n    };\r\n\r\n    await new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        console.log(`üßπ Limpeza conclu√≠da: ${deletedCount} imagens antigas removidas`);\r\n        resolve(deletedCount);\r\n      };\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n\r\n    return deletedCount;\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao limpar cache:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * üìä Retorna estat√≠sticas do cache\r\n * @returns {Promise<object>} - Estat√≠sticas (total, size, oldestTimestamp)\r\n */\r\nexport async function getCacheStats() {\r\n  try {\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.getAll();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        const allImages = request.result;\r\n        \r\n        const stats = {\r\n          total: allImages.length,\r\n          totalSize: allImages.reduce((sum, img) => sum + img.size, 0),\r\n          totalSizeMB: (allImages.reduce((sum, img) => sum + img.size, 0) / (1024 * 1024)).toFixed(2),\r\n          oldestTimestamp: allImages.length > 0 \r\n            ? Math.min(...allImages.map(img => img.timestamp))\r\n            : null,\r\n          newestTimestamp: allImages.length > 0\r\n            ? Math.max(...allImages.map(img => img.timestamp))\r\n            : null,\r\n        };\r\n\r\n        console.log('üìä Estat√≠sticas do cache:', stats);\r\n        resolve(stats);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        console.error('‚ùå Erro ao obter estat√≠sticas:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao acessar estat√≠sticas:', error);\r\n    return {\r\n      total: 0,\r\n      totalSize: 0,\r\n      totalSizeMB: '0.00',\r\n      oldestTimestamp: null,\r\n      newestTimestamp: null,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * üóëÔ∏è Limpa TODO o cache (√∫til para debug)\r\n */\r\nexport async function clearAllCache() {\r\n  try {\r\n    const db = await openDB();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    store.clear();\r\n\r\n    await new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        console.log('üóëÔ∏è Cache de imagens limpo completamente');\r\n        resolve();\r\n      };\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Erro ao limpar cache:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * üîß Exp√µe fun√ß√µes no window para debug no console\r\n */\r\nif (typeof window !== 'undefined') {\r\n  window.imageCacheManager = {\r\n    getStats: getCacheStats,\r\n    cleanup: cleanupOldCache,\r\n    clearAll: clearAllCache,\r\n    getImage: getImage,\r\n  };\r\n\r\n  console.log('üñºÔ∏è Image Cache Manager carregado. Use window.imageCacheManager no console.');\r\n}\r\n\r\nexport default {\r\n  getImage,\r\n  getCachedImage,\r\n  downloadAndCacheImage,\r\n  removeCachedImage,\r\n  cleanupOldCache,\r\n  getCacheStats,\r\n  clearAllCache,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}