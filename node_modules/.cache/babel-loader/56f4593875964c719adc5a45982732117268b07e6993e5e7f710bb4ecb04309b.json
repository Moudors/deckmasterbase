{"ast":null,"code":"import _objectSpread from\"C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/services/translator.ts\nimport{saveTranslation,getTranslation}from\"@/lib/translationCache\";// Tipagem básica da carta do Scryfall\n// Tipagem da lista de resultados do Scryfall\n// --------------------\n// Azure Translator API\n// --------------------\nexport async function translateText(text){var _data$0$translations$,_data$,_data$$translations,_data$$translations$;let to=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"pt\";if(!text)return\"\";const endpoint=process.env.REACT_APP_TRANSLATOR_ENDPOINT;const key=process.env.REACT_APP_TRANSLATOR_KEY;const region=process.env.REACT_APP_TRANSLATOR_REGION;const res=await fetch(\"\".concat(endpoint,\"translate?api-version=3.0&to=\").concat(to),{method:\"POST\",headers:{\"Ocp-Apim-Subscription-Key\":key,\"Ocp-Apim-Subscription-Region\":region,\"Content-type\":\"application/json\"},body:JSON.stringify([{text}])});const data=await res.json();return(_data$0$translations$=data===null||data===void 0?void 0:(_data$=data[0])===null||_data$===void 0?void 0:(_data$$translations=_data$.translations)===null||_data$$translations===void 0?void 0:(_data$$translations$=_data$$translations[0])===null||_data$$translations$===void 0?void 0:_data$$translations$.text)!==null&&_data$0$translations$!==void 0?_data$0$translations$:text;}// --------------------\n// Função principal\n// --------------------\nasync function findPortugueseEdition(printsSearchUri){let nextUrl=printsSearchUri;while(nextUrl){var _data$next_page;const res=await fetch(nextUrl);if(!res.ok)break;const data=await res.json();const found=data.data.find(c=>c.lang===\"pt\");if(found)return found;nextUrl=data.has_more?(_data$next_page=data.next_page)!==null&&_data$next_page!==void 0?_data$next_page:null:null;}return null;}// --------------------\n// Função principal\n// --------------------\nexport async function traduzirCarta(carta){var _carta$oracle_id,_carta$oracle_text,_data$0$translations$2,_data$2,_data$2$translations,_data$2$translations$,_data$1$translations$,_data$3,_data$3$translations,_data$3$translations$,_carta$oracle_text2;const cardId=(_carta$oracle_id=carta.oracle_id)!==null&&_carta$oracle_id!==void 0?_carta$oracle_id:carta.id;// 🔍 1. Verifica cache do IndexedDB primeiro\nconst cached=await getTranslation(cardId,carta.name);if(cached){console.log(\"\\uD83D\\uDCBE Usando tradu\\xE7\\xE3o em cache: \".concat(carta.name));return _objectSpread(_objectSpread({},carta),{},{name:cached.translatedName,oracle_text:cached.translatedText,card_faces:cached.faces||carta.card_faces});}// 2. Tenta achar edição em português no Scryfall\nconst edicaoPt=await findPortugueseEdition(carta.prints_search_uri);if(edicaoPt){// Se achou edição PT, usa o texto traduzido oficial\nconst nomeFinal=edicaoPt.printed_name||edicaoPt.name;const textoFinal=edicaoPt.printed_text||edicaoPt.oracle_text||\"\";// Traduz as faces também, se houver\nlet facesTraduzidas=carta.card_faces;if(edicaoPt.card_faces&&edicaoPt.card_faces.length>0){facesTraduzidas=edicaoPt.card_faces.map(face=>_objectSpread(_objectSpread({},face),{},{name:face.printed_name||face.name,oracle_text:face.printed_text||face.oracle_text||\"\"}));}else if(carta.card_faces&&carta.card_faces.length>0){// Se a edição PT não tem faces mas a original tem, traduz via Azure\nfacesTraduzidas=await Promise.all(carta.card_faces.map(async face=>{var _face$oracle_text;return _objectSpread(_objectSpread({},face),{},{name:await translateText(face.name,\"pt\"),oracle_text:await translateText((_face$oracle_text=face.oracle_text)!==null&&_face$oracle_text!==void 0?_face$oracle_text:\"\",\"pt\")});}));}// 💾 Salva no cache do IndexedDB\nawait saveTranslation(cardId,carta.name,nomeFinal,textoFinal,facesTraduzidas);return _objectSpread(_objectSpread({},carta),{},{name:nomeFinal,oracle_text:textoFinal,card_faces:facesTraduzidas});}// 3. Se não achou edição PT, traduz via Azure\nconst payload=[{text:carta.name},{text:(_carta$oracle_text=carta.oracle_text)!==null&&_carta$oracle_text!==void 0?_carta$oracle_text:\"\"}];const endpoint=process.env.REACT_APP_TRANSLATOR_ENDPOINT;const key=process.env.REACT_APP_TRANSLATOR_KEY;const region=process.env.REACT_APP_TRANSLATOR_REGION;const res=await fetch(\"\".concat(endpoint,\"translate?api-version=3.0&to=pt\"),{method:\"POST\",headers:{\"Ocp-Apim-Subscription-Key\":key,\"Ocp-Apim-Subscription-Region\":region,\"Content-type\":\"application/json\"},body:JSON.stringify(payload)});const data=await res.json();const nomeTraduzido=(_data$0$translations$2=data===null||data===void 0?void 0:(_data$2=data[0])===null||_data$2===void 0?void 0:(_data$2$translations=_data$2.translations)===null||_data$2$translations===void 0?void 0:(_data$2$translations$=_data$2$translations[0])===null||_data$2$translations$===void 0?void 0:_data$2$translations$.text)!==null&&_data$0$translations$2!==void 0?_data$0$translations$2:carta.name;const textoTraduzido=(_data$1$translations$=data===null||data===void 0?void 0:(_data$3=data[1])===null||_data$3===void 0?void 0:(_data$3$translations=_data$3.translations)===null||_data$3$translations===void 0?void 0:(_data$3$translations$=_data$3$translations[0])===null||_data$3$translations$===void 0?void 0:_data$3$translations$.text)!==null&&_data$1$translations$!==void 0?_data$1$translations$:(_carta$oracle_text2=carta.oracle_text)!==null&&_carta$oracle_text2!==void 0?_carta$oracle_text2:\"\";// 4. Traduz as faces via Azure se houver\nlet facesTraduzidas=carta.card_faces;if(carta.card_faces&&carta.card_faces.length>0){facesTraduzidas=await Promise.all(carta.card_faces.map(async face=>{var _face$oracle_text2;const faceNomeTrad=await translateText(face.name,\"pt\");const faceTextoTrad=await translateText((_face$oracle_text2=face.oracle_text)!==null&&_face$oracle_text2!==void 0?_face$oracle_text2:\"\",\"pt\");return _objectSpread(_objectSpread({},face),{},{name:faceNomeTrad,oracle_text:faceTextoTrad});}));}// 💾 Salva tudo no cache do IndexedDB\nawait saveTranslation(cardId,carta.name,nomeTraduzido,textoTraduzido,facesTraduzidas);return _objectSpread(_objectSpread({},carta),{},{name:nomeTraduzido!==null&&nomeTraduzido!==void 0?nomeTraduzido:carta.name,oracle_text:textoTraduzido!==null&&textoTraduzido!==void 0?textoTraduzido:carta.oracle_text,card_faces:facesTraduzidas});}","map":{"version":3,"names":["saveTranslation","getTranslation","translateText","text","_data$0$translations$","_data$","_data$$translations","_data$$translations$","to","arguments","length","undefined","endpoint","process","env","REACT_APP_TRANSLATOR_ENDPOINT","key","REACT_APP_TRANSLATOR_KEY","region","REACT_APP_TRANSLATOR_REGION","res","fetch","concat","method","headers","body","JSON","stringify","data","json","translations","findPortugueseEdition","printsSearchUri","nextUrl","_data$next_page","ok","found","find","c","lang","has_more","next_page","traduzirCarta","carta","_carta$oracle_id","_carta$oracle_text","_data$0$translations$2","_data$2","_data$2$translations","_data$2$translations$","_data$1$translations$","_data$3","_data$3$translations","_data$3$translations$","_carta$oracle_text2","cardId","oracle_id","id","cached","name","console","log","_objectSpread","translatedName","oracle_text","translatedText","card_faces","faces","edicaoPt","prints_search_uri","nomeFinal","printed_name","textoFinal","printed_text","facesTraduzidas","map","face","Promise","all","_face$oracle_text","payload","nomeTraduzido","textoTraduzido","_face$oracle_text2","faceNomeTrad","faceTextoTrad"],"sources":["C:/Users/Lucas Araujo/Desktop/supabase/DeckMaster/src/services/translator.ts"],"sourcesContent":["// src/services/translator.ts\r\nimport { saveTranslation, getTranslation } from \"@/lib/translationCache\";\r\n\r\n// Tipagem básica da carta do Scryfall\r\nexport type ScryfallCard = {\r\n  id: string;\r\n  oracle_id?: string;\r\n  name: string;\r\n  oracle_text?: string;\r\n  printed_name?: string;\r\n  printed_text?: string;\r\n  lang?: string;\r\n  type_line?: string;\r\n  image_uris?: {\r\n    small?: string;\r\n    normal?: string;\r\n    large?: string;\r\n    png?: string;\r\n  };\r\n  card_faces?: Array<{\r\n    name: string;\r\n    oracle_text?: string;\r\n    printed_text?: string;\r\n    printed_name?: string;\r\n    type_line?: string;\r\n    image_uris?: {\r\n      small?: string;\r\n      normal?: string;\r\n      large?: string;\r\n      png?: string;\r\n    };\r\n  }>;\r\n  prints_search_uri: string;\r\n  rulings_uri?: string;\r\n  rulings?: { published_at: string; comment: string; source?: string }[];\r\n};\r\n\r\n// Tipagem da lista de resultados do Scryfall\r\ninterface ScryfallList<T> {\r\n  object: string;\r\n  total_cards?: number;\r\n  has_more?: boolean;\r\n  next_page?: string;\r\n  data: T[];\r\n}\r\n\r\n// --------------------\r\n// Azure Translator API\r\n// --------------------\r\nexport async function translateText(text: string, to: string = \"pt\"): Promise<string> {\r\n  if (!text) return \"\";\r\n  const endpoint = process.env.REACT_APP_TRANSLATOR_ENDPOINT!;\r\n  const key = process.env.REACT_APP_TRANSLATOR_KEY!;\r\n  const region = process.env.REACT_APP_TRANSLATOR_REGION!;\r\n\r\n  const res: Response = await fetch(`${endpoint}translate?api-version=3.0&to=${to}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Ocp-Apim-Subscription-Key\": key,\r\n      \"Ocp-Apim-Subscription-Region\": region,\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify([{ text }]),\r\n  });\r\n\r\n  const data: any = await res.json();\r\n  return data?.[0]?.translations?.[0]?.text ?? text;\r\n}\r\n\r\n// --------------------\r\n// Função principal\r\n// --------------------\r\nasync function findPortugueseEdition(printsSearchUri: string): Promise<ScryfallCard | null> {\r\n  let nextUrl: string | null = printsSearchUri;\r\n\r\n  while (nextUrl) {\r\n    const res: Response = await fetch(nextUrl);\r\n    if (!res.ok) break;\r\n\r\n    const data: ScryfallList<ScryfallCard> = await res.json();\r\n    const found = data.data.find((c) => c.lang === \"pt\");\r\n    if (found) return found;\r\n\r\n    nextUrl = data.has_more ? data.next_page ?? null : null;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// --------------------\r\n// Função principal\r\n// --------------------\r\nexport async function traduzirCarta(carta: ScryfallCard) {\r\n  const cardId = carta.oracle_id ?? carta.id;\r\n  \r\n  // 🔍 1. Verifica cache do IndexedDB primeiro\r\n  const cached = await getTranslation(cardId, carta.name);\r\n  if (cached) {\r\n    console.log(`💾 Usando tradução em cache: ${carta.name}`);\r\n    return {\r\n      ...carta,\r\n      name: cached.translatedName,\r\n      oracle_text: cached.translatedText,\r\n      card_faces: cached.faces || carta.card_faces,\r\n    };\r\n  }\r\n\r\n  // 2. Tenta achar edição em português no Scryfall\r\n  const edicaoPt = await findPortugueseEdition(carta.prints_search_uri);\r\n\r\n  if (edicaoPt) {\r\n    // Se achou edição PT, usa o texto traduzido oficial\r\n    const nomeFinal = edicaoPt.printed_name || edicaoPt.name;\r\n    const textoFinal = edicaoPt.printed_text || edicaoPt.oracle_text || \"\";\r\n    \r\n    // Traduz as faces também, se houver\r\n    let facesTraduzidas = carta.card_faces;\r\n    if (edicaoPt.card_faces && edicaoPt.card_faces.length > 0) {\r\n      facesTraduzidas = edicaoPt.card_faces.map((face) => ({\r\n        ...face,\r\n        name: face.printed_name || face.name,\r\n        oracle_text: face.printed_text || face.oracle_text || \"\",\r\n      }));\r\n    } else if (carta.card_faces && carta.card_faces.length > 0) {\r\n      // Se a edição PT não tem faces mas a original tem, traduz via Azure\r\n      facesTraduzidas = await Promise.all(\r\n        carta.card_faces.map(async (face) => ({\r\n          ...face,\r\n          name: await translateText(face.name, \"pt\"),\r\n          oracle_text: await translateText(face.oracle_text ?? \"\", \"pt\"),\r\n        }))\r\n      );\r\n    }\r\n\r\n    // 💾 Salva no cache do IndexedDB\r\n    await saveTranslation(cardId, carta.name, nomeFinal, textoFinal, facesTraduzidas);\r\n\r\n    return {\r\n      ...carta,\r\n      name: nomeFinal,\r\n      oracle_text: textoFinal,\r\n      card_faces: facesTraduzidas,\r\n    };\r\n  }\r\n\r\n  // 3. Se não achou edição PT, traduz via Azure\r\n  const payload = [\r\n    { text: carta.name },\r\n    { text: carta.oracle_text ?? \"\" },\r\n  ];\r\n\r\n  const endpoint = process.env.REACT_APP_TRANSLATOR_ENDPOINT!;\r\n  const key = process.env.REACT_APP_TRANSLATOR_KEY!;\r\n  const region = process.env.REACT_APP_TRANSLATOR_REGION!;\r\n\r\n  const res: Response = await fetch(`${endpoint}translate?api-version=3.0&to=pt`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Ocp-Apim-Subscription-Key\": key,\r\n      \"Ocp-Apim-Subscription-Region\": region,\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  const data: any = await res.json();\r\n  const nomeTraduzido = data?.[0]?.translations?.[0]?.text ?? carta.name;\r\n  const textoTraduzido = data?.[1]?.translations?.[0]?.text ?? (carta.oracle_text ?? \"\");\r\n\r\n  // 4. Traduz as faces via Azure se houver\r\n  let facesTraduzidas = carta.card_faces;\r\n  if (carta.card_faces && carta.card_faces.length > 0) {\r\n    facesTraduzidas = await Promise.all(\r\n      carta.card_faces.map(async (face) => {\r\n        const faceNomeTrad = await translateText(face.name, \"pt\");\r\n        const faceTextoTrad = await translateText(face.oracle_text ?? \"\", \"pt\");\r\n        \r\n        return {\r\n          ...face,\r\n          name: faceNomeTrad,\r\n          oracle_text: faceTextoTrad,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  // 💾 Salva tudo no cache do IndexedDB\r\n  await saveTranslation(cardId, carta.name, nomeTraduzido, textoTraduzido, facesTraduzidas);\r\n\r\n  return {\r\n    ...carta,\r\n    name: nomeTraduzido ?? carta.name,\r\n    oracle_text: textoTraduzido ?? carta.oracle_text,\r\n    card_faces: facesTraduzidas,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}